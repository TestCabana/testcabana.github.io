<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/posts/nextfox-qian-duan-wen-dang/"/>
      <url>/posts/nextfox-qian-duan-wen-dang/</url>
      
        <content type="html"><![CDATA[<h1 id="Nextfox文档"><a href="#Nextfox文档" class="headerlink" title="Nextfox文档"></a>Nextfox文档</h1><h2 id="一、项目介绍"><a href="#一、项目介绍" class="headerlink" title="一、项目介绍"></a>一、项目介绍</h2><p>Nextfox是一个高效简洁易用的测试管理工具，包含：项目管理、系统配置、功能测试、接口测试、UI自动化测试、性能测试、精准测试、便捷工具等实用功能。</p><h3 id="1、前端技术"><a href="#1、前端技术" class="headerlink" title="1、前端技术"></a>1、前端技术</h3><ul><li>前端开发：Next + React+Antd + TypeScript + TailwindCSS</li></ul><h3 id="2、功能模块"><a href="#2、功能模块" class="headerlink" title="2、功能模块"></a>2、功能模块</h3><h2 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h2><h3 id="1、相关依赖官网"><a href="#1、相关依赖官网" class="headerlink" title="1、相关依赖官网"></a>1、相关依赖官网</h3><ul><li><input disabled type="checkbox"> 前端中文学习网址：<a href="https://nodejs.cn/">https://nodejs.cn/</a></li><li><input disabled type="checkbox"> 页面元素文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element</a></li><li><input disabled type="checkbox"> 元素属性文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes</a></li><li><input disabled type="checkbox"> Node.js 官网：<a href="https://nodejs.org/en">https://nodejs.org/en</a></li><li><input disabled type="checkbox"> Next.js 官网：<a href="https://nextjs.org/">https://nextjs.org/</a></li><li><input disabled type="checkbox"> react.js 官网：<a href="https://react.dev/">https://react.dev/</a></li><li><input disabled type="checkbox"> Jsdelivr 官网：<a href="https://www.jsdelivr.com/">https://www.jsdelivr.com/</a></li><li><input disabled type="checkbox"> Babel 官网：<a href="https://www.babeljs.cn/">https://www.babeljs.cn/</a></li><li><input disabled type="checkbox"> antd 官网：<a href="https://ant-design.antgroup.com/docs/react/use-with-next-cn">https://ant-design.antgroup.com/docs/react/use-with-next-cn</a></li><li><input disabled type="checkbox"> Tailwind 官网：<a href="https://tailwindcss.com/">https://tailwindcss.com/</a></li><li><input disabled type="checkbox"> clsx 官网：<a href="https://www.npmjs.com/package/clsx">https://www.npmjs.com/package/clsx</a></li><li><input disabled type="checkbox"> React-icons 图标官网：<a href="https://react-icons.github.io/react-icons/">https://react-icons.github.io/react-icons/</a></li><li><input disabled type="checkbox"> avatar 官网：<a href="https://pravatar.cc/">https://pravatar.cc/</a></li><li><input disabled type="checkbox"> Zustand 官网：<a href="https://zustand-demo.pmnd.rs/">https://zustand-demo.pmnd.rs/</a></li><li><input disabled type="checkbox"> icons图标免费网站：<ul><li><input disabled type="checkbox"> <a href="https://yesicon.app/">https://yesicon.app/</a></li><li><input disabled type="checkbox"> <a href="https://lucide.dev/icons/">https://lucide.dev/icons/</a></li></ul></li></ul><h3 id="2、前端环境搭建"><a href="#2、前端环境搭建" class="headerlink" title="2、前端环境搭建"></a>2、前端环境搭建</h3><ol><li><h5 id="创建-Next-js-项目"><a href="#创建-Next-js-项目" class="headerlink" title="创建 Next.js 项目"></a>创建 Next.js 项目</h5><p>设置镜像加速器</p><pre class="line-numbers language-shell"><code class="language-shell">npm config set registry https://registry.npmmirror.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先，确保你已经安装了 Node.js 和 npm 或 yarn。然后在终端中运行以下命令创建一个新的 Next.js 项目，并启用 TypeScript：</p><pre class="line-numbers language-shell"><code class="language-shell">npx create-next-app@latest nextfox-frontend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><h5 id="安装必要的依赖项"><a href="#安装必要的依赖项" class="headerlink" title="安装必要的依赖项"></a>安装必要的依赖项</h5><p>安装 Ant Design、postcss、autoprefixer及其所需的其他依赖项：</p><pre class="line-numbers language-shell"><code class="language-shell">npm install antd tailwindcss postcss autoprefixer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><h5 id="运行开发服务器"><a href="#运行开发服务器" class="headerlink" title="运行开发服务器"></a>运行开发服务器</h5><p>在项目根目录中运行以下命令启动开发服务器：</p><pre class="line-numbers language-shell"><code class="language-shell">pnpm i # 安装项目依赖pnpm dev # 启动本地服务// pnpm dev 你可以在浏览器中访问 http://localhost:3000 查看项目<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="3、前端项目结构"><a href="#3、前端项目结构" class="headerlink" title="3、前端项目结构"></a>3、前端项目结构</h3><ul><li><strong>创建项目目录</strong></li></ul><pre class="line-numbers language-shell"><code class="language-shell">mkdir -p src/&#123;apis,app,components,contexts,enums,hooks,styles,types,utils&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>pulbic</strong>：静态资源目录<ul><li>images目录：存放图片</li><li>favicon.svg：svg图片</li><li>manifest.webmanifest：应用元数据</li></ul></li><li><strong>src</strong>：源文件夹<ul><li><strong>apis</strong>：请求接口</li><li><strong>app</strong>：页面组件</li><li><strong>components</strong>：公共组件</li><li><strong>contexts</strong>：上下文管理</li><li><strong>hooks</strong>：自定义钩子</li><li><strong>enums</strong>：定义枚举类型</li><li><strong>types</strong>：定义TypeScript类型</li><li><strong>styles</strong>：全局样式</li><li><strong>utils</strong>：工具函数</li></ul></li><li><strong>next.config.mjs</strong>： nextjs 配置</li><li><strong>.env.development</strong>：开发环境变量</li><li><strong>.env.production</strong>：发布版本环境变量</li><li><strong>tsconfig.json</strong>：TypeScript 项目的配置文件</li><li><strong>postcss.config.mjs</strong>：css样式插件</li><li><strong>tailwind.config.ts</strong>： tailwindcss 全局设置</li><li><strong>Dockerfile</strong>： docker 构建配置</li><li>.eslinttrc.cjs： eslint配置信息</li><li>.gitignore： git忽略文件</li><li>.prettierrc.cjs： 代码格式设置</li><li>.stylelintrc.cjs：Stylelint 配置文件</li><li>commitlint.config： commit 提交设置</li><li>next-env.d.ts：提供 Next.js 特定的类型声明</li></ul><h3 id="4、配置项"><a href="#4、配置项" class="headerlink" title="4、配置项"></a>4、配置项</h3><ul><li><h5 id="next-config-mjs：URL配置"><a href="#next-config-mjs：URL配置" class="headerlink" title="next.config.mjs：URL配置"></a>next.config.mjs：URL配置</h5></li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** @type &amp;#123;import('next').NextConfig&amp;#125; */</span><span class="token keyword">const</span> nextConfig <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  reactStrictMode<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">async</span> <span class="token function">rewrites</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        source<span class="token punctuation">:</span> <span class="token string">'/api/:path*'</span><span class="token punctuation">,</span>        destination<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`$&amp;#123;process.env.NEXT_PUBLIC_API_URL&amp;#125;/:path*`</span></span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> nextConfig<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h5 id="env-development：开发环境"><a href="#env-development：开发环境" class="headerlink" title=".env.development：开发环境"></a>.env.development：开发环境</h5></li></ul><pre><code>NEXT_PUBLIC_API_URL=http://localhost:5173/api</code></pre><ul><li><h5 id="env-production：生产环境"><a href="#env-production：生产环境" class="headerlink" title=".env.production：生产环境"></a>.env.production：生产环境</h5></li></ul><pre><code>NEXT_PUBLIC_API_URL=</code></pre><ul><li><h5 id="postcss-config-mjs"><a href="#postcss-config-mjs" class="headerlink" title="postcss.config.mjs"></a>postcss.config.mjs</h5></li></ul><pre class="line-numbers language-mjs"><code class="language-mjs">/** @type &#123;import('postcss-load-config').Config&#125; */const config = &#123;  plugins: &#123;    tailwindcss: &#123;&#125;,    autoprefixer: &#123;&#125;,    'tailwindcss/nesting': &#123;&#125;,  &#125;,&#125;;export default config;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h5 id="tailwind-config-ts：样式配置"><a href="#tailwind-config-ts：样式配置" class="headerlink" title="tailwind.config.ts：样式配置"></a>tailwind.config.ts：样式配置</h5></li></ul><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">import</span> type <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Config <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'tailwindcss'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  content<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'./src/&amp;#123;app,components&amp;#125;/**/*.&amp;#123;js,jsx,ts,tsx&amp;#125;'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  theme<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    extend<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      colors<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      padding<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        main<span class="token punctuation">:</span> <span class="token string">'var(--p-main)'</span><span class="token punctuation">,</span>        tabContent<span class="token punctuation">:</span> <span class="token string">'var(--p-tab-content)'</span><span class="token punctuation">,</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      margin<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        tabContent<span class="token punctuation">:</span> <span class="token string">'var(--p-tab-content)'</span><span class="token punctuation">,</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  corePlugins<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    preflight<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> satisfies Config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h5 id="Dockerfile：docker配置"><a href="#Dockerfile：docker配置" class="headerlink" title="Dockerfile：docker配置"></a><strong>Dockerfile</strong>：docker配置</h5></li></ul><pre><code></code></pre><ul><li><h5 id="commitlint-config：-commit-提交设置"><a href="#commitlint-config：-commit-提交设置" class="headerlink" title="commitlint.config： commit 提交设置"></a><strong>commitlint.config</strong>： commit 提交设置</h5></li></ul><pre class="line-numbers language-shell"><code class="language-shell">// 安装commitlintnpm add -D @commitlint/config-conventional @commitlint/cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="四、app页面组件"><a href="#四、app页面组件" class="headerlink" title="四、app页面组件"></a>四、app页面组件</h2><h3 id="page-tsx：项目主页面"><a href="#page-tsx：项目主页面" class="headerlink" title="page.tsx：项目主页面"></a>page.tsx：项目主页面</h3><pre class="line-numbers language-tsx"><code class="language-tsx">import &#123; redirect &#125; from "next/navigation";export default function HomePage() &#123;  return redirect('/login')&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="layout-tsx：项目主模版"><a href="#layout-tsx：项目主模版" class="headerlink" title="layout.tsx：项目主模版"></a>layout.tsx：项目主模版</h3><p><strong>app&#x2F;layout.tsx 是整个应用的主布局文件，相当于React的main.ts或App.tsx，做以下几个事情：</strong></p><ul><li>项目 metadata</li><li>加载全局样式 globals.css</li><li>加载网络&#x2F;本地字体</li><li>国际化 i18n</li><li>第三方组件库 Provider Wrapper</li><li><strong>顶层 RootLayout 作用于所有页面，各个子 Layout 只作用于自己所属的目录下的所有页面</strong></li></ul><pre class="line-numbers language-tsx"><code class="language-tsx">import type &#123; Metadata, Viewport &#125; from 'next';import &#123; Inter &#125; from "next/font/google";import '@/styles/globals.css';import &#123; getPageTitle &#125; from '@/utils/getPageTitle';import &#123; App &#125; from 'antd';import &#123; AntdRegistry &#125; from '@ant-design/nextjs-registry'import &#123; AntdStyleProvider &#125; from '@/components/AntdStyleProvider';import &#123; ThemeProviderClient &#125; from '@/components/ThemeEditor';import &#123; GlobalContextProvider &#125; from '@/contexts/GlobalContext';export const metadata: Metadata = &#123;  icons: [&#123; url: '/favicon.svg', type: 'image/svg+xml' &#125;],  title: getPageTitle(),  description: 'Nextfox--高效简洁易用的测试管理工具',  authors: [&#123; name: 'TestCabana', url: 'https://github.com/TestCabana' &#125;],  manifest: '/manifest.webmanifest',&#125;;const inter = Inter(&#123; subsets: ["latin"] &#125;);export const viewport: Viewport = &#123;  colorScheme: 'light dark',&#125;;export default function RootLayout(props: React.PropsWithChildren) &#123;  return (    <html className="h-full" lang="zh-Hans-CN">      <body className=&#123;`m-0 h-full $&#123;inter.className&#125;`&#125;>        <AntdRegistry>          <AntdStyleProvider>            <App className="h-full">              <ThemeProviderClient autoSaveId="theme:persistence">                <main className="h-full">                  <GlobalContextProvider>&#123;props.children&#125;</GlobalContextProvider>                </main>              </ThemeProviderClient>            </App>          </AntdStyleProvider>        </AntdRegistry>      </body>    </html>  )&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="not-found-tsx：页面不存在"><a href="#not-found-tsx：页面不存在" class="headerlink" title="not-found.tsx：页面不存在"></a>not-found.tsx：页面不存在</h3><pre class="line-numbers language-tsx"><code class="language-tsx">'use client';import &#123; Button, Result &#125; from 'antd';import &#123; useRouter &#125; from 'next/navigation';export default function NotFound() &#123;  const router = useRouter();  return (    <Result      className="place-content-center h-screen"      status="404"      title="404"      subTitle="对不起，您访问的页面不存在。"      // extra=&#123;< Link href='/' > 回到主页</Link >&#125;      extra=&#123;        <Button type="primary" onClick=&#123;() => router.push('/')&#125;>          回到主页        </Button>      &#125;    />  );&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="main-x2F-layout-tsx：页面主模板"><a href="#main-x2F-layout-tsx：页面主模板" class="headerlink" title="(main)&#x2F;layout.tsx：页面主模板"></a>(main)&#x2F;layout.tsx：页面主模板</h3><pre class="line-numbers language-tsx"><code class="language-tsx">'use client'import '@/styles/globals.css';import &#123; theme &#125; from 'antd'import &#123; SideNav &#125; from '@/components/SideNav'import &#123; LayoutProvider &#125; from '@/contexts/LayoutContext'import &#123; HeaderNav &#125; from '@/components/HeaderNav/HeaderNav'import &#123; useThemeContext &#125; from '@/contexts/ThemeContext';export default function MainLayout(props: React.PropsWithChildren) &#123;  const &#123; themeSetting &#125; = useThemeContext();  const &#123; themeMode &#125; = themeSetting;  const &#123; token &#125; = theme.useToken()  // 根据不同的主题模式设置背景颜色  const backgroundColor = themeMode === 'darkDefault'    ? token.colorFillTertiary    : 'var(--background-color)';  // 根据不同的主题模式设置文字颜色  const colorText = themeMode === 'darkDefault'    ? 'var(--colorText)'    : token.colorText;  return (    <div className="flex h-full"      style=&#123;&#123;        // 背景颜色        backgroundColor,        // 字体颜色        color: colorText      &#125;&#125;>      <SideNav />      <div className="flex h-full flex-1 flex-col overflow-hidden pb-main pr-main">        <div className="h-12 overflow-hidden">          <HeaderNav />        </div>        <div          className="relative flex-1 overflow-y-auto border border-solid"          style=&#123;&#123;            borderColor: token.colorFillSecondary,            backgroundColor: token.colorBgContainer,            borderRadius: token.borderRadius,          &#125;&#125;        >          <LayoutProvider>&#123;props.children&#125;</LayoutProvider>        </div>      </div>    </div>  )&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1、user"><a href="#1、user" class="headerlink" title="1、user"></a>1、user</h3><h4 id="1）LoginForm-tsx：登录表单"><a href="#1）LoginForm-tsx：登录表单" class="headerlink" title="1）LoginForm.tsx：登录表单"></a>1）LoginForm.tsx：登录表单</h4><pre class="line-numbers language-tsx"><code class="language-tsx">'use client'; // 声明这个页面组件为客户端组件import React, &#123; useState, useEffect &#125; from 'react';import &#123; Button, Input, Form, message &#125; from 'antd';import &#123; UserOutlined, LockOutlined &#125; from '@ant-design/icons';import Image from 'next/image';import useLoading from '@/hooks/useLoading';import &#123; useRouter &#125; from 'next/navigation';import styles from './login.module.css'; // 导入 CSS 模块import &#123; setLocalStorage &#125; from '@/utils/localStorage';import &#123; encrypted &#125; from '@/utils/encrypted';import &#123; getPublicKey, login &#125; from '@/apis/user/user';import &#123; Response &#125; from '@/types';export default function LoginForm() &#123;  const [username, setUsername] = useState('');  const [password, setPassword] = useState('');  const [publicKey, setPublicKey] = useState<string | null>('');  const &#123; loading, setLoading &#125; = useLoading();  const router = useRouter();  useEffect(() => &#123;    // 获取公钥    const getPublicKeyReq = async () => &#123;      try &#123;        const response = await getPublicKey();        const publicKey = response.data; // 明确指定类型        console.log('公钥', publicKey)        setPublicKey(publicKey || null); // 设置公钥状态        setLocalStorage('salt', publicKey); // 将公钥存储到本地存储      &#125; catch (error) &#123;        console.error('获取公钥失败:', error);      &#125;    &#125;;    getPublicKeyReq();  &#125;, []); // 依赖数组为空，确保只在组件首次加载时调用  const handleLogin = async (username: string, password: string) => &#123;    if (!publicKey) &#123;      console.error('未获取公钥');      return false;    &#125;    try &#123;      // 使用公钥加密用户名和密码      const encryptedUsername = encrypted(username);      const encryptedPassword = encrypted(password);      if (encryptedUsername === false || encryptedPassword === false) &#123;        console.error('加密失败');        return false;      &#125;      const data = &#123;        username: encryptedUsername,        password: encryptedPassword,      &#125;;      const responseData = await login(data);      // 登录成功后将用户信息、sessionId、token存储在LocalStorage中      setLocalStorage('user', responseData);      setLocalStorage('sessionId', responseData.data.sessionId)      setLocalStorage('csrfToken', responseData.data.csrfToken)      // 登录成功后重定向到 /dashboard      router.push('/dashboard');      return true;    &#125; catch (error) &#123;      console.error('登录请求失败:', error);      return false;    &#125;  &#125;;  const handleSubmit = async (values: &#123; username: string; password: string &#125;) => &#123;    setLoading(true);    try &#123;      const success = await handleLogin(values.username, values.password);      if (!success) &#123;        message.error('登录请求失败');      &#125;    &#125; catch (error) &#123;      message.error('登录时发生错误');    &#125; finally &#123;      setLoading(false);    &#125;  &#125;;  return (    <div className=&#123;styles.container&#125;>      <div className=&#123;styles.loginFormWrapper&#125;>        <div className=&#123;styles.title&#125;>          <Image            src="/images/login-logo.svg"            height=&#123;60&#125;            width=&#123;60&#125;            alt="logo图片"          />          <div className=&#123;styles.titleText&#125;>Nextfox</div>        </div>        <span className=&#123;styles.subtitle&#125;>          高效简洁易用的开源测试管理工具        </span>        <div className=&#123;styles.formContainer&#125;>          <div className=&#123;styles.formTitle&#125;>账号登录</div>          <Form onFinish=&#123;handleSubmit&#125; className="w-[400px]">            <Form.Item              name="username"              rules=&#123;[&#123; required: true, message: '请输入用户名' &#125;]&#125;              className=&#123;styles.formItem&#125;            >              <Input                type="text"                id="username"                placeholder="请输入用户名"                prefix=&#123;<UserOutlined />&#125;                value=&#123;username&#125;                onChange=&#123;(e) => setUsername(e.target.value)&#125;                allowClear              />            </Form.Item>            <Form.Item              name="password"              rules=&#123;[&#123; required: true, message: '请输入密码' &#125;]&#125;              className=&#123;styles.formItem&#125;            >              <Input.Password                type="password"                id="password"                placeholder="请输入密码"                prefix=&#123;<LockOutlined />&#125;                value=&#123;password&#125;                onChange=&#123;(e) => setPassword(e.target.value)&#125;                allowClear              />            </Form.Item>            <Form.Item className=&#123;styles.formItem&#125;>              <Button                type="primary"                htmlType="submit"                loading=&#123;loading&#125;                className=&#123;styles.submitButton&#125;              >                登录              </Button>            </Form.Item>          </Form>        </div>      </div>    </div>  );&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）page.ts：登录页面</p><pre class="line-numbers language-tsx"><code class="language-tsx">import LoginForm from './LoginForm';import styles from './login.module.css';export default function LoginPage() &#123;  return (    <div className=&#123;`min-h-screen flex items-center justify-center $&#123;styles.background&#125;`&#125;>      <LoginForm />    </div>  );&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2）page-tsx：登录页面"><a href="#2）page-tsx：登录页面" class="headerlink" title="2）page.tsx：登录页面"></a>2）page.tsx：登录页面</h4><pre class="line-numbers language-tsx"><code class="language-tsx">import LoginForm from './LoginForm';import styles from './login.module.css';export default function LoginPage() &#123;  return (    <div className=&#123;`min-h-screen flex items-center justify-center $&#123;styles.backgroundLogin&#125;`&#125;>      <LoginForm />    </div>  );&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3）login-module-css：登录样式"><a href="#3）login-module-css：登录样式" class="headerlink" title="3）login.module.css：登录样式"></a>3）login.module.css：登录样式</h4><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* login.module.css */</span><span class="token number">.</span>backgroundLogin &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url('/images/login-background.jpg')</span><span class="token punctuation">;</span>  <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>  <span class="token property">background-position</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>vw<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 容器样式 */</span><span class="token number">.</span>container &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token atrule"><span class="token rule">@apply</span> flex items-center justify-center m-2<span class="token punctuation">;</span></span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 登录表单包装样式 */</span><span class="token number">.</span>loginFormWrapper &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token atrule"><span class="token rule">@apply</span> flex flex-col items-center justify-center<span class="token punctuation">;</span></span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 标题样式 */</span><span class="token number">.</span>title &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token atrule"><span class="token rule">@apply</span> flex items-center justify-center<span class="token punctuation">;</span></span>  <span class="token number">.</span>titleText &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token atrule"><span class="token rule">@apply</span> text-[35px] font-bold text-[#9373ee]<span class="token punctuation">;</span></span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>subtitle &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token atrule"><span class="token rule">@apply</span> mt-3 text-[18px] font-bold text-[#9373ee]<span class="token punctuation">;</span></span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 表单容器样式 */</span><span class="token number">.</span>formContainer &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token atrule"><span class="token rule">@apply</span> mt-8 p-10 rounded-lg bg-white shadow-2xl<span class="token punctuation">;</span></span>  <span class="token number">.</span>formTitle &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token atrule"><span class="token rule">@apply</span> mb-8 text-[18px] font-bold text-[#9373ee]<span class="token punctuation">;</span></span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>formItem &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token atrule"><span class="token rule">@apply</span> mb-8<span class="token punctuation">;</span></span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>submitButton &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token atrule"><span class="token rule">@apply</span> w-full flex justify-center<span class="token punctuation">;</span></span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、system-settings"><a href="#2、system-settings" class="headerlink" title="2、system-settings"></a>2、system-settings</h3><h4 id="1）page-tsx"><a href="#1）page-tsx" class="headerlink" title="1）page.tsx"></a>1）page.tsx</h4><pre class="line-numbers language-tsx"><code class="language-tsx">'use client'// 导入 Ant Design 组件库中的 `ConfigProvider`（配置提供者），`Menu`（菜单），以及 `Skeleton`（加载占位符）组件。import &#123; ConfigProvider, Menu, type MenuProps, Skeleton, theme &#125; from 'antd'import &#123; LayersIcon, SettingsIcon &#125; from 'lucide-react'import &#123; PanelLayout &#125; from '@/components/PanelLayout'// 定义 `MenuItem` 类型，它是 `MenuProps` 中 `items` 属性的类型。`Required<MenuProps>` 强制要求 `MenuProps` 中的所有属性都必须被指定。type MenuItem = Required<MenuProps>['items'][number]// 定义一个 `items` 数组，包含了菜单项的数据结构const items: MenuItem[] = [  &#123;    key: 'g1', // 菜单项的唯一标识符    label: (      <div className="flex items-center gap-2">        <SettingsIcon size=&#123;16&#125; />        通用设置      </div>    ),    type: 'group', // 表示这是一个分组项    children: [ // 子菜单项      &#123; key: '1', label: '基本设置' &#125;, // 第一个子菜单项      &#123;        key: '2', // 第二个子菜单项的标识符        label: '功能设置', // 子菜单项的文本标签        children: [ // 子菜单项下的子菜单项          &#123; key: '1x', label: '接口功能设置' &#125;, // 子菜单项          &#123; key: '2x', label: '高级设置' &#125;, // 子菜单项        ],      &#125;,    ],  &#125;,  &#123;    key: 'g2', // 另一个分组菜单项的标识符    label: (      <div className="flex items-center gap-2">        <LayersIcon size=&#123;16&#125; />        项目资源      </div>    ),    type: 'group',  // 表示这是一个分组项    children: [      &#123; key: '3', label: '常用参数' &#125;,      &#123; key: '4', label: '公共响应' &#125;,    ],  &#125;,]export default function SettingsPage() &#123;  const &#123; token &#125; = theme.useToken()  return (    <PanelLayout      layoutName="系统设置"      left=&#123;        // 使用一个可以滚动的 div 来包裹菜单        <div className="overflow-y-auto">          <ConfigProvider   // 使用 `ConfigProvider` 来覆盖默认的样式配置            theme=&#123;&#123;              // 定义组件级别的样式覆盖              components: &#123;                // 菜单组件的样式配置                Menu: &#123;                  activeBarBorderWidth: 0,  // 移除激活状态下的边框宽度                  itemHeight: 32,   // 菜单项的高度                  // itemSelectedBg: token.colorBgTextHover,   // 菜单项被选中时的背景颜色                  // itemActiveBg: token.colorBgTextHover,   // 菜单项处于活动状态时的背景颜色                  // itemSelectedColor: token.colorText,   // 菜单项被选中时的文本颜色                &#125;,              &#125;,            &#125;&#125;          >            <Menu items=&#123;items&#125; mode="inline" />          </ConfigProvider>        </div>      &#125;      right=&#123;        // 使用一个有内边距的 div 来包裹右侧内容        <div className="p-5">          待实现的设置页          <Skeleton />          <Skeleton />        </div>      &#125;    />  )&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、dashboard"><a href="#3、dashboard" class="headerlink" title="3、dashboard"></a>3、dashboard</h3><h4 id="1）page-tsx-1"><a href="#1）page-tsx-1" class="headerlink" title="1）page.tsx"></a>1）page.tsx</h4><pre class="line-numbers language-tsx"><code class="language-tsx">'use client';import React, &#123; useState &#125; from 'react';import &#123; Card, Col, Row, Statistic &#125; from 'antd';import &#123; BarChartOutlined, DashboardOutlined &#125; from '@ant-design/icons';export default function Home() &#123;  const [statisticLoading, setStatisticLoading] = useState<boolean>(true);  const [chartLoading, setChartLoading] = useState<boolean>(true);  const [statisticNumber, setStatisticNumber] = useState<any>();  const [chartData, setChartData] = useState([]);  return (    <div className='pr-6 pl-6'>      <div className='mt-6'>        <Row gutter=&#123;16&#125;>          <Col span=&#123;6&#125; >            <Card >              <Statistic                loading=&#123;statisticLoading&#125;                title='用例总数'                value=&#123;statisticNumber?.appNum || 20&#125;                prefix=&#123;<BarChartOutlined />&#125;              />            </Card>          </Col>          <Col span=&#123;6&#125;>            <Card>              <Statistic                loading=&#123;statisticLoading&#125;                title='接口用例'                value=&#123;statisticNumber?.taskRunningNum || 1980&#125;                prefix=&#123;<DashboardOutlined />&#125;                suffix=&#123;`/ $&#123;statisticNumber?.taskTotalNum&#125;`&#125;              />            </Card>          </Col>          <Col span=&#123;6&#125;>            <Card>              <Statistic                loading=&#123;statisticLoading&#125;                title='自动化用例'                value=&#123;statisticNumber?.executorOnlineNum || 80&#125;                prefix=&#123;<BarChartOutlined />&#125;                suffix=&#123;`/ $&#123;statisticNumber?.executorTotalNum&#125;`&#125;              />            </Card>          </Col>          <Col span=&#123;6&#125;>            <Card>              <Statistic                loading=&#123;statisticLoading&#125;                title='缺陷总数'                value=&#123;statisticNumber?.alarmNum || 10&#125;                prefix=&#123;<BarChartOutlined />&#125;              />            </Card>          </Col>        </Row>      </div>      <div className='h-full mt-6 mb-6'>        <Card          loading=&#123;chartLoading&#125;          bordered=&#123;true&#125;          title='测试任务汇总'        // style=&#123;&#123;        //   marginTop: '24px',        // &#125;&#125;        ></Card>      </div>    </div >  );&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、apis：请求接口"><a href="#五、apis：请求接口" class="headerlink" title="五、apis：请求接口"></a>五、apis：请求接口</h2><h3 id><a href="#" class="headerlink" title></a></h3><h2 id="六、components：公共组件"><a href="#六、components：公共组件" class="headerlink" title="六、components：公共组件"></a>六、components：公共组件</h2><h3 id="AntdStyleProvider-tsx：antd组件兼容样式问题"><a href="#AntdStyleProvider-tsx：antd组件兼容样式问题" class="headerlink" title="AntdStyleProvider.tsx：antd组件兼容样式问题"></a>AntdStyleProvider.tsx：antd组件兼容样式问题</h3><pre class="line-numbers language-tsx"><code class="language-tsx">'use client'import &#123; useState &#125; from 'react'import &#123; useServerInsertedHTML &#125; from 'next/navigation'import &#123; createCache, extractStyle, StyleProvider &#125; from '@ant-design/cssinjs'import React from 'react'/** * 这部分的代码参考自：https://github.com/ant-design/ant-design/issues/38555#issuecomment-1571203559 */function AntdStyleRegister(props: React.PropsWithChildren) &#123;  const [cache] = useState(() => createCache())  useServerInsertedHTML(() => &#123;    return (      <script        dangerouslySetInnerHTML=&#123;&#123;          // This is hack, `extractStyle` does not currently support returning JSX or related data.          __html: `$&#123;extractStyle(cache)&#125;<script>`,        &#125;&#125;      />    )  &#125;)  return <StyleProvider cache=&#123;cache&#125;>&#123;props.children&#125;</StyleProvider>&#125;/** * 使用「服务端渲染」需要烘焙样式，否则会出现样式闪烁问题。 * * - 相关文档：https://ant.design/docs/react/customize-theme-cn#服务端渲染 * - 相关 Issue：https://github.com/ant-design/ant-design/issues/38555 */export function AntdStyleProvider(props: React.PropsWithChildren) &#123;  return <AntdStyleRegister>&#123;props.children&#125;</AntdStyleRegister>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PanelLayout-tsx：拖动面板组件"><a href="#PanelLayout-tsx：拖动面板组件" class="headerlink" title="PanelLayout.tsx：拖动面板组件"></a>PanelLayout.tsx：拖动面板组件</h3><pre class="line-numbers language-tsx"><code class="language-tsx">'use client'import &#123; useLayoutEffect, useState &#125; from 'react';import &#123; Panel, PanelGroup, type PanelProps, PanelResizeHandle &#125; from 'react-resizable-panels';import &#123; ChevronLeftIcon, ChevronRightIcon &#125; from 'lucide-react';import &#123; css &#125; from '@emotion/css';import &#123; useStyles &#125; from '@/hooks/useStyle';import &#123; useLayoutContext &#125; from '@/contexts/LayoutContext';interface PanelLayoutProps &#123;  layoutName?: string; // 布局名称（可选）  left?: React.ReactNode; // 左侧的内容（可选）  right?: React.ReactNode; // 右侧的内容（可选）&#125;// 定义 PanelLayout 组件，这是一个可调整大小的面板布局组件export function PanelLayout(props: PanelLayoutProps) &#123;  // 解构属性  const &#123; layoutName, left, right &#125; = props;  const &#123; panelRef, isSideMenuCollapsed, setIsSideMenuCollapsed &#125; = useLayoutContext();  const &#123; styles &#125; = useStyles((&#123; token &#125;) => &#123;    // 定义 resizeHandleInner 样式    const resizeHandleInner = css(&#123;      backgroundColor: token.colorBorderSecondary,    &#125;);    return &#123;      resizeHandle: css(&#123;        // 鼠标悬停、拖动时改变背景颜色        [`&:hover > .$&#123;resizeHandleInner&#125;, &[data-resize-handle-state="hover"] > .$&#123;resizeHandleInner&#125;, &[data-resize-handle-state="drag"] > .$&#123;resizeHandleInner&#125;`]: &#123;          backgroundColor: token.colorPrimary,          width: '2px',        &#125;,      &#125;),      resizeHandleInner,      // 定义 expandTrigger 样式：颜色、背景、阴影和鼠标悬浮效果      expandTrigger: css(&#123;        color: token.colorPrimary,        backgroundColor: token.colorFillAlter,        boxShadow: `1px 0 4px rgba(16 24 40 / 0.08)`,        '&:hover': &#123;          backgroundColor: token.colorFillSecondary,        &#125;,      &#125;),    &#125;;  &#125;);  const [defaultSize, setDefaultSize] = useState<PanelProps['defaultSize']>();  const [minSize, setMinSize] = useState<PanelProps['minSize']>();  // 使用 useLayoutEffect 计算 defaultSize 和 minSize  useLayoutEffect(() => &#123;    const panelGroup = document.querySelector('#panel-group');    if (panelGroup instanceof HTMLElement) &#123;      // 计算默认尺寸和最小尺寸      setDefaultSize((260 / panelGroup.offsetWidth) * 100);      setMinSize((220 / panelGroup.offsetWidth) * 100);    &#125;  &#125;, []);  return (    <>      <div className='min-w-[1000px] overflow-x-auto h-full'>        <PanelGroup direction="horizontal" id="panel-group">          &#123;!!defaultSize && !!minSize && (            <>              &#123;/* 渲染左侧面板 */&#125;              <Panel                ref=&#123;panelRef&#125;                collapsible                className="flex h-full flex-col"                defaultSize=&#123;defaultSize&#125;                id="side"                maxSize=&#123;50&#125;                minSize=&#123;minSize&#125;                order=&#123;1&#125;                // 当 Panel 折叠时，设置 isSideMenuCollapsed 为 true                onCollapse=&#123;() => &#123;                  setIsSideMenuCollapsed(true);                &#125;&#125;                // 当 Panel 展开时，设置 isSideMenuCollapsed 为 false                onExpand=&#123;() => &#123;                  setIsSideMenuCollapsed(false);                &#125;&#125;              >                &#123;/* 显示布局名称 */&#125;                <div className="p-2">                  <span className="px-2 text-lg font-semibold">&#123;layoutName&#125;</span>                </div>                &#123;/* 渲染左侧内容 */&#125;                &#123;left&#125;              </Panel>              &#123;/* 渲染面板调整手柄 */&#125;              <PanelResizeHandle                className=&#123;`relative basis-px $&#123;styles.resizeHandle&#125;`&#125;              >                <div                  className=&#123;`h-full $&#123;styles.resizeHandleInner&#125;`&#125; // 应用拖动时的样式                />                &#123;/* 如果侧边菜单未被折叠，则显示收起按钮 */&#125;                &#123;!isSideMenuCollapsed && (                  <div                    className=&#123;`absolute left-0 top-1/2 z-50 flex h-12 w-4 -translate-y-1/2 cursor-pointer items-center justify-center rounded-r-lg $&#123;styles.expandTrigger&#125;`&#125;                    onClick=&#123;() => &#123;                      panelRef.current?.collapse();                    &#125;&#125;                  >                    &#123;/* 渲染收起图标 */&#125;                    <ChevronLeftIcon size=&#123;12&#125; strokeWidth=&#123;3&#125; />                  </div >                )                &#125;              </PanelResizeHandle>            </>          )&#125;          &#123;/* 渲染主面板 */&#125;          <Panel            className="relative flex h-full flex-1 flex-col overflow-y-auto"            id="main"            order=&#123;2&#125;          >            &#123;/* 渲染右侧内容 */&#125;            <div className="flex-1 overflow-auto ">&#123;right&#125;</div>          </Panel>        </PanelGroup>        &#123;/* 如果侧边菜单被折叠，则显示展开按钮 */&#125;        &#123;isSideMenuCollapsed && (          <div            className=&#123;`absolute left-0 top-1/2 z-50 flex h-12 w-4 -translate-y-1/2 cursor-pointer items-center justify-center rounded-r-lg $&#123;styles.expandTrigger&#125;`&#125;            onClick=&#123;() => &#123;              panelRef.current?.expand();            &#125;&#125;          >            &#123;/* 渲染展开图标 */&#125;            <ChevronRightIcon size=&#123;12&#125; strokeWidth=&#123;3&#125; />          </div>        )&#125;      </div>    </>  );&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1、ThemEditor：主题配置"><a href="#1、ThemEditor：主题配置" class="headerlink" title="1、ThemEditor：主题配置"></a>1、ThemEditor：主题配置</h3><h4 id="1）ThemeSetting-ts：定义主题设置的各种类型和接口"><a href="#1）ThemeSetting-ts：定义主题设置的各种类型和接口" class="headerlink" title="1）ThemeSetting.ts：定义主题设置的各种类型和接口"></a>1）ThemeSetting.ts：定义主题设置的各种类型和接口</h4><pre class="line-numbers language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 导入 Ant Design 中的 GlobalToken 类型</span><span class="token comment" spellcheck="true">// GlobalToken 包含了 Ant Design 组件的全局样式变量</span><span class="token keyword">import</span> type <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> GlobalToken <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义一个类型别名 ThemeMode，表示可用的主题模式</span><span class="token comment" spellcheck="true">// 可能的值包括 'lightDefault'（默认浅色主题）、'darkDefault'（默认深色主题）和 'lark'（特定于 Lark 的主题）</span><span class="token keyword">export</span> type ThemeMode <span class="token operator">=</span> <span class="token string">'lightDefault'</span> <span class="token operator">|</span> <span class="token string">'darkDefault'</span> <span class="token operator">|</span> <span class="token string">'lark'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义一个接口 ThemeSetting，用于描述一个主题设置对象</span><span class="token comment" spellcheck="true">// 这个对象包含了控制主题外观的关键属性</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ThemeSetting</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 表示当前选择的主题模式</span>  themeMode<span class="token punctuation">:</span> ThemeMode<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// colorPrimary 属性表示主题的主要颜色</span>  <span class="token comment" spellcheck="true">// 其类型是从 GlobalToken 中提取的 'colorPrimary' 属性的类型</span>  colorPrimary<span class="token punctuation">:</span> GlobalToken<span class="token punctuation">[</span><span class="token string">'colorPrimary'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// borderRadius 属性表示组件的边框圆角大小</span>  <span class="token comment" spellcheck="true">// 其类型是从 GlobalToken 中提取的 'borderRadius' 属性的类型</span>  borderRadius<span class="token punctuation">:</span> GlobalToken<span class="token punctuation">[</span><span class="token string">'borderRadius'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// spaceType 属性表示组件之间的间距类型</span>  <span class="token comment" spellcheck="true">// 可能的值包括 'default'（默认间距）和 'compact'（紧凑间距）</span>  spaceType<span class="token punctuation">:</span> <span class="token string">'default'</span> <span class="token operator">|</span> <span class="token string">'compact'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2）PresetTheme-tsx：默认主题"><a href="#2）PresetTheme-tsx：默认主题" class="headerlink" title="2）PresetTheme.tsx：默认主题"></a>2）PresetTheme.tsx：默认主题</h4><pre class="line-numbers language-tsx"><code class="language-tsx">// 从'antd'库中导入类型 GlobalToken 和 themeimport &#123; type GlobalToken, theme &#125; from 'antd'import type &#123; ThemeMode, ThemeSetting &#125; from './ThemeSettings'// 获取全局设计令牌（design token）const globalToken = theme.getDesignToken()// 定义默认的主题设置对象export const defaultThemeSetting: ThemeSetting = &#123;  themeMode: 'lightDefault',      // 主题模式为 'lightDefault'  colorPrimary: '#9373ee',        // 主色设置为 '#9373ee'  // colorPrimary: globalToken.colorPrimary, // 可选：使用全局的主色  borderRadius: globalToken.borderRadius,  // 边框圆角半径从全局设计令牌中获取  spaceType: 'default',           // 空间类型设置为 'default'&#125;// 定义默认主题的部分全局令牌const defaultThemeToken: Partial<GlobalToken> = &#123;  colorPrimary: defaultThemeSetting.colorPrimary, // 主色设置为默认主题设置的主色  borderRadius: defaultThemeSetting.borderRadius, // 边框圆角半径设置为默认主题设置的圆角半径&#125;const previewDefault = (  <svg version="1.1" viewBox="0 0 120 80" xmlns="http://www.w3.org/2000/svg">    <defs>      <polygon id="path-1" points="0 0 120 0 120 80 0 80" />      <path        d="M25.1277704,20 L134.87223,20 C136.655267,20 137.30184,20.1856512 137.953691,20.5342654 C138.605543,20.8828796 139.11712,21.3944567 139.465735,22.0463086 C139.814349,22.6981604 140,23.3447329 140,25.1277704 L140,94.8722296 C140,96.6552671 139.814349,97.3018396 139.465735,97.9536914 C139.11712,98.6055433 138.605543,99.1171204 137.953691,99.4657346 C137.30184,99.8143488 136.655267,100 134.87223,100 L25.1277704,100 C23.3447329,100 22.6981604,99.8143488 22.0463086,99.4657346 C21.3944567,99.1171204 20.8828796,98.6055433 20.5342654,97.9536914 C20.1856512,97.3018396 20,96.6552671 20,94.8722296 L20,25.1277704 C20,23.3447329 20.1856512,22.6981604 20.5342654,22.0463086 C20.8828796,21.3944567 21.3944567,20.8828796 22.0463086,20.5342654 C22.6981604,20.1856512 23.3447329,20 25.1277704,20 Z"        id="path-3"      />      <filter        filterUnits="objectBoundingBox"        height="122.5%"        id="filter-4"        width="115.0%"        x="-7.5%"        y="-10.0%"      >        <feOffset dx="0" dy="2" in="SourceAlpha" result="shadowOffsetOuter1" />        <feGaussianBlur in="shadowOffsetOuter1" result="shadowBlurOuter1" stdDeviation="2" />        <feColorMatrix          in="shadowBlurOuter1"          result="shadowMatrixOuter1"          type="matrix"          values="0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.02 0"        />        <feMorphology in="SourceAlpha" operator="erode" radius="0.5" result="shadowSpreadOuter2" />        <feOffset dx="0" dy="1" in="shadowSpreadOuter2" result="shadowOffsetOuter2" />        <feGaussianBlur in="shadowOffsetOuter2" result="shadowBlurOuter2" stdDeviation="3" />        <feColorMatrix          in="shadowBlurOuter2"          result="shadowMatrixOuter2"          type="matrix"          values="0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.02 0"        />        <feOffset dx="0" dy="1" in="SourceAlpha" result="shadowOffsetOuter3" />        <feGaussianBlur in="shadowOffsetOuter3" result="shadowBlurOuter3" stdDeviation="1" />        <feColorMatrix          in="shadowBlurOuter3"          result="shadowMatrixOuter3"          type="matrix"          values="0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.03 0"        />        <feMerge>          <feMergeNode in="shadowMatrixOuter1" />          <feMergeNode in="shadowMatrixOuter2" />          <feMergeNode in="shadowMatrixOuter3" />        </feMerge>      </filter>      <path        d="M61.1277704,40 L170.87223,40 C172.655267,40 173.30184,40.1856512 173.953691,40.5342654 C174.605543,40.8828796 175.11712,41.3944567 175.465735,42.0463086 C175.814349,42.6981604 176,43.3447329 176,45.1277704 L176,114.87223 C176,116.655267 175.814349,117.30184 175.465735,117.953691 C175.11712,118.605543 174.605543,119.11712 173.953691,119.465735 C173.30184,119.814349 172.655267,120 170.87223,120 L61.1277704,120 C59.3447329,120 58.6981604,119.814349 58.0463086,119.465735 C57.3944567,119.11712 56.8828796,118.605543 56.5342654,117.953691 C56.1856512,117.30184 56,116.655267 56,114.87223 L56,45.1277704 C56,43.3447329 56.1856512,42.6981604 56.5342654,42.0463086 C56.8828796,41.3944567 57.3944567,40.8828796 58.0463086,40.5342654 C58.6981604,40.1856512 59.3447329,40 61.1277704,40 Z"        id="path-5"      />      <filter        filterUnits="objectBoundingBox"        height="112.5%"        id="filter-6"        width="108.3%"        x="-4.2%"        y="-5.0%"      >        <feOffset dx="0" dy="1" in="SourceAlpha" result="shadowOffsetOuter1" />        <feGaussianBlur in="shadowOffsetOuter1" result="shadowBlurOuter1" stdDeviation="1.5" />        <feColorMatrix          in="shadowBlurOuter1"          type="matrix"          values="0 0 0 0 0.0898254103   0 0 0 0 0.115558755   0 0 0 0 0.227270154  0 0 0 0.210473121 0"        />      </filter>    </defs>    <g fill="none" fillRule="evenodd" id="正式版" stroke="none" strokeWidth="1">      <g id="Ant-Design-5.0-官网-PC" transform="translate(-578.000000, -1542.000000)">        <g id="编组-28" transform="translate(506.000000, 1542.000000)">          <g id="矩形-+-矩形备份蒙版" transform="translate(72.000000, 0.000000)">            <mask fill="white" id="mask-2">              <use xlinkHref="#path-1" />            </mask>            <use fill="#EDF1F7" id="蒙版" xlinkHref="#path-1" />            <g id="矩形" mask="url(#mask-2)">              <use fill="black" fillOpacity="1" filter="url(#filter-4)" xlinkHref="#path-3" />              <use fill="#F1F5FA" fillRule="evenodd" xlinkHref="#path-3" />            </g>            <g id="矩形备份" mask="url(#mask-2)">              <use fill="black" fillOpacity="1" filter="url(#filter-6)" xlinkHref="#path-5" />              <use fill="#FFFFFF" fillRule="evenodd" xlinkHref="#path-5" />            </g>          </g>        </g>      </g>    </g>  </svg>)const previewDark = (  <svg version="1.1" viewBox="0 0 120 80" xmlns="http://www.w3.org/2000/svg">    <defs>      <polygon id="path-1" points="0 0 120 0 120 80 0 80" />      <path        d="M22.5638852,20 L137.436115,20 C138.327634,20 138.65092,20.0928256 138.976846,20.2671327 C139.302772,20.4414398 139.55856,20.6972284 139.732867,21.0231543 C139.907174,21.3490802 140,21.6723665 140,22.5638852 L140,97.4361148 C140,98.3276335 139.907174,98.6509198 139.732867,98.9768457 C139.55856,99.3027716 139.302772,99.5585602 138.976846,99.7328673 C138.65092,99.9071744 138.327634,100 137.436115,100 L22.5638852,100 C21.6723665,100 21.3490802,99.9071744 21.0231543,99.7328673 C20.6972284,99.5585602 20.4414398,99.3027716 20.2671327,98.9768457 C20.0928256,98.6509198 20,98.3276335 20,97.4361148 L20,22.5638852 C20,21.6723665 20.0928256,21.3490802 20.2671327,21.0231543 C20.4414398,20.6972284 20.6972284,20.4414398 21.0231543,20.2671327 C21.3490802,20.0928256 21.6723665,20 22.5638852,20 Z"        id="path-3"      />      <filter        filterUnits="objectBoundingBox"        height="140.0%"        id="filter-4"        width="126.7%"        x="-13.3%"        y="-17.5%"      >        <feOffset dx="0" dy="2" in="SourceAlpha" result="shadowOffsetOuter1" />        <feGaussianBlur in="shadowOffsetOuter1" result="shadowBlurOuter1" stdDeviation="5" />        <feColorMatrix          in="shadowBlurOuter1"          type="matrix"          values="0 0 0 0 0.0898254103   0 0 0 0 0.115558755   0 0 0 0 0.227270154  0 0 0 0.210473121 0"        />      </filter>      <path        d="M58.5638852,40 L173.436115,40 C174.327634,40 174.65092,40.0928256 174.976846,40.2671327 C175.302772,40.4414398 175.55856,40.6972284 175.732867,41.0231543 C175.907174,41.3490802 176,41.6723665 176,42.5638852 L176,117.436115 C176,118.327634 175.907174,118.65092 175.732867,118.976846 C175.55856,119.302772 175.302772,119.55856 174.976846,119.732867 C174.65092,119.907174 174.327634,120 173.436115,120 L58.5638852,120 C57.6723665,120 57.3490802,119.907174 57.0231543,119.732867 C56.6972284,119.55856 56.4414398,119.302772 56.2671327,118.976846 C56.0928256,118.65092 56,118.327634 56,117.436115 L56,42.5638852 C56,41.6723665 56.0928256,41.3490802 56.2671327,41.0231543 C56.4414398,40.6972284 56.6972284,40.4414398 57.0231543,40.2671327 C57.3490802,40.0928256 57.6723665,40 58.5638852,40 Z"        id="path-5"      />      <filter        filterUnits="objectBoundingBox"        height="112.5%"        id="filter-6"        width="108.3%"        x="-4.2%"        y="-5.0%"      >        <feOffset dx="0" dy="1" in="SourceAlpha" result="shadowOffsetOuter1" />        <feGaussianBlur in="shadowOffsetOuter1" result="shadowBlurOuter1" stdDeviation="1.5" />        <feColorMatrix          in="shadowBlurOuter1"          type="matrix"          values="0 0 0 0 0.0898254103   0 0 0 0 0.115558755   0 0 0 0 0.227270154  0 0 0 0.210473121 0"        />      </filter>    </defs>    <g fill="none" fillRule="evenodd" id="正式版" stroke="none" strokeWidth="1">      <g id="Ant-Design-5.0-官网-PC" transform="translate(-726.000000, -1542.000000)">        <g id="编组-28" transform="translate(506.000000, 1542.000000)">          <g id="矩形-+-矩形备份蒙版备份" transform="translate(220.000000, 0.000000)">            <mask fill="white" id="mask-2">              <use xlinkHref="#path-1" />            </mask>            <use fill="#4F5155" id="蒙版" xlinkHref="#path-1" />            <g id="矩形" mask="url(#mask-2)">              <use fill="black" fillOpacity="1" filter="url(#filter-4)" xlinkHref="#path-3" />              <use fill="#292929" fillRule="evenodd" xlinkHref="#path-3" />            </g>            <g id="矩形备份" mask="url(#mask-2)">              <use fill="black" fillOpacity="1" filter="url(#filter-6)" xlinkHref="#path-5" />              <use fill="#4F5155" fillRule="evenodd" xlinkHref="#path-5" />            </g>          </g>        </g>      </g>    </g>  </svg>)const previewGreen = (  <svg version="1.1" viewBox="0 0 120 80" xmlns="http://www.w3.org/2000/svg">    <defs>      <polygon id="path-1" points="0 0 120 0 120 80 0 80" />      <path        d="M25.1277704,20 L134.87223,20 C136.655267,20 137.30184,20.1856512 137.953691,20.5342654 C138.605543,20.8828796 139.11712,21.3944567 139.465735,22.0463086 C139.814349,22.6981604 140,23.3447329 140,25.1277704 L140,94.8722296 C140,96.6552671 139.814349,97.3018396 139.465735,97.9536914 C139.11712,98.6055433 138.605543,99.1171204 137.953691,99.4657346 C137.30184,99.8143488 136.655267,100 134.87223,100 L25.1277704,100 C23.3447329,100 22.6981604,99.8143488 22.0463086,99.4657346 C21.3944567,99.1171204 20.8828796,98.6055433 20.5342654,97.9536914 C20.1856512,97.3018396 20,96.6552671 20,94.8722296 L20,25.1277704 C20,23.3447329 20.1856512,22.6981604 20.5342654,22.0463086 C20.8828796,21.3944567 21.3944567,20.8828796 22.0463086,20.5342654 C22.6981604,20.1856512 23.3447329,20 25.1277704,20 Z"        id="path-3"      />      <filter        filterUnits="objectBoundingBox"        height="122.5%"        id="filter-4"        width="115.0%"        x="-7.5%"        y="-10.0%"      >        <feOffset dx="0" dy="2" in="SourceAlpha" result="shadowOffsetOuter1" />        <feGaussianBlur in="shadowOffsetOuter1" result="shadowBlurOuter1" stdDeviation="2" />        <feColorMatrix          in="shadowBlurOuter1"          result="shadowMatrixOuter1"          type="matrix"          values="0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.02 0"        />        <feMorphology in="SourceAlpha" operator="erode" radius="0.5" result="shadowSpreadOuter2" />        <feOffset dx="0" dy="1" in="shadowSpreadOuter2" result="shadowOffsetOuter2" />        <feGaussianBlur in="shadowOffsetOuter2" result="shadowBlurOuter2" stdDeviation="3" />        <feColorMatrix          in="shadowBlurOuter2"          result="shadowMatrixOuter2"          type="matrix"          values="0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.02 0"        />        <feOffset dx="0" dy="1" in="SourceAlpha" result="shadowOffsetOuter3" />        <feGaussianBlur in="shadowOffsetOuter3" result="shadowBlurOuter3" stdDeviation="1" />        <feColorMatrix          in="shadowBlurOuter3"          result="shadowMatrixOuter3"          type="matrix"          values="0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.03 0"        />        <feMerge>          <feMergeNode in="shadowMatrixOuter1" />          <feMergeNode in="shadowMatrixOuter2" />          <feMergeNode in="shadowMatrixOuter3" />        </feMerge>      </filter>      <path        d="M61.1277704,40 L170.87223,40 C172.655267,40 173.30184,40.1856512 173.953691,40.5342654 C174.605543,40.8828796 175.11712,41.3944567 175.465735,42.0463086 C175.814349,42.6981604 176,43.3447329 176,45.1277704 L176,114.87223 C176,116.655267 175.814349,117.30184 175.465735,117.953691 C175.11712,118.605543 174.605543,119.11712 173.953691,119.465735 C173.30184,119.814349 172.655267,120 170.87223,120 L61.1277704,120 C59.3447329,120 58.6981604,119.814349 58.0463086,119.465735 C57.3944567,119.11712 56.8828796,118.605543 56.5342654,117.953691 C56.1856512,117.30184 56,116.655267 56,114.87223 L56,45.1277704 C56,43.3447329 56.1856512,42.6981604 56.5342654,42.0463086 C56.8828796,41.3944567 57.3944567,40.8828796 58.0463086,40.5342654 C58.6981604,40.1856512 59.3447329,40 61.1277704,40 Z"        id="path-5"      />      <filter        filterUnits="objectBoundingBox"        height="112.5%"        id="filter-6"        width="108.3%"        x="-4.2%"        y="-5.0%"      >        <feOffset dx="0" dy="1" in="SourceAlpha" result="shadowOffsetOuter1" />        <feGaussianBlur in="shadowOffsetOuter1" result="shadowBlurOuter1" stdDeviation="1.5" />        <feColorMatrix          in="shadowBlurOuter1"          type="matrix"          values="0 0 0 0 0.0898254103   0 0 0 0 0.115558755   0 0 0 0 0.227270154  0 0 0 0.210473121 0"        />      </filter>    </defs>    <g fill="none" fillRule="evenodd" id="正式版" stroke="none" strokeWidth="1">      <g id="Ant-Design-5.0-官网-PC" transform="translate(-874.000000, -1542.000000)">        <g id="编组-28" transform="translate(506.000000, 1542.000000)">          <g id="矩形-+-矩形备份蒙版备份-2" transform="translate(368.000000, 0.000000)">            <mask fill="white" id="mask-2">              <use xlinkHref="#path-1" />            </mask>            <use fill="#E1EDE5" id="蒙版" xlinkHref="#path-1" />            <g id="矩形" mask="url(#mask-2)">              <use fill="black" fillOpacity="1" filter="url(#filter-4)" xlinkHref="#path-3" />              <use fill="#66C08D" fillRule="evenodd" xlinkHref="#path-3" />            </g>            <g id="矩形备份" mask="url(#mask-2)">              <use fill="black" fillOpacity="1" filter="url(#filter-6)" xlinkHref="#path-5" />              <use fill="#FFFFFF" fillRule="evenodd" xlinkHref="#path-5" />            </g>          </g>        </g>      </g>    </g>  </svg>)export const presetThemes = &#123;  lightDefault: &#123;    preview: previewDefault,    name: '默认',    token: defaultThemeToken,  &#125;,  darkDefault: &#123;    preview: previewDark,    name: '暗黑',    token: defaultThemeToken,  &#125;,  lark: &#123;    preview: previewGreen,    name: '知识协作',    token: &#123;      colorPrimary: '#00b96b',      colorLink: '#00b96b',    &#125;,  &#125;,&#125; as const satisfies Record<  ThemeMode,  &#123;    preview: React.ReactElement    name: string    token: Partial<GlobalToken>  &#125;>export const presetRadius: ThemeSetting['borderRadius'][] = [2, 4, 6]export const presetColors: ThemeSetting['colorPrimary'][] = [  '#9373ee',  '#1677ff',  '#5f80e9',  '#587df1',  '#9a7d56',  '#039e74',  '#e86ca4',  '#fd6874',  '#8e8374',]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3）ThemeStorage-ts：主题存储和恢复LocalStorage"><a href="#3）ThemeStorage-ts：主题存储和恢复LocalStorage" class="headerlink" title="3）ThemeStorage.ts：主题存储和恢复LocalStorage"></a>3）ThemeStorage.ts：主题存储和恢复LocalStorage</h4><pre class="line-numbers language-tsx"><code class="language-tsx">import &#123; defaultThemeSetting &#125; from './PresetTheme'import type &#123; ThemeSetting &#125; from './ThemeSettings'// 定义一个函数，用于将新的主题设置存储到 LocalStorage中// 参数 autoSaveId 是一个字符串，用于作为 LocalStorage 的键// 参数 newThemeSetting 是新的主题设置，类型为 ThemeSettingexport const storeThemeSetting = (autoSaveId: string, newThemeSetting: ThemeSetting): void => &#123;  // 将 newThemeSetting 对象转换为 JSON 字符串，并存储到 LocalStorage 中，键为 autoSaveId  window.localStorage.setItem(autoSaveId, JSON.stringify(newThemeSetting))&#125;// 定义一个函数，用于从 LocalStorage中恢复主题设置// 参数 autoSaveId 是一个可选的字符串，用于作为 LocalStorage 的键// 返回值类型为 ThemeSettingexport const restoreThemeSetting = (autoSaveId: string | undefined): ThemeSetting => &#123;  // 检查 autoSaveId 是否有值  if (autoSaveId) &#123;    // 从 LocalStorage 中获取与 autoSaveId 相关联的存储项    const storage = window.localStorage.getItem(autoSaveId)    // 检查存储项是否存在    if (storage) &#123;      // 如果存在，将 JSON 字符串转换回 ThemeSetting 对象并返回      return JSON.parse(storage) as ThemeSetting    &#125;  &#125;  // 如果 autoSaveId 没有值或存储项不存在，返回默认主题设置  return defaultThemeSetting&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4）ThemePicker-tsx：展示可选主题"><a href="#4）ThemePicker-tsx：展示可选主题" class="headerlink" title="4）ThemePicker.tsx：展示可选主题"></a>4）ThemePicker.tsx：展示可选主题</h4><pre class="line-numbers language-tsx"><code class="language-tsx">import &#123; Space, theme &#125; from 'antd'import &#123; presetThemes &#125; from './PresetTheme'// 定义 ThemePickerProps 接口，用于描述 ThemePicker 组件的属性interface ThemePickerProps &#123;  value?: string    // 当前选中的主题名称  onChange?: (value: ThemePickerProps['value']) => void   // 主题变化时的回调函数&#125;// 定义 ThemePicker 组件，用于展示和选择主题export function ThemePicker(props: ThemePickerProps) &#123;  // 使用 Ant Design 的 useToken Hook 获取当前的主题 token  const &#123; token &#125; = theme.useToken()  // 从 props 中解构获取当前选中的主题和变化回调  const &#123; value, onChange &#125; = props  return (    // 使用 Space 组件进行布局，设置间距为 token.paddingLG    <Space wrap size=&#123;token.paddingLG&#125;>      &#123;/* 遍历预设主题数据，生成每个主题的预览和名称 */&#125;      &#123;Object.entries(presetThemes).map(([themeName, &#123; preview, name &#125;]) => &#123;        // 判断当前遍历的主题是否是选中的主题        const matched = themeName === value        return (          // 每个主题预览的容器，设置样式和点击事件          <Space            key=&#123;themeName&#125; // 使用主题名称作为 key            align="center"  // 垂直对齐方式            className=&#123;matched ? 'cursor-default' : 'cursor-pointer'&#125; // 根据是否匹配设置光标样式            direction="vertical"  // 垂直方向排列            onClick=&#123;() => &#123;              // 点击时调用 onChange 回调函数，传递当前主题名称              onChange?.(themeName)            &#125;&#125;          >            &#123;/* 主题预览的显示区域 */&#125;            <div              className="h-[80px] w-[120px] overflow-hidden"              style=&#123;&#123;                borderRadius: token.borderRadiusLG, // 设置边框圆角                boxShadow: matched                  ? `0 0 0 2px $&#123;token.colorBgContainer&#125;, 0 0 0 5px $&#123;token.colorPrimary&#125;`  // 选中的主题显示阴影效果                  : 'none', // 未选中的主题无阴影              &#125;&#125;            >              &#123;preview&#125; &#123;/* 主题的预览内容 */&#125;            </div>            <span>&#123;name&#125;</span> &#123;/* 主题的名称 */&#125;          </Space>        )      &#125;)&#125;    </Space>  )&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5）ThemeColorPicker-tsx：展示可选主题颜色"><a href="#5）ThemeColorPicker-tsx：展示可选主题颜色" class="headerlink" title="5）ThemeColorPicker.tsx：展示可选主题颜色"></a>5）ThemeColorPicker.tsx：展示可选主题颜色</h4><pre class="line-numbers language-tsx"><code class="language-tsx">import &#123; Space, theme &#125; from 'antd'import &#123; presetColors &#125; from './PresetTheme'import &#123; useThemeContext &#125; from '../../contexts/ThemeContext'import type &#123; ThemeSetting &#125; from './ThemeSettings'// 定义 ThemeColorPickerProps 接口，用于描述 ThemeColorPicker 组件的属性interface ThemeColorPickerProps &#123;  value?: ThemeSetting['colorPrimary']  onChange?: (value: ThemeColorPickerProps['value']) => void&#125;// 定义 ThemeColorPicker 组件，用于展示和选择主题颜色export function ThemeColorPicker(props: ThemeColorPickerProps) &#123;  const &#123; token &#125; = theme.useToken()  // 从 props 中解构获取当前选中的颜色和变化回调  const &#123; value, onChange &#125; = props  // 使用自定义 Hook 获取主题上下文  const &#123; themeSetting &#125; = useThemeContext()  const &#123; themeMode &#125; = themeSetting  // 判断当前主题是否为默认主题（亮色模式或暗色模式）  const isDefaultTheme = themeMode === 'lightDefault' || themeMode === 'darkDefault'  return (    // 使用 Space 组件进行布局，设置内边距和间距    <Space wrap className="pl-2 pt-[6px]" size=&#123;token.paddingLG&#125;>      &#123;/* 遍历预设颜色数据，生成每个颜色的选择项 */&#125;      &#123;presetColors.map((color) => &#123;        // 判断当前遍历的颜色是否是选中的颜色，并且是否是默认主题        const matched = isDefaultTheme && color === value        return (          // 颜色选择项的容器，设置样式和点击事件          <span            key=&#123;color&#125; // 使用颜色作为 key            className=&#123;`inline-block size-5 items-center rounded-full $&#123;matched ? 'cursor-default' : 'cursor-pointer' // 根据是否匹配设置光标样式              &#125;`&#125;            style=&#123;&#123;              opacity: isDefaultTheme ? 1 : 0.5,  // 根据是否是默认主题设置透明度              pointerEvents: isDefaultTheme ? 'auto' : 'none',  // 根据是否是默认主题设置指针事件              backgroundColor: color,              boxShadow: matched                ? `0 0 0 1px $&#123;token.colorBgContainer&#125;, 0px 0px 0px 5px $&#123;color&#125;` // 选中的颜色显示阴影效果                : 'none', // 未选中的颜色无阴影            &#125;&#125;            // 点击时调用 onChange 回调函数，传递当前颜色            onClick=&#123;() => onChange?.(color)&#125;          />        )      &#125;)&#125;    </Space>  )&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6）ThemeRadiusPicker-tsx：展示可选主题圆角"><a href="#6）ThemeRadiusPicker-tsx：展示可选主题圆角" class="headerlink" title="6）ThemeRadiusPicker.tsx：展示可选主题圆角"></a>6）ThemeRadiusPicker.tsx：展示可选主题圆角</h4><pre class="line-numbers language-tsx"><code class="language-tsx">import &#123; Space, theme &#125; from 'antd'import &#123; presetRadius &#125; from './PresetTheme'import type &#123; ThemeSetting &#125; from './ThemeSettings'// 定义 ThemeRadiusPickerProps 接口，用于描述 ThemeRadiusPicker 组件的属性interface ThemeRadiusPickerProps &#123;  value?: ThemeSetting['borderRadius']  onChange?: (value: ThemeRadiusPickerProps['value']) => void&#125;// 定义 ThemeRadiusPicker 组件，用于展示和选择主题的边框半径export function ThemeRadiusPicker(props: ThemeRadiusPickerProps) &#123;  const &#123; token &#125; = theme.useToken()  // 从 props 中解构获取当前选中的边框半径和变化回调  const &#123; value, onChange &#125; = props  return (    <Space wrap size=&#123;token.paddingLG&#125;>      &#123;/* 遍历预设边框半径数据，生成每个半径的选择项 */&#125;      &#123;presetRadius.map((radius) => &#123;        // 判断当前遍历的边框半径是否是选中的边框半径        const matched = radius === value        return (          // 边框半径选择项的容器，设置样式和点击事件          <span            key=&#123;`$&#123;radius&#125;`&#125; // 使用边框半径作为 key            className=&#123;`relative inline-block size-12 overflow-hidden $&#123;matched ? 'cursor-default' : 'cursor-pointer'              &#125;`&#125; // 根据是否匹配设置光标样式            style=&#123;&#123;              backgroundColor: matched ? token.colorPrimaryBg : token.colorBgLayout,  // 设置背景颜色              borderRadius: token.borderRadius, // 设置容器的边框圆角            &#125;&#125;            // 点击时调用 onChange 回调函数，传递当前边框半径            onClick=&#123;() => onChange?.(radius)&#125;          >            &#123;/* 边框半径的实际展示 */&#125;            <span              className="absolute left-1/2 top-1/2 inline-block size-full scale-125"  // 设置绝对定位和缩放              style=&#123;&#123;                borderRadius: radius, // 设置边框半径                border: `2px solid $&#123;matched ? token.colorPrimaryBorderHover : token.colorBorder&#125;`, // 设置边框样式              &#125;&#125;            />          </span>        )      &#125;)&#125;    </Space>  )&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7）ThemeEditor-tsx：主题编辑器"><a href="#7）ThemeEditor-tsx：主题编辑器" class="headerlink" title="7）ThemeEditor.tsx：主题编辑器"></a>7）ThemeEditor.tsx：主题编辑器</h4><pre class="line-numbers language-tsx"><code class="language-tsx">import &#123; useEffect &#125; from 'react'import &#123; Form, Radio, theme &#125; from 'antd'import type &#123; ThemeSetting &#125; from './ThemeSettings'import &#123; defaultThemeSetting &#125; from './PresetTheme'import &#123; storeThemeSetting &#125; from './ThemeStorage'import &#123; ThemePicker &#125; from './ThemePicker'import &#123; ThemeColorPicker &#125; from './ThemeColorPicker'import &#123; ThemeRadiusPicker &#125; from './ThemeRadiusPicker'// 定义 ThemeEditorProps 接口，用于描述 ThemeEditor 组件的属性interface ThemeEditorProps &#123;  value?: ThemeSetting  // 当前的主题设置  onChange?: (value: ThemeEditorProps['value']) => void   // 主题设置变化时的回调函数  autoSaveId?: string   // 自动保存的标识符&#125;/** * 主题编辑器 */// 定义 ThemeEditor 组件：用于编辑和管理主题模式、主色、边框圆角和页面空间类型export function ThemeEditor(props: ThemeEditorProps) &#123;  const &#123; token &#125; = theme.useToken()  // 获取当前的边框圆角设置  const &#123; borderRadius &#125; = token  // 从 props 中解构获取当前的主题设置、变化回调和自动保存标识符  const &#123; value, onChange, autoSaveId &#125; = props  // 使用 Ant Design 的 Form Hook 创建一个表单实例  const [form] = Form.useForm<ThemeSetting>()  // useEffect Hook 用于同步主题设置和自动保存  useEffect(() => &#123;    // 合并默认主题设置、当前设置和边框圆角    const newThemeSetting = &#123; ...defaultThemeSetting, ...value, borderRadius &#125;    // 设置表单字段的初始值    form.setFieldsValue(newThemeSetting)    // 如果提供了 autoSaveId，则自动保存主题设置    if (autoSaveId) &#123;      storeThemeSetting(autoSaveId, newThemeSetting)    &#125;  &#125;, [form, value, borderRadius, autoSaveId]) // 当 form、value、borderRadius 或 autoSaveId 变化时触发  return (    <div>      <Form        form=&#123;form&#125;   // 将创建的表单实例传递给 Form 组件        initialValues=&#123;value&#125;   // 设置表单的初始值        labelCol=&#123;&#123; span: 3 &#125;&#125;  // 标签列的宽度        wrapperCol=&#123;&#123; offset: 1, span: 20 &#125;&#125;    // 内容列的偏移量和宽度        onValuesChange=&#123;(_, newThemeSetting) => &#123;          // 当表单值变化时，调用 onChange 回调函数          onChange?.(newThemeSetting)        &#125;&#125;      >        &#123;/* 主题选择 */&#125;        <Form.Item label="主题" name="themeMode">          <ThemePicker />        </Form.Item>        &#123;/* 主色选择 */&#125;        <Form.Item label="主色" name="colorPrimary">          <ThemeColorPicker />        </Form.Item>        &#123;/* 圆角选择 */&#125;        <Form.Item label="圆角" name="borderRadius">          <ThemeRadiusPicker />        </Form.Item>        &#123;/* 页面空间选择 */&#125;        <Form.Item label="页面空间" name="spaceType">          <Radio.Group>            <Radio value="default">适中</Radio>            <Radio value="compact">紧凑</Radio>          </Radio.Group>        </Form.Item>      </Form>    </div>  )&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="index-tsx：主入口文件"><a href="#index-tsx：主入口文件" class="headerlink" title="index.tsx：主入口文件"></a>index.tsx：主入口文件</h4><pre class="line-numbers language-tsx"><code class="language-tsx">'use client'export type &#123; ThemeSetting &#125; from './ThemeSettings'export &#123; ThemeProvider, ThemeProviderClient, useThemeContext &#125; from '../../contexts/ThemeContext'export &#123; ThemeEditor &#125; from './ThemeEditor'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、Icons：图标"><a href="#2、Icons：图标" class="headerlink" title="2、Icons：图标"></a>2、Icons：图标</h3><h4 id="1）LogoIcon-tsx：Logo图片"><a href="#1）LogoIcon-tsx：Logo图片" class="headerlink" title="1）LogoIcon.tsx：Logo图片"></a>1）LogoIcon.tsx：Logo图片</h4><pre class="line-numbers language-tsx"><code class="language-tsx">import &#123; theme &#125; from 'antd'export function LogoIcon() &#123;  const &#123; token &#125; = theme.useToken() // 获取主题token  const primaryColor = token.colorPrimary  return (    <svg fill="none" version="1.1" viewBox="0 0 450 450" xmlns="http://www.w3.org/2000/svg">      <defs></defs>      <g>        <path          d="M 132.5,24.5 C 195.501,24.3333 258.501,24.5 321.5,25C 370.923,31.1109 405.423,56.9443 425,102.5C 428.922,112.853 431.588,123.52 433,134.5C 433.964,199.187 433.63,263.853 432,328.5C 422.85,378.98 394.017,412.48 345.5,429C 335.349,431.784 325.016,433.45 314.5,434C 255.167,434.667 195.833,434.667 136.5,434C 84.2967,427.331 48.7967,399.498 30,350.5C 26.7153,340.076 24.7153,329.41 24,318.5C 23.3333,257.167 23.3333,195.833 24,134.5C 34.5701,72.4307 70.7368,35.764 132.5,24.5 Z"          fill=&#123;primaryColor&#125;        />        <path          d="M 364.5,220.5 C 364.5,264.833 364.5,309.167 364.5,353.5C 344.167,353.5 323.833,353.5 303.5,353.5C 303.667,312.832 303.5,272.165 303,231.5C 297.133,198.3 277.967,177.133 245.5,168C 205.779,162.108 176.946,176.942 159,212.5C 156.953,219.066 155.287,225.733 154,232.5C 153.5,272.832 153.333,313.165 153.5,353.5C 133.167,353.5 112.833,353.5 92.5,353.5C 92.5,309.167 92.5,264.833 92.5,220.5C 97.2032,175.904 118.87,142.404 157.5,120C 187.19,105.275 218.523,100.275 251.5,105C 305.484,113.324 341.651,143.158 360,194.5C 362.663,202.973 364.163,211.639 364.5,220.5 Z"          fill="#fdfdfe"        />        <path          d="M 166.5,241.5 C 207.833,240.167 249.167,240.167 290.5,241.5C 289.503,260.659 289.17,279.993 289.5,299.5C 248.833,299.5 208.167,299.5 167.5,299.5C 167.83,279.993 167.497,260.659 166.5,241.5 Z"          fill="#fdfdfe"        />      </g>    </svg>  )&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、Modals：弹窗组件"><a href="#3、Modals：弹窗组件" class="headerlink" title="3、Modals：弹窗组件"></a>3、Modals：弹窗组件</h3><h4 id="1）"><a href="#1）" class="headerlink" title="1）"></a>1）</h4><pre class="line-numbers language-tsx"><code class="language-tsx"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、HeaderNav：顶部栏位"><a href="#4、HeaderNav：顶部栏位" class="headerlink" title="4、HeaderNav：顶部栏位"></a>4、HeaderNav：顶部栏位</h3><h4 id="1）HeaderNav-tsx：顶部组件"><a href="#1）HeaderNav-tsx：顶部组件" class="headerlink" title="1）HeaderNav.tsx：顶部组件"></a>1）HeaderNav.tsx：顶部组件</h4><pre class="line-numbers language-tsx"><code class="language-tsx">// 导入 nice-modal-react 的 show 函数，用于展示模态框。import &#123; show &#125; from '@ebay/nice-modal-react'// 导入 Lucide图标import &#123; Github, InfoIcon, SettingsIcon &#125; from 'lucide-react'// 导入 Ant Design 的 Button 和 Dropdown 组件，以及 Space 组件用于布局import &#123; Button, Dropdown, Space, theme &#125; from 'antd'import &#123; LogoIcon &#125; from '../Icons/LogoIcon'import FullScreen from './FullScreen'import &#123; ModalSettings, SettingsMenuKey &#125; from './ModalSettings'// 定义一个枚举 MenuKey，用于区分 Dropdown 菜单项。const enum MenuKey &#123;  About = '0',  Repo = '1',&#125;// 定义 HeaderNav 函数组件。export function HeaderNav() &#123;  // 返回一个 div，包含 header 导航条的内容。  return (    <div className="flex h-full items-center">      &#123;/* 使用 flex 布局将内容居中对齐。 */&#125;      <div className="ml-auto">        &#123;/* 使用 Space 组件来组织按钮和下拉菜单。 */&#125;        <Space>          <FullScreen />          &#123;/* 渲染设置按钮，点击时显示 ModalSettings 模态框。 */&#125;          <Button            icon=&#123;<SettingsIcon size=&#123;18&#125; />&#125;            type="text"            onClick=&#123;() => &#123;              // 当点击按钮时，显示 ModalSettings 模态框。              void show(ModalSettings)            &#125;&#125;          />          &#123;/* 渲染一个带有下拉菜单的按钮。 */&#125;          <Dropdown            menu=&#123;&#123;              // 定义下拉菜单项。              items: [                &#123;                  // 关于项目菜单项。                  key: MenuKey.About,                  label: '关于项目',                  icon: <InfoIcon size=&#123;16&#125; />,                &#125;,                &#123;                  // 源码仓库菜单项。                  key: MenuKey.Repo,                  label: '源码仓库',                  icon: <Github size=&#123;16&#125; />,                &#125;,              ],              // 当点击菜单项时触发的回调函数。              onClick: (&#123; key &#125;) => &#123;                switch (key) &#123;                  case MenuKey.About:                    // 显示 ModalSettings 模态框，并设置选中的菜单项为关于项目。                    void show(ModalSettings, &#123; selectedKey: SettingsMenuKey.About &#125;)                    break                  case MenuKey.Repo:                    // 打开 GitHub 仓库链接在一个新的标签页中。                    window.open('https://github.com/TestCabana', '_blank')                    break                &#125;              &#125;,            &#125;&#125;          >            &#123;/* 渲染带有 LogoIcon 的按钮。 */&#125;            <Button              icon=&#123;                <div className="inline-flex size-8 items-center justify-center">                  <LogoIcon />                </div>              &#125;              type="text"            />          </Dropdown>        </Space>      </div>    </div>  )&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2）FullScreen-tsx：全屏组件"><a href="#2）FullScreen-tsx：全屏组件" class="headerlink" title="2）FullScreen.tsx：全屏组件"></a>2）FullScreen.tsx：全屏组件</h4><pre class="line-numbers language-tsx"><code class="language-tsx">// 安装包：npm install ahooksimport &#123; Button, Tooltip &#125; from 'antd';import &#123; useFullscreen &#125; from 'ahooks';import &#123; Maximize, Minimize &#125; from 'lucide-react';export default function FullScreen() &#123;  const [isFullscreen, &#123; enterFullscreen, exitFullscreen &#125;] = useFullscreen(() => document.body);  return (    <>      &#123;isFullscreen ? (        <Tooltip title="退出全屏">          <Button            icon=&#123;<Minimize size=&#123;18&#125; />&#125;            type="text"            onClick=&#123;exitFullscreen&#125;          />        </Tooltip>      ) : (        <Tooltip title="全屏">          <Button            icon=&#123;<Maximize size=&#123;18&#125; />&#125;            type="text"            onClick=&#123;enterFullscreen&#125;          />        </Tooltip>      )&#125;    </>  );&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3）ModalSettings-tsx：顶部设置弹窗"><a href="#3）ModalSettings-tsx：顶部设置弹窗" class="headerlink" title="3）ModalSettings.tsx：顶部设置弹窗"></a>3）ModalSettings.tsx：顶部设置弹窗</h4><pre class="line-numbers language-tsx"><code class="language-tsx">import &#123; useEffect, useMemo, useState &#125; from 'react'// 导入NiceModal库的create和useModal Hook用于管理模态框import &#123; create, useModal &#125; from '@ebay/nice-modal-react'import &#123; ConfigProvider, Menu, type MenuProps, Modal, type ModalProps, theme &#125; from 'antd'import &#123; InfoIcon, ShirtIcon &#125; from 'lucide-react'import &#123; ThemeEditor, useThemeContext &#125; from '@/components/ThemeEditor'// 定义设置菜单的键值枚举export const enum SettingsMenuKey &#123;  Appearance = '0',  About = '1',&#125;// 设置菜单项的数据数组const settingMenuItems = [  &#123;    key: SettingsMenuKey.Appearance,    icon: <ShirtIcon size=&#123;16&#125; />,    label: '外观',  &#125;,  &#123;    key: SettingsMenuKey.About,    icon: <InfoIcon size=&#123;16&#125; />,    label: '关于此项目',  &#125;,] satisfies MenuProps['items']  // 满足Ant Design Menu组件的items属性类型function ThemeEditorWrapper() &#123;  const &#123; themeSetting, setThemeSetting, autoSaveId &#125; = useThemeContext() // 从上下文中获取主题设置相关数据  // 返回主题编辑器组件  return (    <ThemeEditor      autoSaveId=&#123;autoSaveId&#125;      value=&#123;themeSetting&#125;      onChange=&#123;(value) => &#123;        if (value) &#123;          setThemeSetting(value)  // 当值改变时更新主题设置        &#125;      &#125;&#125;    />  )&#125;// 渲染菜单内容的函数const renderMenuContent = (props: &#123; menuKey: SettingsMenuKey &#125;) => &#123;  switch (props.menuKey) &#123;    // 根据传入的菜单键值来决定渲染的内容    case SettingsMenuKey.Appearance:      return <ThemeEditorWrapper />    // case SettingsMenuKey.About:    //   return (    //     <Viewer    //       value=&#123;`## 介绍\n\n这是一个精心仿制 Apifox 界面的纯前端项目，使用 Next + Antd + TypeScript + TailwindCSS 开发，源码融入了很多好的编码实践，能让你学习到如何组织和建设一个复杂的 React 项目，非常适合 React 新手学习！\n\n## 动机\n\n在日常工作中，我经常会使用 Antd 来构建页面，但大多数页面的结构和交互都是比较简单的。为了精进对 Next + Antd 的使用技巧，我选择了 Apifox 这个相对复杂的界面进行模仿，希望在实践中能够掌握使用 Antd 打造出高级的页面效果。\n\n可能有很多小伙伴也抱有类似的学习动机，所以我将代码开源出来，希望能帮助各位，感兴趣的话不妨到点个 star⭐ 收藏一下噢~`&#125;    //     />    //   )  &#125;&#125;// 定义模态框设置的属性接口interface ModalSettingsProps extends Omit<ModalProps, 'open' | 'footer'> &#123;  defaultSelectedKey?: SettingsMenuKey  // 默认选中的菜单键值  selectedKey?: SettingsMenuKey   // 当前选中的菜单键值&#125;// 创建模态框设置组件export const ModalSettings = create((props: ModalSettingsProps) => &#123;  const &#123; token &#125; = theme.useToken()  // 解构属性  const &#123; selectedKey, defaultSelectedKey, ...restModalProps &#125; = props  // 状态，用于存储当前选中的菜单键值  const modal = useModal()  // 选中的菜单键值状态  const [selectedKeys, setSelectedKeys] = useState<[SettingsMenuKey]>()  // 当选中键值或默认选中键值改变时更新状态  useEffect(() => &#123;    if (selectedKey) &#123;      setSelectedKeys([selectedKey])    &#125; else &#123;      setSelectedKeys([defaultSelectedKey || SettingsMenuKey.Appearance])    &#125;  &#125;, [selectedKey, defaultSelectedKey])  // 使用Memo缓存选中的菜单项  const selectedMenuItem = useMemo(() => &#123;    return settingMenuItems.find((item) => item.key === selectedKeys?.at(0))  &#125;, [selectedKeys])  // 获取要渲染的菜单键值  const renderMenuKey = selectedKeys?.at(0)  // 返回配置后的模态框组件  return (    <ConfigProvider      theme=&#123;&#123;        components: &#123;          Modal: &#123;            paddingMD: 0,            paddingContentHorizontalLG: 0,          &#125;,        &#125;,      &#125;&#125;    >      <Modal        width=&#123;950&#125;        &#123;...restModalProps&#125;        footer=&#123;false&#125;        open=&#123;modal.visible&#125;        onCancel=&#123;(...parmas) => &#123;          props.onCancel?.(...parmas)   // 触发父组件的onCancel回调          void modal.hide()   // 隐藏模态框        &#125;&#125;      >        <div className="flex">          <div            className="w-64"            style=&#123;&#123;              padding: `$&#123;token.paddingMD&#125;px 0`,              backgroundColor: token.colorFillQuaternary,            &#125;&#125;          >            <div              className="text-lg"              style=&#123;&#123;                padding: `0 $&#123;token.paddingMD&#125;px $&#123;token.paddingMD&#125;px $&#123;token.paddingMD&#125;px`,              &#125;&#125;            >              设置            </div>            <div style=&#123;&#123; padding: `0 $&#123;token.paddingMD&#125;px` &#125;&#125;>              <ConfigProvider                theme=&#123;&#123;                  components: &#123;                    Menu: &#123;                      colorBgContainer: 'transparent',                      itemHoverBg: 'transparent',                      itemHoverColor: token.colorPrimary,                      itemBorderRadius: token.borderRadiusSM,                    &#125;,                  &#125;,                &#125;&#125;              >                <Menu                  className="!border-none"                  items=&#123;settingMenuItems&#125;                  selectedKeys=&#123;selectedKeys&#125;                  onClick=&#123;(&#123; key &#125;) => &#123;                    setSelectedKeys([key as SettingsMenuKey])   // 当点击菜单项时更新选中状态                  &#125;&#125;                />              </ConfigProvider>            </div>          </div>          <div className="flex-1" style=&#123;&#123; padding: `$&#123;token.paddingMD&#125;px` &#125;&#125;>            <div className="text-lg" style=&#123;&#123; padding: `0 0 $&#123;token.paddingMD&#125;px 0` &#125;&#125;>              &#123;selectedMenuItem?.label&#125;            </div>            &#123;!!renderMenuKey && renderMenuContent(&#123; menuKey: renderMenuKey &#125;)&#125;          </div>        </div>      </Modal>    </ConfigProvider>  )&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、SideNav：侧边栏菜单"><a href="#5、SideNav：侧边栏菜单" class="headerlink" title="5、SideNav：侧边栏菜单"></a>5、SideNav：侧边栏菜单</h3><h4 id="1）NavMenu-tsx：菜单组件"><a href="#1）NavMenu-tsx：菜单组件" class="headerlink" title="1）NavMenu.tsx：菜单组件"></a>1）NavMenu.tsx：菜单组件</h4><pre class="line-numbers language-tsx"><code class="language-tsx">import Link from 'next/link'  // 导入 Next.js 的 Link 组件，用于导航import &#123; usePathname &#125; from 'next/navigation'   // 导入 usePathname 钩子，用于获取当前路径import &#123; Space &#125; from 'antd' // 导入 Space 组件，用于在垂直方向上排列导航项import &#123; useStyles &#125; from '@/hooks/useStyle' // 导入自定义钩子 useStyles，用于样式管理import &#123; css &#125; from '@emotion/css' // 从 emotion/css 导入 css 函数，用于定义样式// 定义 NavItemProps 接口，描述 NavItem 组件的属性interface NavItemProps &#123;  active?: boolean // 可选，表示导航项是否处于激活状态  name: string // 导航项的名称  icon: React.ReactNode // 导航项的图标&#125;// 定义 NavItem 组件function NavItem(props: NavItemProps) &#123;  const &#123; active, name, icon &#125; = props // 解构 props  // 使用自定义样式钩子定义样式  const &#123; styles &#125; = useStyles((&#123; token &#125;) => &#123;    return &#123;      item: css(&#123;        color: active ? token.colorPrimary : token.colorTextSecondary, // 根据是否激活设置文字颜色        '&:hover': &#123;          backgroundColor: token.colorFillTertiary, // 设置悬停时的背景颜色        &#125;,        // 当前激活项的背景色        ...(active && &#123;          backgroundColor: token.colorBgTextHover,        &#125;),      &#125;),    &#125;  &#125;)  // 返回导航项的 JSX 结构  return (    <div      className=&#123;`flex items-center rounded-md px-4 py-3 $&#123;styles.item&#125; w-full`&#125;    >      <div className="flex mr-3">&#123;icon&#125;</div>      <span className="text-sm font-semibold">&#123;name&#125;</span>    </div>  )&#125;// 定义导航路径的枚举const enum NavPath &#123;  dashboard = '/dashboard', // 工作台  projectManagement = '/project-management', // 项目管理  knowledgeBase = '/knowledge-base', // 知识库  testPlan = '/test-plan', // 测试计划  caseManagement = '/case-management', // 用例管理  bugManagement = '/bug-management', // bug管理  apiTest = '/api-test', // 接口测试  apiAuto = '/api-auto', // api自动化  webAuto = '/web-auto', // web自动化  systemSetting = '/system-settings', // 系统设置&#125;// 定义导航菜单组件export function NavMenu() &#123;  const pathname = usePathname() // 获取当前路径名  // 返回导航菜单的 JSX 结构  return (    <Space direction="vertical" size=&#123;3&#125;> &#123;/* 垂直排列导航项，间距为 3 */&#125;      &#123;/* 工作台 */&#125;      <Link href=&#123;NavPath.dashboard&#125; className="block w-full">        <NavItem          name="工作台"          active=&#123;pathname === NavPath.dashboard&#125; // 判断是否激活          icon=&#123;            <svg              aria-hidden="true"              className="size-5 justify-center"              fill="none" stroke="currentColor"              strokeWidth="2"              viewBox="0 0 24 24"              xmlns="http://www.w3.org/2000/svg"            >              <path                d="M4 5a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v5a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1zm10 0a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1zM4 16a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1zm10-3a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1z" />            </svg>          &#125;        />      </Link>      &#123;/* 知识库 */&#125;      <Link href=&#123;NavPath.knowledgeBase&#125;>        <NavItem          name="知识库"          active=&#123;pathname === NavPath.knowledgeBase&#125; // 判断是否激活          icon=&#123; /* 首页图标的 SVG 代码 */            <svg              aria-hidden="true"              className="size-5"              fill="currentColor"              viewBox="0 0 24 24"              xmlns="http://www.w3.org/2000/svg"            >              <path                d="M21 3H3a2 2 0 0 0-2 2v3h2V5h18v14h-7v2h7a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2M1 18v3h3a3 3 0 0 0-3-3m0-4v2a5 5 0 0 1 5 5h2a7 7 0 0 0-7-7m0-4v2a9 9 0 0 1 9 9h2c0-6.08-4.93-11-11-11m10 1.09v2L14.5 15l3.5-1.91v-2L14.5 13zM14.5 6L9 9l5.5 3L20 9z" />            </svg>          &#125;        />      </Link>      &#123;/* 项目管理 */&#125;      <Link href=&#123;NavPath.projectManagement&#125;>        <NavItem          name="项目管理"          active=&#123;pathname === NavPath.projectManagement&#125; // 判断是否激活          icon=&#123; /* 首页图标的 SVG 代码 */            <svg              aria-hidden="true"              className="size-5"              fill="currentColor"              viewBox="0 0 24 24"              xmlns="http://www.w3.org/2000/svg"            >              <path                clipRule="evenodd"                d="M20 10H4v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8ZM9 13v-1h6v1c0 .6-.4 1-1 1h-4a1 1 0 0 1-1-1Z"                fillRule="evenodd"              />              <path d="M2 6c0-1.1.9-2 2-2h16a2 2 0 1 1 0 4H4a2 2 0 0 1-2-2Z" />            </svg>          &#125;        />      </Link>      &#123;/* 测试计划 */&#125;      <Link href=&#123;NavPath.testPlan&#125;>        <NavItem          name="测试计划"          active=&#123;pathname === NavPath.testPlan&#125; // 判断是否激活          icon=&#123; /* 首页图标的 SVG 代码 */            <svg              aria-hidden="true"              className="size-5"              fill="currentColor"              viewBox="0 0 512 512"              xmlns="http://www.w3.org/2000/svg"            >              <path                d="M139.61 35.5a12 12 0 0 0-17 0L58.93 98.81l-22.7-22.12a12 12 0 0 0-17 0L3.53 92.41a12 12 0 0 0 0 17l47.59 47.4a12.78 12.78 0 0 0 17.61 0l15.59-15.62L156.52 69a12.09 12.09 0 0 0 .09-17zm0 159.19a12 12 0 0 0-17 0l-63.68 63.72l-22.7-22.1a12 12 0 0 0-17 0L3.53 252a12 12 0 0 0 0 17L51 316.5a12.77 12.77 0 0 0 17.6 0l15.7-15.69l72.2-72.22a12 12 0 0 0 .09-16.9zM64 368c-26.49 0-48.59 21.5-48.59 48S37.53 464 64 464a48 48 0 0 0 0-96m432 16H208a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h288a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16m0-320H208a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h288a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16m0 160H208a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h288a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16" />            </svg>          &#125;        />      </Link>      &#123;/* 测试用例 */&#125;      <Link href=&#123;NavPath.caseManagement&#125;>        <NavItem          name="测试用例"          active=&#123;pathname === NavPath.caseManagement&#125; // 判断是否激活          icon=&#123; /* 首页图标的 SVG 代码 */            <svg              aria-hidden="true"              className="size-5"              fill="currentColor"              viewBox="0 0 512 512"              xmlns="http://www.w3.org/2000/svg"            >              <path                d="M464 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48m-6 400H54a6 6 0 0 1-6-6V86a6 6 0 0 1 6-6h404a6 6 0 0 1 6 6v340a6 6 0 0 1-6 6m-42-92v24c0 6.627-5.373 12-12 12H204c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h200c6.627 0 12 5.373 12 12m0-96v24c0 6.627-5.373 12-12 12H204c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h200c6.627 0 12 5.373 12 12m0-96v24c0 6.627-5.373 12-12 12H204c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h200c6.627 0 12 5.373 12 12m-252 12c0 19.882-16.118 36-36 36s-36-16.118-36-36s16.118-36 36-36s36 16.118 36 36m0 96c0 19.882-16.118 36-36 36s-36-16.118-36-36s16.118-36 36-36s36 16.118 36 36m0 96c0 19.882-16.118 36-36 36s-36-16.118-36-36s16.118-36 36-36s36 16.118 36 36" />            </svg>          &#125;        />      </Link>      &#123;/* 缺陷管理 */&#125;      <Link href=&#123;NavPath.bugManagement&#125;>        <NavItem          name="缺陷管理"          active=&#123;pathname === NavPath.bugManagement&#125; // 判断是否激活          icon=&#123; /* 首页图标的 SVG 代码 */            <svg              aria-hidden="true"              className="size-5"              fill="none"              stroke="currentColor"              strokeWidth="2"              viewBox="0 0 24 24"              xmlns="http://www.w3.org/2000/svg"            >              <path                d="M23 20c-1.38-2.09-3-3-4-3M5 17c-1 0-2.62.91-4 3M19 9c3 0 4-3 4-3M1 6s1 3 4 3m14 4h5zM5 13H0zm7 10V12zm0 0c-4 0-7-3-7-7V9s3-2.012 7-2s7 2 7 2v7c0 4-3 7-7 7ZM7 8V6c0-2.76 2.24-5 5-5s5 2.24 5 5v2" />            </svg>          &#125;        />      </Link>      &#123;/* 接口测试 */&#125;      <Link href=&#123;NavPath.apiTest&#125;>        <NavItem          name="接口测试"          active=&#123;pathname === NavPath.apiTest&#125; // 判断是否激活          icon=&#123; /* 首页图标的 SVG 代码 */            <svg              aria-hidden="true"              className="size-5"              viewBox="0 0 24 24"              xmlns="http://www.w3.org/2000/svg"            >              <path fill="none" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2"                d="M17.854 12.16c-.383.45-1.09.454-1.537.007l-4.484-4.483c-.447-.447-.444-1.155.007-1.538l1.231-1.047a6.5 6.5 0 0 1 3.133-1.448l.725-.122c.685-.116 1.405.123 1.919.637l.986.987c.514.513.753 1.233.637 1.918l-.122.725a6.5 6.5 0 0 1-1.448 3.133zM19.5 4.5l2-2m-19 19l2-2m1.646-7.66c.383-.45 1.09-.454 1.538-.007l4.483 4.484c.447.446.444 1.154-.007 1.537l-1.231 1.047a6.5 6.5 0 0 1-3.133 1.448l-.725.122c-.685.116-1.405-.123-1.918-.637l-.987-.986c-.514-.514-.753-1.234-.637-1.919l.122-.725a6.5 6.5 0 0 1 1.448-3.133zm2.354.66l2-2m1 5l2-2" color="currentColor" />            </svg>          &#125;        />      </Link>      &#123;/* 接口自动化 */&#125;      <Link href=&#123;NavPath.apiAuto&#125;>        <NavItem          name="接口自动化"          active=&#123;pathname === NavPath.apiAuto&#125; // 判断是否激活          icon=&#123; /* 首页图标的 SVG 代码 */            <svg              aria-hidden="true"              className="size-5"              fill="currentColor"              viewBox="0 0 24 24"              xmlns="http://www.w3.org/2000/svg"            >              <path                d="M17.87 8.6A1 1 0 0 0 17 8h-4.58l1.27-4.74a1 1 0 0 0-.17-.87a1 1 0 0 0-.8-.39h-7a1 1 0 0 0-1 .74l-2.68 10a1 1 0 0 0 1 1.26h3.85l-1.81 6.74a1 1 0 0 0 1.71.93l10.9-12a1 1 0 0 0 .18-1.07m-9.79 8.68l1.08-4a1 1 0 0 0-.16-.89a1 1 0 0 0-.81-.39H4.35l2.14-8h4.93l-1.27 4.74a1 1 0 0 0 1 1.26h3.57ZM19 13h-1a3 3 0 0 0-3 3v5a1 1 0 0 0 2 0v-2h3v2a1 1 0 0 0 2 0v-5a3 3 0 0 0-3-3m1 4h-3v-1a1 1 0 0 1 1-1h1a1 1 0 0 1 1 1Z" />            </svg>          &#125;        />      </Link>      &#123;/* Web自动化 */&#125;      <Link href=&#123;NavPath.webAuto&#125;>        <NavItem          name="Web自动化"          active=&#123;pathname === NavPath.webAuto&#125; // 判断是否激活          icon=&#123; /* 首页图标的 SVG 代码 */            <svg              aria-hidden="true"              className="size-5"              fill="currentColor"              viewBox="0 0 24 24"              xmlns="http://www.w3.org/2000/svg"            >              <path                d="M17.87 8.6A1 1 0 0 0 17 8h-4.58l1.27-4.74a1 1 0 0 0-.17-.87a1 1 0 0 0-.8-.39h-7a1 1 0 0 0-1 .74l-2.68 10a1 1 0 0 0 1 1.26h3.85l-1.81 6.74a1 1 0 0 0 1.71.93l10.9-12a1 1 0 0 0 .18-1.07m-9.79 8.68l1.08-4a1 1 0 0 0-.16-.89a1 1 0 0 0-.81-.39H4.35l2.14-8h4.93l-1.27 4.74a1 1 0 0 0 1 1.26h3.57ZM19 13h-1 "              />              <path fill="none" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2"                d="m7 7 m9 8l1 8l2-5l2 5l1-8" />            </svg>          &#125;        />      </Link>      &#123;/* 系统管理 */&#125;      <Link href=&#123;NavPath.systemSetting&#125;>        <NavItem          name="系统管理"          active=&#123;pathname === NavPath.systemSetting&#125; // 判断是否激活          icon=&#123;            <svg              aria-hidden="true"              className="size-5"              fill="currentColor"              viewBox="0 0 24 24"              xmlns="http://www.w3.org/2000/svg"            >              <path                clipRule="evenodd"                d="M9.6 2.6A2 2 0 0 1 11 2h2a2 2 0 0 1 2 2l.5.3a2 2 0 0 1 2.9 0l1.4 1.3a2 2 0 0 1 0 2.9l.1.5h.1a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2l-.3.5a2 2 0 0 1 0 2.9l-1.3 1.4a2 2 0 0 1-2.9 0l-.5.1v.1a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2l-.5-.3a2 2 0 0 1-2.9 0l-1.4-1.3a2 2 0 0 1 0-2.9l-.1-.5H4a2 2 0 0 1-2-2v-2a2 2 0 0 1 2-2l.3-.5a2 2 0 0 1 0-2.9l1.3-1.4a2 2 0 0 1 2.9 0l.5-.1V4c0-.5.2-1 .6-1.4ZM8 12a4 4 0 1 1 8 0 4 4 0 0 1-8 0Z"                fillRule="evenodd"              />            </svg>          &#125;        />      </Link>    </Space>  )&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2）SideNav-tsx：侧边菜单组件"><a href="#2）SideNav-tsx：侧边菜单组件" class="headerlink" title="2）SideNav.tsx：侧边菜单组件"></a>2）SideNav.tsx：侧边菜单组件</h4><pre class="line-numbers language-tsx"><code class="language-tsx">import &#123; LogoIcon &#125; from '@/components/Icons/LogoIcon'import &#123; NavMenu &#125; from './NavMenu'export function SideNav() &#123;  return (    <div className="flex h-full shrink-0 basis-[110px] flex-col items-center overflow-x-hidden px-1 pt-layoutHeader">      <div        className="mb-4 mt-2 size-12 rounded-xl p-0"      >        <LogoIcon />      </div>      <div className="flex size-full w-[110px] flex-col items-center overflow-y-auto">        <NavMenu />      </div>    </div>  )&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3）index-ts：导出文件"><a href="#3）index-ts：导出文件" class="headerlink" title="3）index.ts：导出文件"></a>3）index.ts：导出文件</h4><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> SideNav <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'./SideNav'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6、"><a href="#6、" class="headerlink" title="6、"></a>6、</h3><pre><code></code></pre><h2 id="七、contexts：上下文管理"><a href="#七、contexts：上下文管理" class="headerlink" title="七、contexts：上下文管理"></a>七、contexts：上下文管理</h2><h3 id="1、ThemeContext-tsx：主题动态配置管理"><a href="#1、ThemeContext-tsx：主题动态配置管理" class="headerlink" title="1、ThemeContext.tsx：主题动态配置管理"></a>1、ThemeContext.tsx：主题动态配置管理</h3><pre class="line-numbers language-tsx"><code class="language-tsx">import &#123; createContext, useContext, useEffect, useMemo, useState &#125; from 'react'// 从 Ant Design 图标库中导入 setTwoToneColor 函数，用于设置双色图标的主色import &#123; setTwoToneColor &#125; from '@ant-design/icons'import &#123; ConfigProvider, theme &#125; from 'antd'import zhCN from 'antd/locale/zh_CN'import &#123; presetThemes &#125; from '../components/ThemeEditor/PresetTheme'import &#123; restoreThemeSetting &#125; from '../components/ThemeEditor/ThemeStorage'import type &#123; ThemeSetting &#125; from '../components/ThemeEditor/ThemeSettings'// 创建主题上下文const &#123; defaultAlgorithm, darkAlgorithm, compactAlgorithm &#125; = theme// 定义 ThemeContextData 接口，用于描述主题上下文的数据结构interface ThemeContextData &#123;  themeSetting: ThemeSetting  setThemeSetting: React.Dispatch<React.SetStateAction<ThemeSetting>>  autoSaveId: string | undefined  isDarkMode: boolean&#125;// 创建 ThemeContext，上下文的初始值为 ThemeContextData 类型const ThemeContext = createContext(&#123;&#125; as ThemeContextData)// 定义 ThemeProviderProps 接口，用于 ThemeProvider 组件的属性interface ThemeProviderProps &#123;  initialValue: ThemeSetting  /**   * 存储配置的 Key。   * 如果提供了，会将主题配置自动保存到本地，然后通过这个 Key 获取到相应的配置。   */  autoSaveId?: ThemeContextData['autoSaveId']&#125;// 创建 ThemeProvider 组件，用于提供主题上下文和主题配置export function ThemeProvider(props: React.PropsWithChildren<ThemeProviderProps>) &#123;  const &#123; token &#125; = theme.useToken()  const &#123; children, initialValue, autoSaveId &#125; = props  // 定义主题设置状态  const [themeSetting, setThemeSetting] = useState<ThemeSetting>(initialValue)  const &#123; themeMode, colorPrimary, borderRadius, spaceType &#125; = themeSetting  // 判断当前是否为暗黑模式  const isDarkMode = themeMode === 'darkDefault'  // 根据主题模式和空间类型计算算法  const algorithm = useMemo(() => &#123;    const algorithms = [isDarkMode ? darkAlgorithm : defaultAlgorithm]    if (spaceType === 'compact') &#123;      algorithms.push(compactAlgorithm)    &#125;    return algorithms  &#125;, [isDarkMode, spaceType])  // 计算主题的 token 值  const themePresetTokens = useMemo(() => &#123;    const isDefaultTheme = themeMode === 'lightDefault' || themeMode === 'darkDefault'    const token = presetThemes[themeMode].token    return &#123; ...token, ...(isDefaultTheme ? &#123; colorPrimary, borderRadius &#125; : &#123;&#125;) &#125;  &#125;, [themeMode, colorPrimary, borderRadius])  // 在主题模式变化时，更新 HTML 根元素的主题属性  useEffect(() => &#123;    document.documentElement.setAttribute('theme', themeMode)  &#125;, [themeMode])  useEffect(() => &#123;    if (themePresetTokens.colorPrimary) &#123;      // 主色变更后，也更新双色图标的主色。      setTwoToneColor(themePresetTokens.colorPrimary)    &#125;  &#125;, [themePresetTokens.colorPrimary])  // 根据不同的 themeMode 设置 Modal 和 Tooltip 的背景颜色  const modalBackgroundColor = isDarkMode ? token.colorBgMask : 'rgb(255 255 255 / 0.72)';  const tooltipStyles = themeMode !== 'darkDefault'    ? &#123;      Tooltip: &#123;        colorTextLightSolid: token.colorText,        colorBgSpotlight: token.colorBgContainer,      &#125;,    &#125;    : undefined;  return (    // 提供主题上下文    <ThemeContext.Provider value=&#123;&#123; themeSetting, setThemeSetting, autoSaveId, isDarkMode &#125;&#125;>      <ConfigProvider        locale=&#123;zhCN&#125;        theme=&#123;&#123;          algorithm,  // 应用计算后的主题算法          token: &#123; ...themePresetTokens &#125;,  // 应用计算后的主题 token          components: &#123;            // 设置 Modal 组件的背景色            Modal: &#123; colorBgMask: modalBackgroundColor &#125;,            // 设置 Tooltip 组件的样式            ...tooltipStyles,          &#125;,        &#125;&#125;      >        &#123;children&#125;      </ConfigProvider>    </ThemeContext.Provider>  )&#125;// 创建 ThemeProviderClient 组件，用于从本地存储恢复主题设置并渲染 ThemeProviderexport function ThemeProviderClient(  props: React.PropsWithChildren<Pick<ThemeProviderProps, 'autoSaveId'>>) &#123;  const &#123; children, autoSaveId &#125; = props  const [themeSetting, setThemeSetting] = useState<ThemeSetting>()  // 从本地存储恢复主题设置  useEffect(() => &#123;    setThemeSetting(restoreThemeSetting(autoSaveId))  &#125;, [autoSaveId])  // 等待获取到主题配置后再渲染，防止主题切换闪烁。  if (!themeSetting) &#123;    return null  &#125;  return (    <ThemeProvider autoSaveId=&#123;autoSaveId&#125; initialValue=&#123;themeSetting&#125;>      &#123;children&#125;    </ThemeProvider>  )&#125;// 自定义 Hook，用于获取主题上下文export const useThemeContext = () => useContext(ThemeContext)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、GlobalContext-tsx：创建和提供一个全局上下文"><a href="#2、GlobalContext-tsx：创建和提供一个全局上下文" class="headerlink" title="2、GlobalContext.tsx：创建和提供一个全局上下文"></a>2、GlobalContext.tsx：创建和提供一个全局上下文</h3><pre class="line-numbers language-tsx"><code class="language-tsx">// 安装@ebay/nice-modal-react：npm install @ebay/nice-modal-react'use client'import &#123; createContext, useContext &#125; from 'react'// 导入 @ebay/nice-modal-react 包中的 Provider 组件import &#123; Provider as NiceModalProvider &#125; from '@ebay/nice-modal-react'import &#123; message, Modal &#125; from 'antd'// 定义 ModalHookApi 类型，为 Modal.useModal 钩子函数返回类型的第一个元素type ModalHookApi = ReturnType<typeof Modal.useModal>[0]// 定义 MessageApi 类型，为 message.useMessage 钩子函数返回类型的第一个元素type MessageApi = ReturnType<typeof message.useMessage>[0]// 定义全局上下文数据的接口interface GlobalContextData &#123;  modal: ModalHookApi   // 包含模态框 API  messageApi: MessageApi  // 包含消息 API&#125;// 创建全局上下文，并赋予初始值为空对象，类型为 GlobalContextDataconst GlobalContext = createContext(&#123;&#125; as GlobalContextData)export function GlobalContextProvider(props: React.PropsWithChildren) &#123;  const &#123; children &#125; = props  // 使用 Modal.useModal 钩子获取 modal API 和 context holder  const [modal, modalContextHolder] = Modal.useModal()  // 使用 message.useMessage 钩子获取 message API 和 context holder，消息持续时间设置为 1 秒  const [messageApi, messageContextHolder] = message.useMessage(&#123; duration: 1 &#125;)  return (    // NiceModalProvider 组件包装全局上下文提供者，以便在全局范围内使用 NiceModal    <NiceModalProvider>      &#123;/* 提供全局上下文，传递 modal 和 messageApi */&#125;      <GlobalContext.Provider        value=&#123;&#123;          modal,          messageApi,        &#125;&#125;      >        &#123;children&#125;        &#123;modalContextHolder&#125;        &#123;messageContextHolder&#125;      </GlobalContext.Provider>    </NiceModalProvider>  )&#125;export const useGlobalContext = () => useContext(GlobalContext)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、LayoutContext-tsx：布局上下文"><a href="#3、LayoutContext-tsx：布局上下文" class="headerlink" title="3、LayoutContext.tsx：布局上下文"></a>3、LayoutContext.tsx：布局上下文</h3><pre class="line-numbers language-tsx"><code class="language-tsx">// 安装包：npm install react-resizable-panelsimport &#123; createContext, useContext, useRef, useState &#125; from 'react'// 导入 ImperativePanelHandle 类型，用于引用可调整大小的面板实例。import type &#123; ImperativePanelHandle &#125; from 'react-resizable-panels'// 定义 LayoutContextData 接口，用于描述上下文中的数据结构interface LayoutContextData &#123;  isSideMenuCollapsed: boolean  // 一个布尔值，表示侧边菜单是否折叠。  setIsSideMenuCollapsed: React.Dispatch<   // 一个函数，用于更新 isSideMenuCollapsed 的状态。    React.SetStateAction<LayoutContextData['isSideMenuCollapsed']>  >  panelRef: React.RefObject<ImperativePanelHandle>    // 一个引用对象，指向 react-resizable-panels 中的面板实例。&#125;// 创建一个名为 LayoutContext 的上下文对象，使用 createContext 函数，并传入一个空对象作为默认值。这里的类型断言 as LayoutContextDataconst LayoutContext = createContext(&#123;&#125; as LayoutContextData)// 定义一个名为 LayoutProvider 的函数组件，它接受一个带有 children 属性的React.PropsWithChildren 类型的 props 参数。export function LayoutProvider(props: React.PropsWithChildren) &#123;  // 使用 useRef 钩子创建一个 panelRef，它将被用来引用可调整大小的面板实例。  const panelRef = useRef<ImperativePanelHandle>(null)  // 使用 useState 钩子创建一个状态变量 isSideMenuCollapsed，初始值为 false，  const [isSideMenuCollapsed, setIsSideMenuCollapsed] = useState(false)  // 返回一个 LayoutContext.Provider 组件，它将 panelRef, isSideMenuCollapsed,和 setIsSideMenuCollapsed 作为值传递给它的子组件。  // props.children 表示任何被 LayoutProvider 包裹的子组件都会访问到这些值。  return (    <LayoutContext.Provider value=&#123;&#123; panelRef, isSideMenuCollapsed, setIsSideMenuCollapsed &#125;&#125;>      &#123;props.children&#125;    </LayoutContext.Provider>  )&#125;// 导出一个名为 useLayoutContext 的函数，它返回通过 useContext 钩子// 从 LayoutContext 中获取的值。这使得其他组件能够轻松地访问上下文中的数据。export const useLayoutContext = () => useContext(LayoutContext)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、hooks：自定义钩子"><a href="#八、hooks：自定义钩子" class="headerlink" title="八、hooks：自定义钩子"></a>八、hooks：自定义钩子</h2><h3 id="1、useStyle-ts：Emotion的css钩子函数"><a href="#1、useStyle-ts：Emotion的css钩子函数" class="headerlink" title="1、useStyle.ts：Emotion的css钩子函数"></a>1、useStyle.ts：Emotion的css钩子函数</h3><pre class="line-numbers language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 安装@emotion/css：npm install @emotion/css</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> theme <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> css <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'@emotion/css'</span><span class="token comment" spellcheck="true">// 定义一个类型 Theme，该类型是 theme.useToken 函数返回值的类型</span>type Theme <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> theme<span class="token punctuation">.</span>useToken<span class="token operator">></span><span class="token comment" spellcheck="true">// 定义一个泛型类型 StyleFunction，表示一个函数类型，该函数接受 theme 和 css 函数作为参数，返回类型为 T</span>type StyleFunction<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>theme<span class="token punctuation">:</span> Theme<span class="token punctuation">,</span> cssFn<span class="token punctuation">:</span> <span class="token keyword">typeof</span> css<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> T<span class="token comment" spellcheck="true">// 导出一个名为 useStyles 的泛型函数，接受一个StyleFunction类型的参数 fn</span><span class="token keyword">export</span> <span class="token keyword">function</span> useStyles<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>fn<span class="token punctuation">:</span> StyleFunction<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> styles<span class="token punctuation">:</span> ReturnType<span class="token operator">&lt;</span>StyleFunction<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> styles<span class="token punctuation">:</span> <span class="token function">fn</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span><span class="token function">useToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> css<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、useLoading-tsx：用于管理加载状态"><a href="#2、useLoading-tsx：用于管理加载状态" class="headerlink" title="2、useLoading.tsx：用于管理加载状态"></a>2、useLoading.tsx：用于管理加载状态</h3><pre class="line-numbers language-tsx"><code class="language-tsx">import &#123; useState, useCallback &#125; from 'react';/** * useLoading 钩子函数用于管理加载状态 * @param initValue - 加载状态的初始值，默认为 false * @returns 管理加载状态的方法和状态 */// 定义 useLoading 钩子函数，接收一个可选的 initValue 参数，默认为 falseexport default function useLoading(initValue: boolean = false) &#123;  const [loading, setLoading] = useState(initValue);  // 定义一个函数 setLoadingState，用于设置 loading 状态为传入的 value  // 使用 useCallback 确保在组件重新渲染时，该函数实例不会被重新创建  const setLoadingState = useCallback((value: boolean) => &#123;    setLoading(value);  &#125;, []);  // 定义一个函数 toggleLoading，用于切换 loading 状态的布尔值  // 使用 useCallback 确保在组件重新渲染时，该函数实例不会被重新创建  const toggleLoading = useCallback(() => &#123;    setLoading(prev => !prev);  &#125;, []);  return &#123;    loading,  // 返回当前的 loading 状态    setLoading: setLoadingState,  // 返回更新 loading 状态的方法    toggle: toggleLoading,  // 返回切换 loading 状态的方法  &#125;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、styles：样式文件"><a href="#九、styles：样式文件" class="headerlink" title="九、styles：样式文件"></a>九、styles：样式文件</h2><h3 id="1、globals-css：全局样式"><a href="#1、globals-css：全局样式" class="headerlink" title="1、globals.css：全局样式"></a>1、globals.css：全局样式</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>* &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token punctuation">:</span>root &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token atrule"><span class="token rule">@apply</span> antialiased<span class="token punctuation">;</span></span>  <span class="token comment" spellcheck="true">/* --layout-header-height: 40px;  */</span>  <span class="token property">--p-main</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token property">--p-tab-content</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>  <span class="token property">--background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f2f3f5</span><span class="token punctuation">;</span>  <span class="token property">--colorText</span><span class="token punctuation">:</span> <span class="token hexcode">#ffffff</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token punctuation">:</span>root[theme=<span class="token string">'lightDefault'</span>],<span class="token punctuation">:</span>root[theme=<span class="token string">'lark'</span>] &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">--color-green-6</span><span class="token punctuation">:</span> <span class="token hexcode">#4caf50</span><span class="token punctuation">;</span>  <span class="token property">--color-orange-6</span><span class="token punctuation">:</span> <span class="token hexcode">#fa8c16</span><span class="token punctuation">;</span>  <span class="token property">--color-orange-6</span><span class="token punctuation">:</span> <span class="token hexcode">#e0dedc</span><span class="token punctuation">;</span>  <span class="token property">--color-blue-6</span><span class="token punctuation">:</span> <span class="token hexcode">#1890ff</span><span class="token punctuation">;</span>  <span class="token property">--color-volcano-6</span><span class="token punctuation">:</span> <span class="token hexcode">#fa541c</span><span class="token punctuation">;</span>  <span class="token property">--color-pink-6</span><span class="token punctuation">:</span> <span class="token hexcode">#eb2f96</span><span class="token punctuation">;</span>  <span class="token property">--color-geekblue-6</span><span class="token punctuation">:</span> <span class="token hexcode">#2f54eb</span><span class="token punctuation">;</span>  <span class="token property">--color-lime-6</span><span class="token punctuation">:</span> <span class="token hexcode">#a0d911</span><span class="token punctuation">;</span>  <span class="token property">--color-yellow-6</span><span class="token punctuation">:</span> <span class="token hexcode">#fadb14</span><span class="token punctuation">;</span>  <span class="token property">--color-purple-6</span><span class="token punctuation">:</span> <span class="token hexcode">#9373ee</span><span class="token punctuation">;</span>  <span class="token property">--color-red-6</span><span class="token punctuation">:</span> <span class="token hexcode">#f5222d</span><span class="token punctuation">;</span>  <span class="token property">--color-grey-6</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">170</span> <span class="token number">170</span> <span class="token number">170</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">--color-scrollbar-thumb</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> / <span class="token number">15%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">color-scheme</span><span class="token punctuation">:</span> light<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token punctuation">:</span>root[theme=<span class="token string">'darkDefault'</span>] &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">--color-green-6</span><span class="token punctuation">:</span> <span class="token hexcode">#49aa19</span><span class="token punctuation">;</span>  <span class="token property">--color-orange-6</span><span class="token punctuation">:</span> <span class="token hexcode">#d87a16</span><span class="token punctuation">;</span>  <span class="token property">--color-blue-6</span><span class="token punctuation">:</span> <span class="token hexcode">#177ddc</span><span class="token punctuation">;</span>  <span class="token property">--color-volcano-6</span><span class="token punctuation">:</span> <span class="token hexcode">#d84a1b</span><span class="token punctuation">;</span>  <span class="token property">--color-pink-6</span><span class="token punctuation">:</span> <span class="token hexcode">#cf2f86</span><span class="token punctuation">;</span>  <span class="token property">--color-geekblue-6</span><span class="token punctuation">:</span> <span class="token hexcode">#2b4acb</span><span class="token punctuation">;</span>  <span class="token property">--color-lime-6</span><span class="token punctuation">:</span> <span class="token hexcode">#8bbb11</span><span class="token punctuation">;</span>  <span class="token property">--color-yellow-6</span><span class="token punctuation">:</span> <span class="token hexcode">#d8bd14</span><span class="token punctuation">;</span>  <span class="token property">--color-purple-6</span><span class="token punctuation">:</span> <span class="token hexcode">#9383f1</span><span class="token punctuation">;</span>  <span class="token property">--color-red-6</span><span class="token punctuation">:</span> <span class="token hexcode">#d32029</span><span class="token punctuation">;</span>  <span class="token property">--color-grey-6</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">170</span> <span class="token number">170</span> <span class="token number">170</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">--color-scrollbar-thumb</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token number">255</span> <span class="token number">255</span> / <span class="token number">30%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">color-scheme</span><span class="token punctuation">:</span> dark<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token punctuation">:</span><span class="token punctuation">:</span>-webkit-scrollbar &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">6</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">8</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token punctuation">:</span><span class="token punctuation">:</span>-webkit-scrollbar-thumb &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-scrollbar-thumb<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">4</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token punctuation">:</span><span class="token punctuation">:</span>-webkit-scrollbar-track &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*在这里设置 Design Token 无法影响到的样式。使用了 `tailwindcss/nesting` 预处理 CSS Nesting，参考：https://tailwindcss.com/docs/using-with-preprocessors#nesting*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、ant-design避免样式闪烁效果问题"><a href="#2、ant-design避免样式闪烁效果问题" class="headerlink" title="2、ant-design避免样式闪烁效果问题"></a>2、ant-design避免样式闪烁效果问题</h3><p>创建<code>AntdStyleProvider</code>组件</p><pre class="line-numbers language-tsx"><code class="language-tsx">'use client'import &#123; useState &#125; from 'react'import &#123; useServerInsertedHTML &#125; from 'next/navigation'import &#123; createCache, extractStyle, StyleProvider &#125; from '@ant-design/cssinjs'/** * 这部分的代码参考自：https://github.com/ant-design/ant-design/issues/38555#issuecomment-1571203559 */function AntdStyleRegister(props: React.PropsWithChildren) &#123;  const [cache] = useState(() => createCache())  useServerInsertedHTML(() => &#123;    return (      <script        dangerouslySetInnerHTML=&#123;&#123;          // This is hack, `extractStyle` does not currently support returning JSX or related data.          __html: `</script>$&#123;extractStyle(cache)&#125;<script>`,        &#125;&#125;      />    )  &#125;)  return <StyleProvider cache=&#123;cache&#125;>&#123;props.children&#125;</StyleProvider>&#125;/** * 使用「服务端渲染」需要烘焙样式，否则会出现样式闪烁问题。 * * - 相关文档：https://ant.design/docs/react/customize-theme-cn#服务端渲染 * - 相关 Issue：https://github.com/ant-design/ant-design/issues/38555 */export function AntdStyleProvider(props: React.PropsWithChildren) &#123;  return <AntdStyleRegister>&#123;props.children&#125;</AntdStyleRegister>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建根页面的布局</p><pre class="line-numbers language-tsx"><code class="language-tsx">// 路径：src/app/layout.tsximport type &#123; PropsWithChildren &#125; from 'react'import &#123; AntdStyleProvider &#125; from '../components/Theme/AntdStyleProvider'export default function RootLayout(&#123; children &#125;: PropsWithChildren) &#123;  return (    <html lang="en">      <body>        <AntdStyleProvider>&#123;children&#125;</AntdStyleProvider>      </body>    </html>  );&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义颜色CSS-in-JS 库，安装Emotion</p><pre class="line-numbers language-shell"><code class="language-shell">npm install @emotion/css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在组件文件中导入Emotion相关模块</p><h2 id="十、enums：定义枚举"><a href="#十、enums：定义枚举" class="headerlink" title="十、enums：定义枚举"></a>十、enums：定义枚举</h2><h3 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h3><h2 id="十一、types：定义TypeScript类型"><a href="#十一、types：定义TypeScript类型" class="headerlink" title="十一、types：定义TypeScript类型"></a>十一、types：定义TypeScript类型</h2><h3 id="1、static-ts：静态文件"><a href="#1、static-ts：静态文件" class="headerlink" title="1、static.ts：静态文件"></a>1、static.ts：静态文件</h3><h2 id="十二、utils：工具函数"><a href="#十二、utils：工具函数" class="headerlink" title="十二、utils：工具函数"></a>十二、utils：工具函数</h2><h3 id="1、getPageTitle-ts：获取页面title"><a href="#1、getPageTitle-ts：获取页面title" class="headerlink" title="1、getPageTitle.ts：获取页面title"></a>1、getPageTitle.ts：获取页面title</h3><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getPageTitle</span><span class="token punctuation">(</span>title<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> mainTitle <span class="token operator">=</span> <span class="token string">'Nextfox'</span>  <span class="token keyword">return</span> title <span class="token operator">?</span> <span class="token template-string"><span class="token string">`$&amp;#123;title&amp;#125; - $&amp;#123;mainTitle&amp;#125;`</span></span> <span class="token punctuation">:</span> mainTitle<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、serialize-ts：序列化-JavaScript-对象"><a href="#2、serialize-ts：序列化-JavaScript-对象" class="headerlink" title="2、serialize.ts：序列化 JavaScript 对象"></a>2、serialize.ts：序列化 JavaScript 对象</h3><pre class="line-numbers language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 安装包：npm install @types/serialize-javascript</span><span class="token comment" spellcheck="true">/** 将 JS 序列化为 JSON 的超集，包括正则表达式，日期和函数。 */</span><span class="token keyword">export</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">default</span> as serialize <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'serialize-javascript'</span><span class="token comment" spellcheck="true">/** 反序列化，对应 serialize 方法。 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> deserialize<span class="token operator">&lt;</span>ReturnType <span class="token operator">=</span> unknown<span class="token operator">></span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ReturnType <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">Function</span><span class="token punctuation">(</span><span class="token string">'"use strict";return ('</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> as ReturnType<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** 检查传入的值是否为简单的 JS 对象。 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isPureObject</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span> value is Record<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">any</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Object]'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** 移动数组元素。 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> moveArrayItem<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fromIndex<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> toIndex<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 先删除原位置上的元素。</span>  <span class="token keyword">const</span> element <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>fromIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 然后在指定位置插入该元素。</span>  arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>toIndex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、encrypted-ts：账号密码加密"><a href="#3、encrypted-ts：账号密码加密" class="headerlink" title="3、encrypted.ts：账号密码加密"></a>3、encrypted.ts：账号密码加密</h3><pre class="line-numbers language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 安装包：npm install jsencrypt</span><span class="token keyword">import</span> JSEncrypt <span class="token keyword">from</span> <span class="token string">'jsencrypt'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 加密 * @param input 输入的字符串 * @param publicKey 公钥 * @returns 返回加密后的字符串 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">encrypted</span><span class="token punctuation">(</span>input<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">false</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 从本地存储中获取公钥，如果不存在则使用空字符串</span>  <span class="token keyword">const</span> publicKey <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'salt'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建一个新的 JSEncrypt 实例，指定默认的密钥大小为 1024 位</span>  <span class="token keyword">const</span> encrypt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSEncrypt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> default_key_size<span class="token punctuation">:</span> <span class="token string">'1024'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置公钥，用于加密操作</span>  encrypt<span class="token punctuation">.</span><span class="token function">setPublicKey</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使用公钥加密输入的字符串，并返回加密后的结果</span>  <span class="token keyword">const</span> encryptedData <span class="token operator">=</span> encrypt<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>encryptedData <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> encryptedData<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'加密失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、request-ts：请求封装"><a href="#4、request-ts：请求封装" class="headerlink" title="4、request.ts：请求封装"></a>4、request.ts：请求封装</h3><pre class="line-numbers language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">//安装包：npm install axios nprogress</span><span class="token comment" spellcheck="true">//安装类型定义：npm install --save-dev @types/nprogress</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">import</span> NProgress <span class="token keyword">from</span> <span class="token string">'nprogress'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'nprogress/nprogress.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Response <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">"@/types"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 配置 NProgress 关闭加载图标</span>NProgress<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> showSpinner<span class="token punctuation">:</span> <span class="token keyword">false</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 判断 API 调用是否成功</span><span class="token keyword">const</span> isSuccess <span class="token operator">=</span> <span class="token punctuation">(</span>result<span class="token punctuation">:</span> Response<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> result<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">100200</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建 axios 实例，设置基础 URL 和超时时间</span><span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  baseURL<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NEXT_PUBLIC_API_URL<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 基础 URL</span>  timeout<span class="token punctuation">:</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 超时时间，默认 30 s</span>  withCredentials<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 跨域请求时是否需要使用凭证</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 请求拦截器，待完善 */</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 进度条开始</span>    NProgress<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 请求错误时结束进度条</span>    NProgress<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 响应拦截器 */</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 进度条结束</span>    NProgress<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果没有响应或响应没有状态码，则返回网络异常错误</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response <span class="token operator">||</span> <span class="token operator">!</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'网络异常，请检查您的网络'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果响应状态码不是 200，则返回错误信息</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`$&amp;#123;response.status&amp;#125;: $&amp;#123;response.config.url&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 尝试将响应体中的 data 转换为 Result 类型</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> response<span class="token punctuation">.</span>data as Response<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSuccess</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`$&amp;#123;result.message || result.messageDetail&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 进度条结束</span>    NProgress<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 直接返回响应数据</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token operator">...</span>response<span class="token punctuation">,</span>      data<span class="token punctuation">:</span> result<span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 返回一个符合 AxiosResponse 类型的对象，包含 result 数据</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 进度条结束</span>    NProgress<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 捕获错误并返回错误信息</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 请求发出且服务器有返回响应</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`$&amp;#123;error.response.status&amp;#125;: $&amp;#123;error.response.config.url&amp;#125; - $&amp;#123;error.response.data.message&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>request<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 请求发出但没有收到响应</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'网络异常，请检查您的网络'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 其他错误</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 封装的请求方法：get、post、put、patch、delete * @param url 请求地址 * @param params 参数 * @returns */</span><span class="token keyword">const</span> <span class="token keyword">get</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>T <span class="token operator">=</span> <span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> params<span class="token operator">?</span><span class="token punctuation">:</span> Record<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span>Response<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">></span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> params <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token operator">&lt;</span>T <span class="token operator">=</span> <span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> Record<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span>Response<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">></span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">const</span> put <span class="token operator">=</span> <span class="token operator">&lt;</span>T <span class="token operator">=</span> <span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> Record<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span>Response<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">></span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">const</span> patch <span class="token operator">=</span> <span class="token operator">&lt;</span>T <span class="token operator">=</span> <span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> Record<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span>Response<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">></span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">patch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">const</span> del <span class="token operator">=</span> <span class="token operator">&lt;</span>T <span class="token operator">=</span> <span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> data<span class="token operator">?</span><span class="token punctuation">:</span> Record<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span>Response<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">></span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> data <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">const</span> httpRequest <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">get</span><span class="token punctuation">,</span>  post<span class="token punctuation">:</span> post<span class="token punctuation">,</span>  put<span class="token punctuation">:</span> put<span class="token punctuation">,</span>  patch<span class="token punctuation">:</span> patch<span class="token punctuation">,</span>  <span class="token keyword">delete</span><span class="token punctuation">:</span> del<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> httpRequest<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、localStorage-ts：存储Store"><a href="#5、localStorage-ts：存储Store" class="headerlink" title="5、localStorage.ts：存储Store"></a>5、localStorage.ts：存储Store</h3><pre class="line-numbers language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 从 localStorage 获取值的函数</span><span class="token comment" spellcheck="true">// T: 泛型参数，用于指定期望的返回类型</span><span class="token comment" spellcheck="true">// name: 从 localStorage 中获取值的键名</span><span class="token comment" spellcheck="true">// isJson: 可选标志，指示值是否应作为 JSON 解析</span><span class="token keyword">export</span> <span class="token keyword">const</span> getLocalStorage <span class="token operator">=</span> <span class="token operator">&lt;</span>T <span class="token operator">=</span> <span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> isJson<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token operator">|</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据键名从 localStorage 中检索值</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果值存在且 isJson 标志为 true，则将值解析为 JSON</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> isJson<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> as T<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果 isJson 为 false 或值为 null，则直接返回值</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果在检索或解析过程中发生任何错误，则返回 null</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将值存储到 localStorage 的函数</span><span class="token comment" spellcheck="true">// name: 存储值的键名</span><span class="token comment" spellcheck="true">// value: 要存储的值；如果不是字符串，则将其转换为 JSON</span><span class="token keyword">export</span> <span class="token keyword">const</span> setLocalStorage <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果值不是字符串，则将其转换为 JSON 字符串</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">!==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      value <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据指定的键名将值存储到 localStorage 中</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 忽略任何存储过程中发生的错误</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从 localStorage 移除值的函数</span><span class="token comment" spellcheck="true">// name: 要移除的值的键名</span><span class="token keyword">export</span> <span class="token keyword">const</span> removeLocalStorage <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据键名从 localStorage 中移除值</span>    localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 忽略任何移除过程中发生的错误</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十三、项目文件修改"><a href="#十三、项目文件修改" class="headerlink" title="十三、项目文件修改"></a>十三、项目文件修改</h2><h3 id="1、favicon-svg图片"><a href="#1、favicon-svg图片" class="headerlink" title="1、favicon.svg图片"></a>1、favicon.svg图片</h3><pre class="line-numbers language-svg"><code class="language-svg"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span>  <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>xlink</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xlink<span class="token punctuation">"</span></span>  <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span>  <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span>  <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0 0 450 450<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defs</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Define gradient and clip paths here if needed --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>defs</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>g</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span>          <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M 132.5,24.5 C 195.501,24.3333 258.501,24.5 321.5,25C 370.923,31.1109 405.423,56.9443 425,102.5C 428.922,112.853 431.588,123.52 433,134.5C 433.964,199.187 433.63,263.853 432,328.5C 422.85,378.98 394.017,412.48 345.5,429C 335.349,431.784 325.016,433.45 314.5,434C 255.167,434.667 195.833,434.667 136.5,434C 84.2967,427.331 48.7967,399.498 30,350.5C 26.7153,340.076 24.7153,329.41 24,318.5C 23.3333,257.167 23.3333,195.833 24,134.5C 34.5701,72.4307 70.7368,35.764 132.5,24.5 Z<span class="token punctuation">"</span></span>          <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#9373ee<span class="token punctuation">"</span></span>        <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span>          <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M 364.5,220.5 C 364.5,264.833 364.5,309.167 364.5,353.5C 344.167,353.5 323.833,353.5 303.5,353.5C 303.667,312.832 303.5,272.165 303,231.5C 297.133,198.3 277.967,177.133 245.5,168C 205.779,162.108 176.946,176.942 159,212.5C 156.953,219.066 155.287,225.733 154,232.5C 153.5,272.832 153.333,313.165 153.5,353.5C 133.167,353.5 112.833,353.5 92.5,353.5C 92.5,309.167 92.5,264.833 92.5,220.5C 97.2032,175.904 118.87,142.404 157.5,120C 187.19,105.275 218.523,100.275 251.5,105C 305.484,113.324 341.651,143.158 360,194.5C 362.663,202.973 364.163,211.639 364.5,220.5 Z<span class="token punctuation">"</span></span>          <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#fdfdfe<span class="token punctuation">"</span></span>        <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span>          <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M 166.5,241.5 C 207.833,240.167 249.167,240.167 290.5,241.5C 289.503,260.659 289.17,279.993 289.5,299.5C 248.833,299.5 208.167,299.5 167.5,299.5C 167.83,279.993 167.497,260.659 166.5,241.5 Z<span class="token punctuation">"</span></span>          <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#fdfdfe<span class="token punctuation">"</span></span>        <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span>          <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M 166.5,241.5 C 167.497,260.659 167.83,279.993 167.5,299.5C 208.167,299.5 248.833,299.5 289.5,299.5C 289.17,279.993 289.503,260.659 290.5,241.5C 290.5,261.167 290.5,280.833 290.5,300.5C 249.167,300.5 207.833,300.5 166.5,300.5C 166.5,280.833 166.5,261.167 166.5,241.5 Z<span class="token punctuation">"</span></span>          <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#fdfdfe<span class="token punctuation">"</span></span>        <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>g</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、LogoIcon图片"><a href="#2、LogoIcon图片" class="headerlink" title="2、LogoIcon图片"></a>2、LogoIcon图片</h3><pre class="line-numbers language-tsx"><code class="language-tsx">// 路径src/components/icons/LogoIcon.tsximport &#123; theme &#125; from 'antd'export function LogoIcon() &#123;  const &#123; token &#125; = theme.useToken() // 获取主题token  const primaryColor = token.colorPrimary  return (    <svg fill="none" version="1.1" viewBox="0 0 450 450" xmlns="http://www.w3.org/2000/svg">      <defs></defs>      <g>        <path          d="M 132.5,24.5 C 195.501,24.3333 258.501,24.5 321.5,25C 370.923,31.1109 405.423,56.9443 425,102.5C 428.922,112.853 431.588,123.52 433,134.5C 433.964,199.187 433.63,263.853 432,328.5C 422.85,378.98 394.017,412.48 345.5,429C 335.349,431.784 325.016,433.45 314.5,434C 255.167,434.667 195.833,434.667 136.5,434C 84.2967,427.331 48.7967,399.498 30,350.5C 26.7153,340.076 24.7153,329.41 24,318.5C 23.3333,257.167 23.3333,195.833 24,134.5C 34.5701,72.4307 70.7368,35.764 132.5,24.5 Z"          fill=&#123;primaryColor&#125;        />        <path          d="M 364.5,220.5 C 364.5,264.833 364.5,309.167 364.5,353.5C 344.167,353.5 323.833,353.5 303.5,353.5C 303.667,312.832 303.5,272.165 303,231.5C 297.133,198.3 277.967,177.133 245.5,168C 205.779,162.108 176.946,176.942 159,212.5C 156.953,219.066 155.287,225.733 154,232.5C 153.5,272.832 153.333,313.165 153.5,353.5C 133.167,353.5 112.833,353.5 92.5,353.5C 92.5,309.167 92.5,264.833 92.5,220.5C 97.2032,175.904 118.87,142.404 157.5,120C 187.19,105.275 218.523,100.275 251.5,105C 305.484,113.324 341.651,143.158 360,194.5C 362.663,202.973 364.163,211.639 364.5,220.5 Z"          fill="#fdfdfe"        />        <path          d="M 166.5,241.5 C 207.833,240.167 249.167,240.167 290.5,241.5C 289.503,260.659 289.17,279.993 289.5,299.5C 248.833,299.5 208.167,299.5 167.5,299.5C 167.83,279.993 167.497,260.659 166.5,241.5 Z"          fill="#fdfdfe"        />      </g>    </svg>  )&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、侧边栏Login展示"><a href="#3、侧边栏Login展示" class="headerlink" title="3、侧边栏Login展示"></a>3、侧边栏Login展示</h3><pre class="line-numbers language-tsx"><code class="language-tsx">// 路径：src/app/(main)/components/SideNav/SideNav.tsximport &#123; LogoIcon &#125; from '@/components/icons/LogoIcon'import &#123; NavMenu &#125; from './NavMenu'export function SideNav() &#123;  return (    <div className="flex h-full shrink-0 basis-[100px] flex-col items-center overflow-y-auto overflow-x-hidden px-1 pt-layoutHeader">      <div        className="mb-4 mt-2 size-12 rounded-xl p-0"      // style=&#123;&#123; color: token.colorText, border: `1px solid $&#123;token.colorBorder&#125;` &#125;&#125;      >        <LogoIcon />      </div>      <div className="flex h-full flex-col items-center overflow-y-auto">        <NavMenu />      </div>    </div>  )&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、设置默认颜色"><a href="#4、设置默认颜色" class="headerlink" title="4、设置默认颜色"></a>4、设置默认颜色</h3><pre class="line-numbers language-tsx"><code class="language-tsx">// 路径src/components/ThemeEditor/theme-data.tsxexport const defaultThemeSetting: ThemeSetting = &#123;  themeMode: 'lightDefault',  colorPrimary: '#9373ee',  // colorPrimary: globalToken.colorPrimary,  borderRadius: globalToken.borderRadius,  spaceType: 'default',&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、接口管理页面左侧菜单icon颜色从token获取"><a href="#5、接口管理页面左侧菜单icon颜色从token获取" class="headerlink" title="5、接口管理页面左侧菜单icon颜色从token获取"></a>5、接口管理页面左侧菜单icon颜色从token获取</h3><pre class="line-numbers language-tsx"><code class="language-tsx">// 路径src/components/icons/FileIcon.tsximport &#123; theme &#125; from 'antd'export function FileIcon(props: FileIconProps) &#123;  const &#123; type, size, className, style &#125; = props  const &#123; token &#125; = theme.useToken() // 获取主题token  const iconProps: Pick<FileIconProps, 'size' | 'className' | 'style'> = &#123;    size,    className,    style: &#123;      ...style,      color: token.colorPrimary,    &#125;,  &#125;// 路径src/components/icons/FolderIcon.tsximport &#123; theme &#125; from 'antd'export function FolderIcon(props: FolderIconProps) &#123;  const &#123; type, size = 16, className, style &#125; = props  const &#123; token &#125; = theme.useToken() // 获取主题token  const iconProps: Pick<FileIconProps, 'size' | 'className' | 'style'> = &#123;    size,    className,    style: &#123;      ...style,      color: token.colorPrimary,    &#125;,  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、接口管理-所有非叶子节点点击展开或收起"><a href="#6、接口管理-所有非叶子节点点击展开或收起" class="headerlink" title="6、接口管理-所有非叶子节点点击展开或收起"></a>6、接口管理-所有非叶子节点点击展开或收起</h3><pre class="line-numbers language-tsx"><code class="language-tsx">// 路径src/components/ApiMenu/ApiMenu.tsxif (typeof menuId === 'string') &#123;      // 所有非叶子节点点击展开或收起      if (!node.isLeaf) &#123;        switchExpandedKeys(menuId)      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、取消-ant-tabs-nav-list的magin"><a href="#7、取消-ant-tabs-nav-list的magin" class="headerlink" title="7、取消.ant-tabs-nav-list的magin"></a>7、取消.ant-tabs-nav-list的magin</h3><pre class="line-numbers language-tsx"><code class="language-tsx">// 路径src/styles/globals.css.ant-tabs-nav-list &#123;        /* @apply relative ml-2; */      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8、修改header的高度h-12"><a href="#8、修改header的高度h-12" class="headerlink" title="8、修改header的高度h-12"></a>8、修改header的高度h-12</h3><pre class="line-numbers language-tsx"><code class="language-tsx">// 路径src/app/(main)/layout.tsx<div className="h-12 overflow-hidden">   <HeaderNav /></div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9、添加页面滚动条：项目设置页面"><a href="#9、添加页面滚动条：项目设置页面" class="headerlink" title="9、添加页面滚动条：项目设置页面"></a>9、添加页面滚动条：项目设置页面</h3><pre class="line-numbers language-tsx"><code class="language-tsx">// 路径：src/app/(main)/settings/page.tsx<div className="overflow-y-auto" </div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></script></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Tools测试工具</title>
      <link href="/posts/tools-ce-shi-gong-ju/"/>
      <url>/posts/tools-ce-shi-gong-ju/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Tools测试工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jira </tag>
            
            <tag> 禅道 </tag>
            
            <tag> wiki </tag>
            
            <tag> Tapd </tag>
            
            <tag> Git </tag>
            
            <tag> Xmind </tag>
            
            <tag> Xshell </tag>
            
            <tag> iTerm2 </tag>
            
            <tag> Fiddler </tag>
            
            <tag> Charles </tag>
            
            <tag> WireShark </tag>
            
            <tag> StreamDock </tag>
            
            <tag> Postman </tag>
            
            <tag> Jmeter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>季度总结</title>
      <link href="/posts/report-ji-du-zong-jie/"/>
      <url>/posts/report-ji-du-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="第一本书"><a href="#第一本书" class="headerlink" title="第一本书"></a>第一本书</h2><div class="row">    <embed src="/book/skill-one/Linux学习笔记.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="第二本书"><a href="#第二本书" class="headerlink" title="第二本书"></a>第二本书</h2><div class="row">    <embed src="/book/skill-one/软件测试经验与教训" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> Report季度总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Read读万卷书</title>
      <link href="/posts/book/"/>
      <url>/posts/book/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="/book/skill-one/Linux学习笔记.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> Read读万卷书 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
