<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>这是第一个博客网站 Hello World</title>
      <link href="/2022/01/22/undefined.html"/>
      <url>/2022/01/22/undefined.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">curl <span class="token string">'https://mk-test3.dustess.com/qw-scrm-svc/action/company/getDetail?id=dff27d93-7b73-11ec-9bfb-829da4612e9a'</span> \  -X <span class="token string">'OPTIONS'</span> \  -H <span class="token string">'Connection: keep-alive'</span> \  -H <span class="token string">'Accept: */*'</span> \  -H <span class="token string">'Access-Control-Request-Method: GET'</span> \  -H <span class="token string">'Access-Control-Request-Headers: authorization'</span> \  -H <span class="token string">'Origin: https://ww1d2ec5f82d2a53a2-qw-scrm-test3.dustess.com'</span> \  -H <span class="token string">'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36'</span> \  -H <span class="token string">'Sec-Fetch-Mode: cors'</span> \  -H <span class="token string">'Sec-Fetch-Site: same-site'</span> \  -H <span class="token string">'Sec-Fetch-Dest: empty'</span> \  -H <span class="token string">'Accept-Language: zh-CN,zh;q=0.9,en;q=0.8'</span> \  --compressed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>这是第一个博客网站 Hello World</title>
      <link href="/2022/01/22/undefined.html"/>
      <url>/2022/01/22/undefined.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">curl <span class="token string">'https://mk-test3.dustess.com/qw-scrm-svc/action/company/getDetail?id=dff27d93-7b73-11ec-9bfb-829da4612e9a'</span> \  -X <span class="token string">'OPTIONS'</span> \  -H <span class="token string">'Connection: keep-alive'</span> \  -H <span class="token string">'Accept: */*'</span> \  -H <span class="token string">'Access-Control-Request-Method: GET'</span> \  -H <span class="token string">'Access-Control-Request-Headers: authorization'</span> \  -H <span class="token string">'Origin: https://ww1d2ec5f82d2a53a2-qw-scrm-test3.dustess.com'</span> \  -H <span class="token string">'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36'</span> \  -H <span class="token string">'Sec-Fetch-Mode: cors'</span> \  -H <span class="token string">'Sec-Fetch-Site: same-site'</span> \  -H <span class="token string">'Sec-Fetch-Dest: empty'</span> \  -H <span class="token string">'Accept-Language: zh-CN,zh;q=0.9,en;q=0.8'</span> \  --compressed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>这是第一个博客网站 Hello World</title>
      <link href="/2022/01/20/undefined.html"/>
      <url>/2022/01/20/undefined.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"&lt;%- theme.jsDelivr.url %>&lt;%- url_for(theme.libs.css.gitalk) %>"</span><span class="token operator">></span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"&lt;%- theme.jsDelivr.url %>&lt;%- url_for('/css/my-gitalk.css') %>"</span><span class="token operator">></span><span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"card gitalk-card"</span> data-aos<span class="token operator">=</span><span class="token string">"fade-up"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"comment_headling"</span> style<span class="token operator">=</span><span class="token string">"font-size: 20px; font-weight: 700; position: relative; padding-left: 20px; top: 15px; padding-bottom: 5px;"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>i class<span class="token operator">=</span><span class="token string">"fas fa-comments fa-fw"</span> aria-hidden<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span><span class="token operator">&lt;</span>/i<span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span>评论<span class="token operator">&lt;</span>/span<span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"gitalk-container"</span> class<span class="token operator">=</span><span class="token string">"card-content"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"&lt;%- theme.jsDelivr.url %>&lt;%- url_for(theme.libs.js.gitalk) %>"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">let</span> gitalk <span class="token operator">=</span> new Gitalk<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        clientID: <span class="token string">'&lt;%- theme.gitalk.oauth.clientId %>'</span>,        clientSecret: <span class="token string">'&lt;%- theme.gitalk.oauth.clientSecret %>'</span>,        repo: <span class="token string">'&lt;%- theme.gitalk.repo %>'</span>,        owner: <span class="token string">'&lt;%- theme.gitalk.owner %>'</span>,        admin: <span class="token operator">&lt;</span>%- JSON.stringify<span class="token punctuation">(</span>theme.gitalk.admin<span class="token punctuation">)</span> %<span class="token operator">></span>,        id: <span class="token string">'&lt;%- date(page.date, '</span>YYYY-MM-DDTHH-mm-ss<span class="token string">') %>'</span>,        distractionFreeMode: <span class="token boolean">false</span>  // Facebook-like distraction <span class="token function">free</span> mode    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>    gitalk.render<span class="token punctuation">(</span><span class="token string">'gitalk-container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">curl <span class="token string">'https://mk-test3.dustess.com/qw-scrm-svc/action/company/getDetail?id=dff27d93-7b73-11ec-9bfb-829da4612e9a'</span> \  -X <span class="token string">'OPTIONS'</span> \  -H <span class="token string">'Connection: keep-alive'</span> \  -H <span class="token string">'Accept: */*'</span> \  -H <span class="token string">'Access-Control-Request-Method: GET'</span> \  -H <span class="token string">'Access-Control-Request-Headers: authorization'</span> \  -H <span class="token string">'Origin: https://ww1d2ec5f82d2a53a2-qw-scrm-test3.dustess.com'</span> \  -H <span class="token string">'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36'</span> \  -H <span class="token string">'Sec-Fetch-Mode: cors'</span> \  -H <span class="token string">'Sec-Fetch-Site: same-site'</span> \  -H <span class="token string">'Sec-Fetch-Dest: empty'</span> \  -H <span class="token string">'Accept-Language: zh-CN,zh;q=0.9,en;q=0.8'</span> \  --compressed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 是否在首页显示音乐.</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">showTitle</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 是否开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> '<span class="token comment" spellcheck="true">#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span> <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'list'</span> <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span> <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7 </span><span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 列表默认折叠</span>  <span class="token key atrule">listMaxHeight</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 列表最大高度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习了一下接口框架DDT数据的传递过程</title>
      <link href="/2021/11/23/undefined.html"/>
      <url>/2021/11/23/undefined.html</url>
      
        <content type="html"><![CDATA[<h4 id="学习了一下接口框架DDT数据的传递过程"><a href="#学习了一下接口框架DDT数据的传递过程" class="headerlink" title="学习了一下接口框架DDT数据的传递过程"></a>学习了一下接口框架DDT数据的传递过程</h4><h5 id="话说在前面"><a href="#话说在前面" class="headerlink" title="话说在前面"></a>话说在前面</h5><ul><li>在之前的接口脚本中，用csv文件、xlsx文件作为载体存放接口用例的数据。现在学习一下xmind，个人觉得xmind的结构：一个主题下面有多个子主题，在一个接口多种场景（正常值、空值、错误值）下，可以让用例文件更直观。</li><li>但我自己也只是大概的debug了一下，原来的代码没啥备注，啃得可能也有些错误，有大佬指点一下的话感激涕零~</li></ul><h5 id="一、xmind结构"><a href="#一、xmind结构" class="headerlink" title="一、xmind结构"></a>一、xmind结构</h5><p><img src="C:\Users\86183\AppData\Roaming\Typora\typora-user-images\image-20211110142019391.png" alt="image-20211110142019391"></p><p>xmind文件名（cyTest.xmind）</p><p>画布：等同于excel中sheet的概念，默认名为：画布 1</p><p>主题：一个画布由一个中心主题开始延伸，中心主题下包含子主题。</p><p>主题的一些要素</p><ol><li><p>title标题：分支主题2</p></li><li><p>note备注：备注2</p></li><li><p>markers标记：priority-2优先级、tag-orange标签颜色、smiley-cry情绪、task-start任务完成度、等</p></li><li><p>labels标签：标签二</p></li><li><p>link链接：<a href="http://www.baidu.com/">http://www.baidu.com</a></p></li><li><p>topics子主题：子主题也是相同的要素</p></li></ol><h5 id="二、python的xmindparser模块常用方法"><a href="#二、python的xmindparser模块常用方法" class="headerlink" title="二、python的xmindparser模块常用方法"></a>二、python的xmindparser模块常用方法</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> xmindparser<span class="token comment" spellcheck="true"># xmindparser配置</span>xmindparser<span class="token punctuation">.</span>config <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">'showTopicId'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#是否展示主题ID</span>            <span class="token string">'hideEmptyValue'</span><span class="token punctuation">:</span> <span class="token boolean">True</span>， <span class="token comment" spellcheck="true">#是否隐藏空值</span>            <span class="token string">'showStructure'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#是否展示结构值</span>            <span class="token string">'showRelationship'</span><span class="token punctuation">:</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true">#是否展示节点关系</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>filePath <span class="token operator">=</span> r<span class="token string">'/文件路径/cyTest.xmind'</span>data_json <span class="token operator">=</span> xmindparser<span class="token punctuation">.</span>xmind_to_json<span class="token punctuation">(</span>filePath<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#解析成json数据类型</span>data_dcit <span class="token operator">=</span> xmindparser<span class="token punctuation">.</span>xmind_to_dict<span class="token punctuation">(</span>filePath<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#解析成dict数据类型 - 常用</span>data_xml <span class="token operator">=</span> xmindparser<span class="token punctuation">.</span>xmind_to_xml<span class="token punctuation">(</span>filePath<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#解析成xml数据类型 </span><span class="token comment" spellcheck="true"># 解析到文件</span>file_json <span class="token operator">=</span> xmindparser<span class="token punctuation">.</span>xmind_to_file<span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">'json'</span><span class="token punctuation">)</span>file_xml <span class="token operator">=</span> xmindparser<span class="token punctuation">.</span>xmind_to_file<span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">'xml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#[&amp;#123;'title': '画布 1', 'topic': &amp;#123;'title': '中心主题', 'topics': [&amp;#123;'title': '分支主题 1', 'note': '备注一', 'makers': ['priority-1', 'tag-red', 'smiley-laugh', 'task-done'], 'labels': ['标签一','标签二'], 'topics': [&amp;#123;'title': '子主题 1', 'makers': ['flag-red']&amp;#125;, &amp;#123;'title': '子主题 2'&amp;#125;]&amp;#125;, &amp;#123;'title': '分支主题 2', 'note': '备注二', 'makers': ['priority-2', 'tag-orange', 'smiley-cry', 'task-start'], 'labels': ['标签二'], 'link': 'http://www.baidu.com', 'topics': [&amp;#123;'title': '子主题 3'&amp;#125;]&amp;#125;]&amp;#125;, 'structure': 'org.xmind.ui.map.unbalanced'&amp;#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="三、公司的xmind用例结构"><a href="#三、公司的xmind用例结构" class="headerlink" title="三、公司的xmind用例结构"></a>三、公司的xmind用例结构</h5><img src="C:\Users\86183\AppData\Roaming\Typora\typora-user-images\image-20211111194307394.png" alt="image-20211111194307394" style="zoom:200%;" /><p>一级主题，作为class名，所以尽量用首字母大写的英文单次（必须英文字母或下划线开头、字母/数字/下划线组成，如果有其他字符会被替换为”_”）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">to_safe_name</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> str<span class="token punctuation">(</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"[^a-zA-Z0-9_]+"</span><span class="token punctuation">,</span> <span class="token string">"_"</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="四、框架中读取xmind接口测试数据的代码解析"><a href="#四、框架中读取xmind接口测试数据的代码解析" class="headerlink" title="四、框架中读取xmind接口测试数据的代码解析"></a>四、框架中读取xmind接口测试数据的代码解析</h5><p>这一部门的代码我全部copy到下面了，因为自己之前ddt没有用过xmind来作为数据载体，所以手写了一遍去理解xmind模板为什么要这么写，觉得太长的话就直接看最后函数把接口数据整理成什么样的格式就行。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> xmindparser <span class="token keyword">import</span> xmind_to_dict<span class="token keyword">import</span> jsonHOST_TAG_CHOICE <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"mk"</span><span class="token punctuation">,</span> <span class="token string">"qw"</span><span class="token punctuation">,</span> <span class="token string">"bill"</span><span class="token punctuation">,</span> <span class="token string">"qyapi"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 对应 host_&lt;mk/qw></span>PRIORITY_TAG_CHOICE <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"critical"</span><span class="token punctuation">,</span> <span class="token string">"blocker"</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">ReadXmind</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""读取xmind内容，返回字典列表（list[dict1,dict2]）"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> file_path<span class="token punctuation">,</span> canvas<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>file_path <span class="token operator">=</span> file_path        self<span class="token punctuation">.</span>canvas <span class="token operator">=</span> canvas        self<span class="token punctuation">.</span>xmind_dict_list <span class="token operator">=</span> xmind_to_dict<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_canvas_name_list</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''遍历xmind文件的每一个画布，得到全部画布的名称装成列表 ['画布 1', '画布 2']，但是如果传入了canvas，就不重新读直接return'''</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>canvas<span class="token punctuation">]</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>canvas <span class="token keyword">else</span> <span class="token punctuation">[</span>cv<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> cv <span class="token keyword">in</span> self<span class="token punctuation">.</span>xmind_dict_list<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">get_canvas_topic</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> canvas<span class="token operator">=</span><span class="token string">"画布 1"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        根据初始指定的画布名称（对应于excel的sheet表），返回该画布的接口数据        :return: &amp;#123;'title': '画布中心主题', 'topics': [&amp;#123;接口1信息&amp;#125;,&amp;#123;接口2信息&amp;#125;,...]&amp;#125; 此时title为画布 1 的中心主题 BillTrailSettingApi        """</span>        <span class="token keyword">for</span> cv <span class="token keyword">in</span> self<span class="token punctuation">.</span>xmind_dict_list<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#遍历每一个画布</span>            <span class="token keyword">if</span> cv<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span> <span class="token operator">==</span> canvas<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#如果画布名==传入的画布名参数</span>                <span class="token keyword">return</span> cv<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'topic'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#return画布下的全部接口[&amp;#123;接口1信息&amp;#125;,&amp;#123;接口2信息&amp;#125;,...]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Xmind中画布&lt;&amp;#123;&amp;#125;>不存在!"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_canvas_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> canvas<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        获取画布内所有API-CASE信息        :return: canvas_data        case_dict 字典：存放一个用例的信息，eg用例名event_001、用例描述desc等        api_dict 字典：存放一个接口的信息，eg接口名api_name、依赖depends、所有用例test_case_list [&amp;#123;case_dict&amp;#125;,&amp;#123;case_dict&amp;#125;,...]        api_case_dict_list 数组：存放一个画布的所有接口信息，[&amp;#123;api_dict&amp;#125;,&amp;#123;api_dict&amp;#125;,...]        canvas_data 字典：存放一个画布的信息，&amp;#123;'desc': '画布 1', 'module': 'BillTrailSettingApi', 'api_case_list':[&amp;#123;api_dict&amp;#125;,&amp;#123;api_dict&amp;#125;,...]&amp;#125;         """</span>        canvas_data <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125; #dict 存放：画布名、中心主题、api_case_list接口列表</span>        api_case_dict_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#list 存放：api_dict</span>        canvas_topic <span class="token operator">=</span> self<span class="token punctuation">.</span>get_canvas_topic<span class="token punctuation">(</span>canvas<span class="token punctuation">)</span>        module_name <span class="token operator">=</span> canvas_topic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span>        canvas_data<span class="token punctuation">[</span><span class="token string">'desc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> canvas <span class="token comment" spellcheck="true">#画布名</span>        canvas_data<span class="token punctuation">[</span><span class="token string">'module'</span><span class="token punctuation">]</span> <span class="token operator">=</span> module_name <span class="token comment" spellcheck="true">#中心主题 BillTrailSettingApi</span>        api_list <span class="token operator">=</span> canvas_topic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'topics'</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#接口列表 [&amp;#123;接口1信息&amp;#125;,&amp;#123;接口2信息&amp;#125;,...]</span>        <span class="token keyword">for</span> api <span class="token keyword">in</span> api_list<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#遍历每一个接口</span>            api_dict <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125; #存放：接口信息</span>            api_name <span class="token operator">=</span> api<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> api<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">""</span> <span class="token comment" spellcheck="true">#api名 event</span>            api_desc <span class="token operator">=</span> api<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'note'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> api<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'note'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">""</span> <span class="token comment" spellcheck="true">#描述 新增事件</span>            api_labels <span class="token operator">=</span> api<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'labels'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#标签 depends、host、sleep</span>            api_dict<span class="token punctuation">[</span><span class="token string">'api_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> api_name            api_dict<span class="token punctuation">[</span><span class="token string">'api_desc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> api_desc            api_dict<span class="token punctuation">[</span><span class="token string">'depends'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># depends 依赖标签</span>            api_dict<span class="token punctuation">[</span><span class="token string">'sleep'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># sleep 标签</span>            api_dict<span class="token punctuation">[</span><span class="token string">'skipif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span>  <span class="token comment" spellcheck="true"># skipif 标签</span>            host_tag <span class="token operator">=</span> <span class="token string">"host_"</span> <span class="token operator">+</span> HOST_TAG_CHOICE<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># host 标签 默认为qw</span>            <span class="token comment" spellcheck="true"># 如果有接口数据有标签，重新赋值，否则就是上述空值和默认值</span>            <span class="token keyword">if</span> api_labels<span class="token punctuation">:</span>                <span class="token keyword">for</span> alb <span class="token keyword">in</span> api_labels<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#遍历每个标签 'labels': ['host=qw', 'depends=addUser', 'sleep=2', 'skipif=skip', 'name=name']</span>                    lb_dps <span class="token operator">=</span> alb<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"depends="</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#返回['host=qw'] 子字符串在父字符串中不存在时，返回整个父字符串作为列表的元素</span>                    lb_dps2 <span class="token operator">=</span> alb<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"name="</span><span class="token punctuation">)</span>                    lb_sleep <span class="token operator">=</span> alb<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"sleep="</span><span class="token punctuation">)</span>                    lb_skipif <span class="token operator">=</span> alb<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"skipif="</span><span class="token punctuation">)</span>                    lb_host <span class="token operator">=</span> alb<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"host="</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#返回['','qw']</span>                    <span class="token keyword">if</span> len<span class="token punctuation">(</span>lb_dps<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                        api_dict<span class="token punctuation">[</span><span class="token string">'depends'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>lb_dps<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> len<span class="token punctuation">(</span>lb_dps2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                        api_dict<span class="token punctuation">[</span><span class="token string">'depends'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>lb_dps2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> len<span class="token punctuation">(</span>lb_sleep<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                        api_dict<span class="token punctuation">[</span><span class="token string">'sleep'</span><span class="token punctuation">]</span> <span class="token operator">=</span> int<span class="token punctuation">(</span>lb_sleep<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> len<span class="token punctuation">(</span>lb_skipif<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                        api_dict<span class="token punctuation">[</span><span class="token string">'skipif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> lb_skipif<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                    <span class="token keyword">if</span> len<span class="token punctuation">(</span>lb_host<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">and</span> lb_host<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">in</span> HOST_TAG_CHOICE<span class="token punctuation">:</span>                        host_tag <span class="token operator">=</span> <span class="token string">"host_"</span> <span class="token operator">+</span> lb_host<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            api_dict<span class="token punctuation">[</span><span class="token string">'host_tag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> host_tag            api_dict<span class="token punctuation">[</span><span class="token string">'test_case_list'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#存放：该接口的全部用例</span>            api_detail <span class="token operator">=</span> api<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'topics'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            path <span class="token operator">=</span> api_detail<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token string">""</span> <span class="token comment" spellcheck="true">#接口路径</span>            rq <span class="token operator">=</span> api_detail<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'topics'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            method <span class="token operator">=</span> rq<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token string">""</span> <span class="token comment" spellcheck="true">#请求方法</span>            api_dict<span class="token punctuation">[</span><span class="token string">'path'</span><span class="token punctuation">]</span> <span class="token operator">=</span> path            api_dict<span class="token punctuation">[</span><span class="token string">'method'</span><span class="token punctuation">]</span> <span class="token operator">=</span> method            case_cf_list <span class="token operator">=</span> rq<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'topics'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#一个接口的多个条用例 [&amp;#123;用例1&amp;#125;,&amp;#123;用例2&amp;#125;,...]</span>            <span class="token keyword">if</span> api_name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  #被注释掉的接口，不解析用例参数                <span class="token keyword">continue</span>            <span class="token keyword">for</span> idx<span class="token punctuation">,</span> case <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>case_cf_list<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#enumerate将可遍历的数据对象组合为一个索引序列</span>                <span class="token keyword">if</span> case<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  #被注释掉的用例，不解析                    <span class="token keyword">continue</span>                case_dict <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125; #存放：用例信息</span>                case_labels <span class="token operator">=</span> case<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'labels'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 用例描述下的标签</span>                case_dict<span class="token punctuation">[</span><span class="token string">'module'</span><span class="token punctuation">]</span> <span class="token operator">=</span> module_name  <span class="token comment" spellcheck="true"># 模块名</span>                case_dict<span class="token punctuation">[</span><span class="token string">'api_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> api_name  <span class="token comment" spellcheck="true"># api名</span>                case_dict<span class="token punctuation">[</span><span class="token string">'host_tag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> host_tag  <span class="token comment" spellcheck="true"># host_qw / host_mk</span>                case_dict<span class="token punctuation">[</span><span class="token string">'api_desc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> api_desc  <span class="token comment" spellcheck="true"># api描述</span>                case_dict<span class="token punctuation">[</span><span class="token string">'depends'</span><span class="token punctuation">]</span> <span class="token operator">=</span> api_dict<span class="token punctuation">[</span><span class="token string">'depends'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># api依赖</span>                case_dict<span class="token punctuation">[</span><span class="token string">'sleep'</span><span class="token punctuation">]</span> <span class="token operator">=</span> api_dict<span class="token punctuation">[</span><span class="token string">'sleep'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># api sleep</span>                case_dict<span class="token punctuation">[</span><span class="token string">'skipif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> api_dict<span class="token punctuation">[</span><span class="token string">'skipif'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># api skipif</span>                case_dict<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token string">"&amp;#123;api_name&amp;#125;_"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  # case名 zfill填充字符串为三位 event_001 event_002                case_dict<span class="token punctuation">[</span><span class="token string">'desc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> case<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 用例描述</span>                case_dict<span class="token punctuation">[</span><span class="token string">'priority'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span>  <span class="token comment" spellcheck="true"># 用例优先级</span>                <span class="token keyword">if</span> case_labels<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#标签为 用例严重程度</span>                    <span class="token keyword">for</span> clb <span class="token keyword">in</span> case_labels<span class="token punctuation">:</span>                        <span class="token keyword">if</span> clb <span class="token keyword">in</span> PRIORITY_TAG_CHOICE<span class="token punctuation">:</span>                            case_dict<span class="token punctuation">[</span><span class="token string">'priority'</span><span class="token punctuation">]</span> <span class="token operator">=</span> clb                            <span class="token keyword">break</span>                case_dict<span class="token punctuation">[</span><span class="token string">'method'</span><span class="token punctuation">]</span> <span class="token operator">=</span> method  <span class="token comment" spellcheck="true"># method: get/post/...</span>                case_dict<span class="token punctuation">[</span><span class="token string">'path'</span><span class="token punctuation">]</span> <span class="token operator">=</span> path  <span class="token comment" spellcheck="true"># api path</span>                case_input_output <span class="token operator">=</span> case<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'topics'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#入参及后面的子主题</span>                case_dict<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> case_input_output<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#入参</span>                output_set_vars <span class="token operator">=</span> case_input_output<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'topics'</span><span class="token punctuation">)</span>                str_expect <span class="token operator">=</span> output_set_vars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#期望结果</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    case_dict<span class="token punctuation">[</span><span class="token string">'expect'</span><span class="token punctuation">]</span> <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>str_expect<span class="token punctuation">,</span> strict<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#xmind读出来的期望结果str转换成字典</span>                <span class="token comment" spellcheck="true"># 自定义异常 定位到主题名-api名-期望结果</span>                <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"API:&amp;#123;0&amp;#125;->&amp;#123;1&amp;#125;\nJSON Content:&amp;#123;2&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>module_name<span class="token punctuation">,</span> api_name<span class="token punctuation">,</span> str_expect<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">raise</span> e                case_dict<span class="token punctuation">[</span><span class="token string">'set_vars'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>output_set_vars<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#期望结果有两个主题 即设置了全局的变量</span>                    str_set_vars <span class="token operator">=</span> output_set_vars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#拿到变量'&amp;#123;"customerId": "$..data.id"&amp;#125;'</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                        case_dict<span class="token punctuation">[</span><span class="token string">'set_vars'</span><span class="token punctuation">]</span> <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>str_set_vars<span class="token punctuation">,</span> strict<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 需要设置为全局的变量，key-value， key为保存变量名，value为字段查询名或jsonpath</span>                    <span class="token comment" spellcheck="true">#自定义异常 变量写法有问题 定位到主题名-api名-变量</span>                    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"API:&amp;#123;0&amp;#125;->&amp;#123;1&amp;#125;\nJSON Content:&amp;#123;2&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>module_name<span class="token punctuation">,</span> api_name<span class="token punctuation">,</span> str_set_vars<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">raise</span> e                api_dict<span class="token punctuation">[</span><span class="token string">'test_case_list'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>dict<span class="token punctuation">(</span>case_dict<span class="token punctuation">)</span><span class="token punctuation">)</span>            api_case_dict_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>api_dict<span class="token punctuation">)</span>        canvas_data<span class="token punctuation">[</span><span class="token string">'api_case_list'</span><span class="token punctuation">]</span> <span class="token operator">=</span> api_case_dict_list        <span class="token keyword">return</span> canvas_data    <span class="token keyword">def</span> <span class="token function">get_xmind_data</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''读xmind每一个画布的数据 [&amp;#123;canvas_data&amp;#125;,&amp;#123;canvas_data&amp;#125;,...]'''</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>get_canvas_data<span class="token punctuation">(</span>cv<span class="token punctuation">)</span> <span class="token keyword">for</span> cv <span class="token keyword">in</span> self<span class="token punctuation">.</span>get_canvas_name_list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''case_dict的值，之后会作为pytest的传参&amp;#123;'module': 'BillTrailSettingApi', 'api_name': 'event', 'host_tag': 'host_qw', 'api_desc': '新增事件', 'depends': ['addUser', 'name'], 'sleep': 2, 'skipif': 'skip', 'name': 'event_001', 'desc': '异常值（新增事件参数为异常值校验）', 'priority': 'critical', 'method': 'POST', 'path': '/bill-trail-settings-api/trail/event', 'data': '&amp;#123;"eventIcon": "事件图标", "eventName": "事件名称", "eventTopic": "事件", "fieldList": "事件内容列表", "id": "事件ID，编辑时必传", "operator": "操作人", "remark": "备注", "trailId": "旅程项目ID"&amp;#125;', 'expect': &amp;#123;'code': 8401, 'msg': '参数不能为空', 'data': None&amp;#125;, 'set_vars': &amp;#123;'customerId': '$..data.id'&amp;#125;&amp;#125;'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个点：因为之前没找到完整的xmind模板，不明白为什么api_name主题下的标签，depends=  和 name=  要存在一个数组depends中，最后悟了。方便dependency去传参，这样没有依赖，却需要别名给其他接口依赖时，depends传入空数组[]。妙！（dict的value存数组也完全ok）</p><pre class="line-numbers language-python"><code class="language-python">dp_name<span class="token punctuation">,</span> depends <span class="token operator">=</span> None<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> dp <span class="token keyword">in</span> api_data<span class="token punctuation">[</span><span class="token string">'depends'</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#["addEevent","event"] api_name=event</span>    <span class="token keyword">if</span> dp <span class="token operator">==</span> api_name<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#如果apiname是当前自己接口的名字，作为别名</span>        dp_name <span class="token operator">=</span> api_name        <span class="token keyword">continue</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        depends<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token keyword">if</span> dp_name <span class="token operator">or</span> len<span class="token punctuation">(</span>depends<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"dependency: &amp;#123;&amp;#125; : name=&amp;#123;&amp;#125;,depends=&amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>func_name<span class="token punctuation">,</span> dp_name<span class="token punctuation">,</span> depends<span class="token punctuation">)</span><span class="token punctuation">)</span>    attrs<span class="token punctuation">[</span>func_name<span class="token punctuation">]</span> <span class="token operator">=</span> pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>dependency<span class="token punctuation">(</span>name<span class="token operator">=</span>dp_name<span class="token punctuation">,</span> depends<span class="token operator">=</span>depends<span class="token punctuation">,</span> scope<span class="token operator">=</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>attrs<span class="token punctuation">[</span>func_name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># skip以#开头的测试用例</span><span class="token keyword">if</span> api_name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span> <span class="token operator">or</span> api_desc<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    attrs<span class="token punctuation">[</span>func_name<span class="token punctuation">]</span> <span class="token operator">=</span> pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>skip<span class="token punctuation">(</span>reason<span class="token operator">=</span><span class="token string">'测试用例被注释#'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>attrs<span class="token punctuation">[</span>func_name<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="五、接口脚本自动生成的大概原理和过程"><a href="#五、接口脚本自动生成的大概原理和过程" class="headerlink" title="五、接口脚本自动生成的大概原理和过程"></a>五、接口脚本自动生成的大概原理和过程</h5><p>所用技术：文件写入脚本、compile()内置函数编译、metaclass对子类的改写、装饰器与闭包函数，和一些杂七杂八的</p><p>上面写到了DDT的测试数据xmind载体的解析，拿到了参数之后传入pytest即可（题外话pytest两种传参方式，fixture或者parametrize，一定要知晓参数传递过程的），接下来写一下作者大大将参数融进pytest的过程，可能自己理解的比较简陋，有大佬指点的话感激涕零~</p><p>第一步：构建用例脚本，就是with open去写就ok了，主要写入的是：导包的内容、类模板（包括脚本名称和测试数据），compile后生成脚本的类如下所示~</p><pre class="line-numbers language-python"><code class="language-python">@allure<span class="token punctuation">.</span>feature<span class="token punctuation">(</span><span class="token string">'画布 1'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestBillTrailSettingApi</span><span class="token punctuation">(</span>PreRequest<span class="token punctuation">,</span> metaclass<span class="token operator">=</span>CaseMetaClass<span class="token punctuation">)</span><span class="token punctuation">:</span>    test_py <span class="token operator">=</span> <span class="token string">"test_bill-trail-settings-api.py"</span>    test_cases_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;接口1&amp;#125;,&amp;#123;接口2&amp;#125;,...]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>PreRequest这个父类就是一些请求前的操作，比如拿变量值、sessionId，就不展开了。</p><p>第二步：compile生成函数对象，用例的模板字符串参数传入api_name，来动态生成接口函数。模板有很多执行时的细节操作，比如skip、allure敏捷标记等，不详细展开了，贴一下生成的函数代码。如下~</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">create_function</span><span class="token punctuation">(</span>function_express<span class="token punctuation">,</span> namespace<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""动态生成函数对象"""</span>    <span class="token keyword">if</span> namespace <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>        builtins<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>update<span class="token punctuation">(</span>namespace<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 哇 全部添加到内建模块中</span>    module_code <span class="token operator">=</span> compile<span class="token punctuation">(</span>function_express<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'exec'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 根据模板(字符串)生成可执行的代码，mode为exec（源包含多个python语句时使用）</span>    function_code <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> module_code<span class="token punctuation">.</span>co_consts <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>x<span class="token punctuation">,</span> types<span class="token punctuation">.</span>CodeType<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#注意isinstance()会考虑继承关系 所以这里用type()不行哟！</span>    <span class="token keyword">return</span> types<span class="token punctuation">.</span>FunctionType<span class="token punctuation">(</span>function_code<span class="token punctuation">,</span> builtins<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#返回内存地址&lt;function test_001_event at 0x05A0AA98></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步：重点来了！！写一个metaclass，来修改子类的属性或方法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CaseMetaClass</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># print("此时new的对象是",cls.__name__) #CaseMetaClass</span>        test_cases_data <span class="token operator">=</span> attrs<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'test_cases_data'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 字典的pop有返回值 拿到一个画布的接口数据[&amp;#123;接口1&amp;#125;,&amp;#123;接口2&amp;#125;,...]</span>        <span class="token keyword">for</span> idx<span class="token punctuation">,</span> api_data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>test_cases_data<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> is_contains_chinese<span class="token punctuation">(</span>api_data<span class="token punctuation">[</span><span class="token string">'api_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token operator">not</span> is_contains_chinese<span class="token punctuation">(</span>api_data<span class="token punctuation">[</span><span class="token string">'api_desc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#检查了一手api_name是否包含中文，decs为英文，是就互换一下</span>                api_data<span class="token punctuation">[</span><span class="token string">'api_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> api_data<span class="token punctuation">[</span><span class="token string">'api_desc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> api_data<span class="token punctuation">[</span><span class="token string">'api_desc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> api_data<span class="token punctuation">[</span><span class="token string">'api_name'</span><span class="token punctuation">]</span>            api_name <span class="token operator">=</span> api_data<span class="token punctuation">[</span><span class="token string">'api_name'</span><span class="token punctuation">]</span>            api_name <span class="token operator">=</span> <span class="token string">""</span> <span class="token keyword">if</span> api_name <span class="token keyword">is</span> None <span class="token keyword">else</span> api_name <span class="token comment" spellcheck="true">#又让api_name兼容一手None值</span>            api_desc <span class="token operator">=</span> api_data<span class="token punctuation">[</span><span class="token string">'api_desc'</span><span class="token punctuation">]</span>            case_list <span class="token operator">=</span> api_data<span class="token punctuation">[</span><span class="token string">'test_case_list'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#一个接口的用例列表 [&amp;#123;case_dict&amp;#125;,&amp;#123;case_dict&amp;#125;,...]</span>            func_name <span class="token operator">=</span> <span class="token string">'test_&amp;#123;0&amp;#125;_&amp;#123;1&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> to_safe_name<span class="token punctuation">(</span>api_name<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> #api_name<span class="token operator">=</span>event格式统一成 test_001_event            function <span class="token operator">=</span> create_function<span class="token punctuation">(</span>func_template<span class="token punctuation">.</span>format<span class="token punctuation">(</span>func_name<span class="token operator">=</span>func_name<span class="token punctuation">)</span><span class="token punctuation">,</span>                                       namespace<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                                           <span class="token string">'pytest'</span><span class="token punctuation">:</span> pytest<span class="token punctuation">,</span>                                           <span class="token string">'allure'</span><span class="token punctuation">:</span> allure<span class="token punctuation">,</span>                                           <span class="token string">'logger'</span><span class="token punctuation">:</span> logger<span class="token punctuation">,</span>                                           <span class="token string">'is_contains_chinese'</span><span class="token punctuation">:</span> is_contains_chinese<span class="token punctuation">,</span>                                           <span class="token string">'sleep_progressbar'</span><span class="token punctuation">:</span> sleep_progressbar<span class="token punctuation">,</span>                                           <span class="token string">'methodcaller'</span><span class="token punctuation">:</span> methodcaller<span class="token punctuation">,</span>                                           <span class="token string">'setup'</span><span class="token punctuation">:</span> setup<span class="token punctuation">,</span>                                           <span class="token string">'callback'</span><span class="token punctuation">:</span> callback<span class="token punctuation">,</span>                                       <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;)</span>            ids <span class="token operator">=</span> <span class="token punctuation">[</span>str<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>case_list<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 接口有多少条用例 001 002 003...</span>            <span class="token comment" spellcheck="true"># 哇 这个写法又学习了，返回的function内存地址后，直接手工闭包！和用parametrize装饰器一样哟，nice！</span>            attrs<span class="token punctuation">[</span>func_name<span class="token punctuation">]</span> <span class="token operator">=</span> pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize<span class="token punctuation">(</span><span class="token string">'case_data'</span><span class="token punctuation">,</span> case_list<span class="token punctuation">,</span> ids<span class="token operator">=</span>ids<span class="token punctuation">)</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span>            dp_name<span class="token punctuation">,</span> depends <span class="token operator">=</span> None<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> dp <span class="token keyword">in</span> api_data<span class="token punctuation">[</span><span class="token string">'depends'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> dp <span class="token operator">==</span> api_name<span class="token punctuation">:</span>                    dp_name <span class="token operator">=</span> api_name                    <span class="token keyword">continue</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    depends<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dp<span class="token punctuation">)</span>            <span class="token keyword">if</span> dp_name <span class="token operator">or</span> len<span class="token punctuation">(</span>depends<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"dependency: &amp;#123;&amp;#125; : name=&amp;#123;&amp;#125;,depends=&amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>func_name<span class="token punctuation">,</span> dp_name<span class="token punctuation">,</span> depends<span class="token punctuation">)</span><span class="token punctuation">)</span>                attrs<span class="token punctuation">[</span>func_name<span class="token punctuation">]</span> <span class="token operator">=</span> pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>dependency<span class="token punctuation">(</span>name<span class="token operator">=</span>dp_name<span class="token punctuation">,</span> depends<span class="token operator">=</span>depends<span class="token punctuation">,</span> scope<span class="token operator">=</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>attrs<span class="token punctuation">[</span>func_name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#装饰一手 依赖</span>            <span class="token keyword">if</span> api_name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span> <span class="token operator">or</span> api_desc<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                attrs<span class="token punctuation">[</span>func_name<span class="token punctuation">]</span> <span class="token operator">=</span> pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>skip<span class="token punctuation">(</span>reason<span class="token operator">=</span><span class="token string">'测试用例被注释#'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>attrs<span class="token punctuation">[</span>func_name<span class="token punctuation">]</span><span class="token punctuation">)</span> #再装饰一手skip 基本齐活，坐等调用func_name，pytest就嗖嗖运行起来惹，妙！            <span class="token comment" spellcheck="true"># 集成allure装饰器 这个不知道是不是作者大大觉得模块下面展示case就行了，再打story好懒得挨个点开喔，我是这么想的~</span>            <span class="token comment" spellcheck="true"># attrs[func_name] = allure.story(api_data['api_desc'])(attrs[func_name])</span>        <span class="token keyword">return</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一些点：</p><p>1、pytest在收集用例时，按照test_ 开头去找，自动生成的脚本就是test_ 文件名.py，测试用例集按照类来展示一个xmind文件每个画布的接口用例，比如上面的class TestBillTrailSettingApi()，pytest执行时按顺序去解析类，会先调用CaseMetaClass.__ new __()来创建类，所以CaseMetaClass可以借助attrs来改变TestBillTrailSettingApi()类的属性或方法。</p><p>2、metaclass我的理解是the class of the class，类的类，它new出来的是一个类，而非实例。自定义的CaseMetaClass通过new方法返回子类的name、bases、attrs即类名、继承的集合、属性方法。这是meclass与继承不一样层面的原因，子类继承父类除私有属性和方法外的特性，对父类进行重写，但父类无法操纵子类，借用metaclass，就可以对子类进行操作，像装饰器一样去【动态修改】。（关于metaclass这篇还可以：<a href="https://www.cnblogs.com/yssjun/p/9832526.html?ivk_sa=1024320u%EF%BC%8C%E5%A4%9A%E5%A4%9Adebug%E8%AF%95%E4%B8%80%E8%AF%95%E7%90%86%E8%A7%A3%E6%9B%B4%E5%BF%AB%EF%BC%89">https://www.cnblogs.com/yssjun/p/9832526.html?ivk_sa=1024320u，多多debug试一试理解更快）</a></p><p>3、在上述代码的new方法中，通过“手工闭包”来形成装饰器，将函数内存地址传给pytest.mark.parametrize()，等同于平常使用@pytest.mark.parametrize()。下面写了一个最最最简单的闭包函数，当然还有装饰方法、装饰器传参等各种情况就不细说了。只是简单举个栗子~</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"before"</span><span class="token punctuation">)</span>            func<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"after"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> inner        @outer    <span class="token keyword">def</span> <span class="token function">cytest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"陈语测试"</span><span class="token punctuation">)</span>    cytest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#装饰后调用原函数</span>        <span class="token comment" spellcheck="true">#这等价于上面的装饰</span>    cytest <span class="token operator">=</span> outer<span class="token punctuation">(</span>cytest<span class="token punctuation">)</span>    cytest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#调用闭包函数inner</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、当xmind的一个画布由多个接口，new方法在for循环中遍历每个接口，根据接口api_name来使子类动态生成多个function，即动态生成了多个接口用例集了，如下图。</p><p><img src="C:\Users\86183\AppData\Roaming\Typora\typora-user-images\image-20211120151106113.png" alt="image-20211120151106113"></p><h5 id="六、写不动了"><a href="#六、写不动了" class="headerlink" title="六、写不动了"></a>六、写不动了</h5><p>以上就是大致把数据流看了一下，做的笔记。</p><p>这样run_main主入口脚本的运行过程就可以串起来啦</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式版本控制系统</title>
      <link href="/2020/10/20/undefined.html"/>
      <url>/2020/10/20/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="第1天-分布式版本控制系统"><a href="#第1天-分布式版本控制系统" class="headerlink" title="第1天-分布式版本控制系统"></a>第1天-分布式版本控制系统</h1><h2 id="一、Git、Github、Gitlab-的区别"><a href="#一、Git、Github、Gitlab-的区别" class="headerlink" title="一、Git、Github、Gitlab 的区别"></a>一、Git、Github、Gitlab 的区别</h2><p>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><p>Github是在线的基于Git的代码托管服务。 GitHub是2008年由Ruby on Rails编写而成。GitHub同时提供付费账户和免费账户。这两种账户都可以创建公开的代码仓库，只有付费账户可以创建私有的代码仓库。 Gitlab解决了这个问题, 可以在上面创建免费的私人repo。 </p><p>git            是一套软件 可以做本地私有仓库</p><p>github   本身是一个代码托管网站   公有和私有仓库(收费)   不能做本地私有仓库</p><p>gitlab     本身也是一个代码托管的网站 功能上和github没有区别   公有和私有仓库（免费）  可以部署本地私有仓库</p><h2 id="二、Git-与-SVN-区别"><a href="#二、Git-与-SVN-区别" class="headerlink" title="二、Git 与 SVN 区别"></a>二、Git 与 SVN 区别</h2><p>GIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。</p><p>如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。</p><p><strong>Git 与 SVN 区别</strong></p><ol><li>Git是分布式的，svn不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。</li><li>GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。</li><li>GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。</li><li>GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。</li><li>GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li></ol><p>git   是分布式的版本控制器  没有客户端和服务器端的概念</p><p>svn 它是C/S结构的版本控制器  有客户端和服务器端  服务器如果宕机而且代码没有备份的情况下  完整代码就会丢失</p><h2 id="三、部署Git-服务"><a href="#三、部署Git-服务" class="headerlink" title="三、部署Git 服务"></a>三、部署Git 服务</h2><p><strong>创建git仓库</strong></p><p>git-server上的操作：</p><pre><code>[root@qfedu.com ~]# yum install git git-core gitweb -y[root@qfedu.com ~]# useradd git[root@qfedu.com ~]# passwd git[root@qfedu.com ~]# mkdir /git-root/[root@qfedu.com ~]# cd /git-root/[root@qfedu.com git-root]# git init --bare shell.gitInitialized empty Git repository in /git-root/shell.git/注意：git init 和 git init --bare 的区别:使用--bare选项时,不再生成.git目录,而是只生成.git目录下面的版本历史记录文件,这些版本历史记录文件也不再存放在.git目录下面,而是直接存放在版本库的根目录下面.用&quot;git init&quot;初始化的版本库用户也可以在该目录下执行所有git方面的操作。但别的用户在将更新push上来的时候容易出现冲突。使用”git init --bare”方法创建一个所谓的裸仓库，之所以叫裸仓库是因为这个仓库只保存git历史提交的版本信息，而不允许用户在上面进行各种git操作，如果你硬要操作的话，只会得到下面的错误（”This operation must be run in a work tree”）这个就是最好把远端仓库初始化成bare仓库的原因[root@qfedu.com git-root]# chown -R git:git shell.git</code></pre><p><strong>git仓库测试</strong></p><p>git-client上的操作：</p><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# ssh-keygen[root@qfedu.com ~]# ssh-copy-id git@192.168.1.178[root@qfedu.com shell]# git config --global user.email "you@example.com"[root@qfedu.com shell]# git config --global user.name "Your Name"[root@qfedu.com ~]# git clone git@192.168.1.178:/git-root/shell.git[root@qfedu.com ~]# lsrh  shell[root@qfedu.com ~]# cd shell/[root@qfedu.com shell]# vim test.sh[root@qfedu.com shell]# git add test.sh[root@qfedu.com shell]# git commit -m 'first commit'[master (root-commit) 33c5fbf] first commit 1 file changed, 2 insertions(+) create mode 100644 test1.sh[root@qfedu.com shell]# git push origin masterCounting objects: 3, done.Writing objects: 100% (3/3), 230 bytes | 0 bytes/s, done.Total 3 (delta 0), reused 0 (delta 0)To git@192.168.1.178:/git-root/shell.git * [new branch]      master -> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、Git工作流程"><a href="#四、Git工作流程" class="headerlink" title="四、Git工作流程"></a>四、Git工作流程</h2><p>一般工作流程如下：</p><ul><li><p>克隆 Git 资源作为工作目录。</p></li><li><p>在克隆的资源上添加或修改文件。 </p></li><li><p>如果其他人修改了，你可以更新资源。</p></li><li><p>在提交前查看修改。</p></li><li><p>提交修改。</p></li><li><p>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</p><p>　　Git 的工作流程示意图：</p></li></ul><p><img src="assets/805129-20160710102658467-1520443599.png" alt="img"></p><h2 id="五、Git基本概念"><a href="#五、Git基本概念" class="headerlink" title="五、Git基本概念"></a>五、Git基本概念</h2><ul><li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li><li><strong>暂存区：</strong>英文叫stage, 或index。一般存放在”git目录”下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li><li><strong>版本库：</strong>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li></ul><p>　　工作区、版本库中的暂存区和版本库之间的关系的示意图：</p><p><img src="assets/805129-20160710103123608-1172715931.jpg" alt="img"></p><ul><li>　　图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage, index），标记为 “master” 的是 master 分支所代表的目录树。 </li></ul><ul><li>　　图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个”游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。 </li></ul><ul><li>　　图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下，里面包含了创建的各种对象及内容。 </li></ul><ul><li>　　当对工作区修改（或新增）的文件执行 “git add” 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。 </li></ul><ul><li>　　当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。 </li></ul><ul><li>　　当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。 </li></ul><ul><li>　　当执行 “git rm –cached <file>“ 命令时，会直接从暂存区删除文件，工作区则不做出改变。 </li></ul><ul><li>　　当执行 “git checkout .” 或者 “git checkout – <file>“ 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。 </li></ul><ul><li>　　当执行 “git checkout HEAD .” 或者 “git checkout HEAD <file>“ 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</li></ul><h2 id="六、Git-客户端安装使用"><a href="#六、Git-客户端安装使用" class="headerlink" title="六、Git 客户端安装使用"></a>六、Git 客户端安装使用</h2><h3 id="1、-Git-安装配置"><a href="#1、-Git-安装配置" class="headerlink" title="1、 Git 安装配置"></a>1、 Git 安装配置</h3><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel[root@qfedu.com ~]# yum -y install git git-all git-core[root@qfedu.com ~]# git --versiongit version 2.18.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2、Git-配置"><a href="#2、Git-配置" class="headerlink" title="2、Git 配置"></a>2、Git 配置</h3><p>Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。</p><p>这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</p><ul><li><code>/etc/gitconfig</code> 文件：系统中对所有用户都普遍适用的配置。若使用 <code>git config</code> 时用 <code>--system</code> 选项，读写的就是这个文件。</li><li><code>~/.gitconfig</code> 文件：用户目录下的配置文件只适用于该用户。若使用 <code>git config</code> 时用 <code>--global</code> 选项，读写的就是这个文件。</li><li>当前项目的 Git 目录中的配置文件（也就是工作目录中的 <code>.git/config</code> 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 <code>.git/config</code> 里的配置会覆盖 <code>/etc/gitconfig</code> 中的同名变量。</li></ul><h4 id="1、Git-用户信息"><a href="#1、Git-用户信息" class="headerlink" title="1、Git 用户信息"></a>1、Git 用户信息</h4><p>配置个人的用户名称和电子邮件地址：</p><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# git config --global user.name "qfedu"[root@qfedu.com ~]# git config --global user.email test@qq.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果用了 <strong>–global</strong> 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。</p><p>如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p><h4 id="2、文本编辑器"><a href="#2、文本编辑器" class="headerlink" title="2、文本编辑器"></a>2、文本编辑器</h4><p>设置Git默认使用的文本编辑器, 一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置</p><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# git config --global core.editor emacs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3、差异分析工具"><a href="#3、差异分析工具" class="headerlink" title="3、差异分析工具"></a>3、差异分析工具</h4><p>还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：</p><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# git config --global merge.tool vimdiff<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Git 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。</p><p>当然，你也可以指定使用自己开发的工具</p><h4 id="4、查看配置信息"><a href="#4、查看配置信息" class="headerlink" title="4、查看配置信息"></a>4、查看配置信息</h4><p>要检查已有的配置信息，可以使用 git config –list 命令：</p><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# git config --listhttp.postbuffer=2Muser.name=runoobuser.email=test@runoob.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。</p><p>这些配置我们也可以在 <strong>~/.gitconfig</strong> 或 <strong>/etc/gitconfig</strong> 看到，如下所示：</p><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# vim ~/.gitconfig <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示内容如下所示：</p><pre class="line-numbers language-shell"><code class="language-shell">[http]    postBuffer = 2M[user]    name = git    email = test@qfedu.com.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：</p><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# git config user.namegit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3、Git-使用"><a href="#3、Git-使用" class="headerlink" title="3、Git 使用"></a>3、Git 使用</h3><h4 id="1、ssh-链接"><a href="#1、ssh-链接" class="headerlink" title="1、ssh 链接"></a>1、ssh 链接</h4><p>客户机上产生公钥上传到gitlab的SSH-Keys里，git clone下载和git push上传都没问题，这种方式很安全</p><h4 id="2、http-链接（两种方式实现）"><a href="#2、http-链接（两种方式实现）" class="headerlink" title="2、http 链接（两种方式实现）"></a>2、http 链接（两种方式实现）</h4><h5 id="1、修改代码里的-git-config-文件添加登录用户名密码"><a href="#1、修改代码里的-git-config-文件添加登录用户名密码" class="headerlink" title="1、修改代码里的 .git/config 文件添加登录用户名密码"></a>1、修改代码里的 .git/config 文件添加登录用户名密码</h5><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# cd .git[root@qfedu.com ~]# cat config[core]repositoryformatversion = 0filemode = truebare = falselogallrefupdates = true[remote "origin"]fetch = +refs/heads/*:refs/remotes/origin/*url = http://username:password@qfedu.com@172.17.0.39:sauser/ansible.git[branch "master"]remote = originmerge = refs/heads/master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、-执行命令设置登录用户和密码"><a href="#2、-执行命令设置登录用户和密码" class="headerlink" title="2、 执行命令设置登录用户和密码"></a>2、 执行命令设置登录用户和密码</h5><pre class="line-numbers language-shell"><code class="language-shell"># cd到根目录，执行[root@qfedu.com ~]# git config --global credential.helper store  # 执行之后会在.gitconfig文件中多添加以下选项  [credential]                   helper = store# cd到项目目录，执行git pull命令，会提示输入账号密码。输完这一次以后就不再需要，并且会在根目录生成一个.git-credentials文件[root@qfedu.com ~]# git pull   Username for 'http://172.17.0.39:sauser/ansible.git':   xxxx@xxxx.com Password for 'https://xxxx@xxxx.com@172.17.0.39:sauser/ansible.git':[root@qfedu.com ~]# cat .git-credentials  https://Username:Password@qfedu.com.oschina.net# 之后pull/push代码都不再需要输入账号密码了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、设置身份验证"><a href="#3、设置身份验证" class="headerlink" title="3、设置身份验证"></a>3、设置身份验证</h4><p><strong>注意：</strong>设定本机用户名，绑定邮箱，让远程服务器知道机器的身份</p><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# git config --global user.name "user_name" [root@qfedu.com ~]# git config --global user.email "XXXXX@XX.com"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4、本地项目与远程服务器项目之间的交互"><a href="#4、本地项目与远程服务器项目之间的交互" class="headerlink" title="4、本地项目与远程服务器项目之间的交互"></a>4、本地项目与远程服务器项目之间的交互</h4><p>1、如果你没有最新的代码，希望从头开始</p><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# git clone git@XXX.git      # 这里是项目的地址（可从项目主页复制），将远程服务器的内容完全复制过来 [root@qfedu.com ~]# cd BGBInspector_V01        # clone 之后进入该项目的文件夹 [root@qfedu.com ~]# touch　README.md           # 新建readme文件 [root@qfedu.com ~]# git add README.md          # 将新的文件添加到git的暂存区 [root@qfedu.com ~]# git commit -m ‘Its note：add a readme file’ # 将暂存区的文件提交到某一个版本保存下来，并加上注释 [root@qfedu.com ~]# git push -u origin master  # 将本地的更改提交到远程服务器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、如果你已经有一个新版代码，希望直接把本地的代码替换到远程服务器</p><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# cd existing_folder          #进入代码存在的文件夹，或者直接在该文件夹打开[root@qfedu.com ~]# git init           # 初始化 [root@qfedu.com ~]# git remote add origin git@master:/git-test/shell.git  #添加远程项目"shell"库的地址（可从项目主页复制） ,前提是事先需要先在git远程服务器上创建相应的裸库"shell"[root@qfedu.com ~]# git add .                   #添加该文件夹中所有的文件到git的暂存区 [root@qfedu.com ~]# git commit -m ‘note’        #提交所有代码到本机的版本库 [root@qfedu.com ~]# git push -u origin master   #将本地的更改提交到远程服务器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>git 中 clone过来的时候，git 不会对比本地和服务器的文件，也就不会有冲突，</p></li><li><p>建议确定完全覆盖本地的时候用 clone，不确定会不会有冲突的时候用 git pull，将远程服务器的代码download下来</p></li><li><p>git pull=git fetch+git merge</p><p>  实验如下：</p><pre><code>本地代码内容如下：[root@node1 shell]# cat mem.sh free -m | awk &#39;NR==2&#123;print $4&#125;&#39;echo helloecho ni hao远程Git服务器代码内容如下：[root@node1 shell]# cat mem.sh free -m | awk &#39;NR==2&#123;print $4&#125;&#39;echo helloecho ni haoecho ha ha本地机器做fetch操作：[root@node1 shell]# git fetch origin master:testremote: Enumerating objects: 5, done.remote: Counting objects: 100% (5/5), done.remote: Compressing objects: 100% (2/2), done.remote: Total 3 (delta 0), reused 0 (delta 0)Unpacking objects: 100% (3/3), done.From master:/git-test/shell * [new branch]      master     -&gt; test   b522245..10f9569  master     -&gt; origin/masterfetch是把远程代码作为本地的一个其他分支下载到本地，并不更新本地分支，这里的命令是把远程的”master“分支下载到本地作为一个新的分支”test“存在查看本地文件并没有发生变化[root@node1 shell]# ls  mem.sh[root@node1 shell]# cat mem.sh free -m | awk &#39;NR==2&#123;print $4&#125;&#39;echo helloecho ni hao用diff查看本地master分支和fetch下来的test分支有什么区别：[root@node1 shell]# git diff master testdiff --git a/mem.sh b/mem.shindex 7ce0803..c0c8cef 100644--- a/mem.sh+++ b/mem.sh@@ -1,3 +1,4 @@ free -m | awk &#39;NR==2&#123;print $4&#125;&#39; echo hello echo ni hao+echo ha ha如果发现fetch下来的代码没什么问题，可以选择和本地分支进行合并[root@node1 shell]# git merge Updating eb8645c..10f9569Fast-forward mem.sh | 1 + 1 file changed, 1 insertion(+)[root@node1 shell]# cat mem.sh free -m | awk &#39;NR==2&#123;print $4&#125;&#39;echo helloecho ni haoecho ha ha</code></pre></li></ul><h4 id="5、常用的git-命令"><a href="#5、常用的git-命令" class="headerlink" title="5、常用的git 命令"></a>5、常用的git 命令</h4><p><img src="assets/011500266295799.jpg" alt="img"></p><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# git init                      # 初始化 [root@qfedu.com ~]# git add main.cpp              # 将某一个文件添加到暂存区 [root@qfedu.com ~]# git add .                     # 将文件夹下的所有的文件添加到暂存区 [root@qfedu.com ~]# git commit -m ‘note‘          # 将暂存区中的文件保存成为某一个版本 [root@qfedu.com ~]# git log                       # 查看所有的版本日志 [root@qfedu.com ~]# git status                    # 查看现在暂存区的状况 [root@qfedu.com ~]# git diff                      # 查看现在文件与上一个提交-commit版本的区别 [root@qfedu.com ~]# git reset --hard HEAD^        # 回到上一个版本 [root@qfedu.com ~]# git reset --hard XXXXX        # XXX为版本编号，回到某一个版本 [root@qfedu.com ~]# git pull origin master        # 从主分支pull到本地 [root@qfedu.com ~]# git push -u origin master     # 从本地push到主分支 [root@qfedu.com ~]# git pull                      # pull默认主分支 [root@qfedu.com ~]# git push                      # push默认主分支 ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6、版本穿梭"><a href="#6、版本穿梭" class="headerlink" title="6、版本穿梭"></a>6、版本穿梭</h4><h5 id="1、版本回退"><a href="#1、版本回退" class="headerlink" title="1、版本回退"></a>1、版本回退</h5><pre class="line-numbers language-shell"><code class="language-shell"># 用 git log 命令查看：# 每一个提交的版本都唯一对应一个 commit 版本号，# 使用 git reset 命令退到上一个版本：[root@qfedu.com ~]# git reset --hard HEAD^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# git reflog                    # 查看命令历史，以便确定要回到哪个版本[root@qfedu.com ~]# git reset --hard commit_id    # 比如git reset --hard 3628164（不用全部输入，输入前几位即可）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2、分支管理"><a href="#2、分支管理" class="headerlink" title="2、分支管理"></a>2、分支管理</h5><p>1、创建分支    </p><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# git checkout -b dev     #创建dev分支，然后切换到dev分支[root@qfedu.com ~]# git checkout            #命令加上-b参数表示创建并切换，相当于以下两条命令：[root@qfedu.com ~]# git branch dev git checkout dev[root@qfedu.com ~]# git branch              #命令查看当前分支,[root@qfedu.com ~]# git branch              #命令会列出所有分支，当前分支前面会标一个*号[root@qfedu.com ~]# git branch * dev   master[root@qfedu.com ~]# git add readme.txt git commit -m "branch test"  # 在dev分支上正常提交.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、分支切换</p><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# git checkout master     #切换回master分支# 查看一个readme.txt文件，刚才添加的内容不见了，因为那个提交是在dev分支上，而master分支此刻的提交点并没有变  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、合并分支</p><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# git merge dev           #把dev分支的工作成果合并到master分支上[root@qfedu.com ~]# git merge               #命令用于合并指定分支到当前分支。# 合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# git branch -d dev       #删除dev分支了：删除后，查看branch，就只剩下master分支了.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="3、解决冲突"><a href="#3、解决冲突" class="headerlink" title="3、解决冲突"></a>3、解决冲突</h5><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# git checkout -b feature1        # 创建新的feature1分支# 修改readme.txt最后一行，改为：Creating a new branch is quick AND simple.[root@qfedu.com ~]# git add readme.txt              # 在feature1分支上提交[root@qfedu.com ~]# git commit -m "AND simple"[root@qfedu.com ~]# git checkout master             #切换到master分支Switched to branch 'master' Your branch is ahead of 'origin/master' by 1 commit.Git还会自动提示我们当前master分支比远程的master分支要超前1个提交。在master分支上把readme.txt文件的最后一行改为：Creating a new branch is quick & simple.[root@qfedu.com ~]# git add readme.txt [root@qfedu.com ~]# git commit -m "& simple"现在，master分支和feature1分支各自都分别有新的提交这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：git merge feature1 Auto-merging readme.txt CONFLICT (content): Merge conflict in readme.txt Automatic merge failed; fix conflicts and then commit the result.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">readme.txt文件存在冲突，必须手动解决冲突后再提交。[root@qfedu.com ~]# git status 可以显示冲突的文件;直接查看readme.txt的内容：Git is a distributed version control system.Git is free software distributed under the GPL. Git has a mutable index called stage. Git tracks changes of files. <<<<<<< HEAD Creating a new branch is quick & simple. ======= Creating a new branch is quick AND simple. >>>>>>> feature1Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改后保存再提交：[root@qfedu.com ~]# git add readme.txt  [root@qfedu.com ~]# git commit -m "conflict fixed" [master 59bc1cb] conflict fixed最后，删除feature1分支：[root@qfedu.com ~]# git branch -d feature1 Deleted branch feature1 (was 75a857c).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、Github-远程仓库"><a href="#七、Github-远程仓库" class="headerlink" title="七、Github 远程仓库"></a>七、Github 远程仓库</h2><p>1、github.com 注册账户</p><p>2、github 上创建仓库</p><p>3、本地服务器生成 ssh 公钥</p><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# ssh-keygen -t rsa -C 'meteor@163.com'  # 邮箱要与github上注册的相同[root@qfedu.com ~]# cat .ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVThfq4brrlsPGtAknVB0TLPx+7Dd3qlxTbSIrUOsGC5Y8JuNqVTlIntZB4oNj8cSQrWvec9CKm0a8o7WwaJIiqpxurz+YpQHP2KbapftKIxsX4hPf/z+p0El1U6arQa35/xmNsq+cJLH/bDdRG+EMDhuCBmjVZOlLj/hEdeIT6s56AnnCkaWoF+sq58KCF7Tk54jRbs/YiyE4SN7FuA70r+07sA/uj0+lmuk4E190KtQUELhjX/E9stivlqiRhxnKvVUqXDywsjfM8Rtvbi4Fg9R8Wt9fpd4QwnWksYUoR5qZJFYXO4hSZrUnSMruPK14xXjDJcFDcP2eHIzKgLD1 meteor@163.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4、 github 添加 ssh 公钥 </p><p>复制以上的公钥，在 github 中添加ssh key</p><p>5、测试连接</p><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# yum install git........[root@qfedu.com ~]# ssh -T git@qfedu.comhub.comThe authenticity of host 'github.com (13.250.177.223)' can't be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.RSA key fingerprint is MD5:16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added 'github.com,13.250.177.223' (RSA) to the list of known hosts.Hi meteor! You've successfully authenticated, but GitHub does not provide shell access.[root@qfedu.com ~]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、连接远程仓库（创建一个测试存储库）</p><p><img src="./assets/git_remote_method.png" alt="it_remote_metho"></p><pre class="line-numbers language-shell"><code class="language-shell"># 在 github 网站新建一个仓库，命名为linux~~~[root@qfedu.com ~]# cd /opt[root@qfedu.com ~]# mkdir linux[root@qfedu.com ~]# mkdir linux[root@qfedu.com ~]# cd linux~~~# git 初始化，然后做第一个基本的git操作(需要在github上创建存储库)[root@qfedu.com ~]# git init[root@qfedu.com ~]# touch README[root@qfedu.com ~]# git add README[root@qfedu.com ~]# git commit -m 'first commit'[root@qfedu.com ~]# git remote add origin git@qfedu.comhub.com:userhub/linux.git~~~# 若出现origin已经存在的错误，删除origin[root@qfedu.com linux]# git remote rm origin# 现在继续执行push到远端~~~[root@qfedu.com linux]# git remote add origin git@qfedu.comhub.com:userhub/linux.git[root@qfedu.com linux]# git push -u origin masterCounting objects: 3, done.Writing objects: 100% (3/3), 205 bytes | 0 bytes/s, done.Total 3 (delta 0), reused 0 (delta 0)To git@qfedu.comhub.com:fakehydra/linux-.git * [new branch]      master -> master分支 master 设置为跟踪来自 origin 的远程分支 master。# 注意# 设置存储库链接[root@qfedu.com ~]# git remote set-url origin git@qfedu.comhub.com:userhub/linux.git# 如果 push 失败，合并分支到 master 再 push[root@qfedu.com ~]# git pull --rebase origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、Gitlab-Server-部署"><a href="#八、Gitlab-Server-部署" class="headerlink" title="八、Gitlab Server 部署"></a>八、Gitlab Server 部署</h2><h3 id="1、环境配置"><a href="#1、环境配置" class="headerlink" title="1、环境配置"></a>1、环境配置</h3><p>关闭防火墙、SELinux</p><p>开启邮件服务</p><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# systemctl start  postfix[root@qfedu.com ~]# systemctl enable postfix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2、部署-Gitlab"><a href="#2、部署-Gitlab" class="headerlink" title="2、部署 Gitlab"></a>2、部署 Gitlab</h3><h4 id="1、安装-gitlab-依赖包"><a href="#1、安装-gitlab-依赖包" class="headerlink" title="1、安装 gitlab 依赖包"></a>1、安装 gitlab 依赖包</h4><pre class="line-numbers language-shell"><code class="language-shell">centos7:[root@qfedu.com ~]# yum install -y curl openssh-server openssh-clients postfix cronie policycoreutils-python# gitlab-ce 10.x.x以后的版本需要依赖policycoreutils-pythoncentos8:[root@qfedu.com ~]# yum install -y curl openssh-server openssh-clients postfix cronie  policycoreutils-python-utils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、添加官方源"><a href="#2、添加官方源" class="headerlink" title="2、添加官方源"></a>2、添加官方源</h4><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为官方源太慢，可以使用国内清华yum源，配置如下</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/yum.repos.d/gitlab-ce.repo</span><span class="token punctuation">[</span>gitlab-ce<span class="token punctuation">]</span>name<span class="token operator">=</span>Gitlab CE Repositorybaseurl<span class="token operator">=</span>https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el<span class="token variable">$releasever</span>/gpgcheck<span class="token operator">=</span>0enabled<span class="token operator">=</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、安装-Gitlab"><a href="#3、安装-Gitlab" class="headerlink" title="3、安装 Gitlab"></a>3、安装 Gitlab</h4><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# yum -y install gitlab-ce                    # 自动安装最新版[root@qfedu.com ~]# yum -y install gitlab-ce-x.x.x                # 安装指定版本Gitlab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4、配置-Gitlab"><a href="#4、配置-Gitlab" class="headerlink" title="4、配置 Gitlab"></a>4、配置 Gitlab</h4><h5 id="1、查看Gitlab版本"><a href="#1、查看Gitlab版本" class="headerlink" title="1、查看Gitlab版本"></a>1、查看Gitlab版本</h5><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# head -1 /opt/gitlab/version-manifest.txtgitlab-ce 10.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2、Gitlab-配置登录链接"><a href="#2、Gitlab-配置登录链接" class="headerlink" title="2、Gitlab 配置登录链接"></a>2、Gitlab 配置登录链接</h5><pre class="line-numbers language-shell"><code class="language-shell">#设置登录链接[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb***## GitLab URL##! URL on which GitLab will be reachable.##! For more details on configuring external_url see:##! https://docs.gitlab.com/omnibus/settings/configuration.html#configuring-the-external-url-for-gitlab# 没有域名，可以设置为本机IP地址external_url 'http://172.17.0.61'***[root@qfedu.com ~]# grep "^external_url" /etc/gitlab/gitlab.rbexternal_url 'http://172.17.0.61'     #绑定监听的域名或IP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、初始化-Gitlab"><a href="#3、初始化-Gitlab" class="headerlink" title="3、初始化 Gitlab"></a>3、初始化 Gitlab</h5><p><strong>配置语言环境</strong></p><p>gitlab要求语言环境为英文环境，必须切换，切换方法如下：</p><pre><code>注意：可以先尝试以下方案    语言环境问题：如果碰到之后的解决方案如下，需要重新登录     [root@wing ~]# echo &quot;export LC_ALL=en_US.UTF-8&quot;  &gt;&gt;  /etc/profile 如果上面的方案不可以，再使用下面的方案：     # yum install langpacks-zh_CN langpacks-en langpacks-en_GB -y# cat &gt; /etc/profile.d/locale.sh&lt;&lt;-EOF export LANG=en_US.UTF-8 export LANGUAGE=en_US.UTF-8 export LC_COLLATE=C export LC_CTYPE=en_US.UTF-8 EOF# source /etc/profile.d/locale.sh退出终端重新登陆</code></pre><p>第一次使用配置时间较长</p><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# gitlab-ctl reconfigure   .....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="4、启动-Gitlab-服务"><a href="#4、启动-Gitlab-服务" class="headerlink" title="4、启动 Gitlab 服务"></a>4、启动 Gitlab 服务</h5><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# gitlab-ctl startok: run: gitaly: (pid 22896) 2922sok: run: gitlab-monitor: (pid 22914) 2921sok: run: gitlab-workhorse: (pid 22882) 2922sok: run: logrotate: (pid 22517) 2987sok: run: nginx: (pid 22500) 2993sok: run: node-exporter: (pid 22584) 2974sok: run: postgres-exporter: (pid 22946) 2919sok: run: postgresql: (pid 22250) 3047sok: run: prometheus: (pid 22931) 2920sok: run: redis: (pid 22190) 3053sok: run: redis-exporter: (pid 22732) 2962sok: run: sidekiq: (pid 22472) 3005sok: run: unicorn: (pid 22433) 3011s[git@qfedu.com ~]# lsof -i:80COMMAND   PID       USER   FD   TYPE DEVICE SIZE/OFF NODE NAMEnginx   22500       root    7u  IPv4  50923      0t0  TCP *:http (LISTEN)nginx   22501 gitlab-www    7u  IPv4  50923      0t0  TCP *:http (LISTEN)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5、Gitlab-设置-HTTPS-方式-（缺少配置）"><a href="#5、Gitlab-设置-HTTPS-方式-（缺少配置）" class="headerlink" title="5、Gitlab 设置 HTTPS 方式 （缺少配置）"></a>5、Gitlab 设置 HTTPS 方式 （缺少配置）</h5><ul><li>如果想要以上的 https 方式正常生效使用，则需要把 letsencrypt 自动生成证书的配置打开，这样在执行重新让配置生效命令 (gitlab-ctl reconfigure) 的时候会自动给域名生成免费的证书并自动在 gitlab 自带的 nginx 中加上相关的跳转配置，都是全自动的，非常方便。</li></ul><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rbletsencrypt['enable'] = true //如果因为这行报错，改成false即可letsencrypt['contact_emails'] = ['276267003@qq.com']     # 添加联系人的电子邮件地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="6、Gitlab-添加smtp邮件功能"><a href="#6、Gitlab-添加smtp邮件功能" class="headerlink" title="6、Gitlab 添加smtp邮件功能"></a>6、Gitlab 添加smtp邮件功能</h5><pre class="line-numbers language-shell"><code class="language-shell">[git@qfedu.com ~]# vim /etc/gitlab/gitlab.rbpostfix 并非必须的；根据具体情况配置，以 SMTP 的为例配置邮件服务器来实现通知；参考配置如下： ### Email Settingsgitlab_rails['gitlab_email_enabled'] = truegitlab_rails['gitlab_email_from'] = '276267003@qq.com'gitlab_rails['gitlab_email_display_name'] = 'gitlab'gitlab_rails['gitlab_email_reply_to'] = '276267003@qq.com'gitlab_rails['gitlab_email_subject_suffix'] = '[gitlab]'gitlab_rails['smtp_enable'] = truegitlab_rails['smtp_address'] = "smtp.qq.com"gitlab_rails['smtp_port'] = 465gitlab_rails['smtp_user_name'] = "276267003@qq.com"gitlab_rails['smtp_password'] = "kktohrvdryglbjjh" #这是我的qq邮箱授权码gitlab_rails['smtp_domain'] = "smtp.qq.com"gitlab_rails['smtp_authentication'] = "login"gitlab_rails['smtp_enable_starttls_auto'] = truegitlab_rails['smtp_tls'] = true#修改配置后需要初始化配置，先关掉服务再重新初始化[git@qfedu.com ~]# gitlab-ctl stopok: down: gitaly: 0s, normally upok: down: gitlab-monitor: 1s, normally upok: down: gitlab-workhorse: 0s, normally upok: down: logrotate: 1s, normally upok: down: nginx: 0s, normally upok: down: node-exporter: 1s, normally upok: down: postgres-exporter: 0s, normally upok: down: postgresql: 0s, normally upok: down: prometheus: 0s, normally upok: down: redis: 0s, normally upok: down: redis-exporter: 1s, normally upok: down: sidekiq: 0s, normally upok: down: unicorn: 1s, normally up[git@qfedu.com ~]# gitlab-ctl reconfigure  ......[git@qfedu.com ~]# gitlab-ctl startok: run: gitaly: (pid 37603) 0sok: run: gitlab-monitor: (pid 37613) 0sok: run: gitlab-workhorse: (pid 37625) 0sok: run: logrotate: (pid 37631) 0sok: run: nginx: (pid 37639) 1sok: run: node-exporter: (pid 37644) 0sok: run: postgres-exporter: (pid 37648) 1sok: run: postgresql: (pid 37652) 0sok: run: prometheus: (pid 37660) 1sok: run: redis: (pid 37668) 0sok: run: redis-exporter: (pid 37746) 0sok: run: sidekiq: (pid 37750) 1sok: run: unicorn: (pid 37757) 0s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7、Gitlab-发送邮件测试"><a href="#7、Gitlab-发送邮件测试" class="headerlink" title="7、Gitlab 发送邮件测试"></a>7、Gitlab 发送邮件测试</h5><pre class="line-numbers language-shell"><code class="language-shell">[git@qfedu.com ~]# gitlab-rails console [root@wing ~]# gitlab-rails console--------------------------------------------------------------------- GitLab:       12.10.1 (e658772bd63) FOSS GitLab Shell: 12.2.0 PostgreSQL:   11.7---------------------------------------------------------------------Loading production environment (Rails 6.0.2)irb(main):003:0> irb(main):004:0> Notify.test_email('276267003@qq.com', 'Message Subject', 'Message Body').deliver_now  //输入测试命令，回车Notify#test_email: processed outbound mail in 5.2msDelivered mail 5eafceaa250a_1d063fb777add9a08601a@wing.mail (1430.1ms)Date: Mon, 04 May 2020 16:13:30 +0800From: gitlab <276267003@qq.com>Reply-To: gitlab <276267003@qq.com>To: 276267003@qq.comMessage-ID: <5eafceaa250a_1d063fb777add9a08601a@wing.mail>Subject: Message SubjectMime-Version: 1.0Content-Type: text/html; charset=UTF-8Content-Transfer-Encoding: 7bitAuto-Submitted: auto-generatedX-Auto-Response-Suppress: All<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd"><html><body><p>Message Body</p></body></html>=> #<Mail::Message:70056859616080, Multipart: false, Headers: <Date: Mon, 04 May 2020 16:13:30 +0800>, <From: gitlab <276267003@qq.com>>, <Reply-To: gitlab <276267003@qq.com>>, <To: 276267003@qq.com>, <Message-ID: <5eafceaa250a_1d063fb777add9a08601a@wing.mail>>, <Subject: Message Subject>, <Mime-Version: 1.0>, <Content-Type: text/html; charset=UTF-8>, <Content-Transfer-Encoding: 7bit>, <Auto-Submitted: auto-generated>, <X-Auto-Response-Suppress: All>>irb(main):005:0> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>去qq邮箱web界面查看是否收到邮件</p><p><img src="assets/image-20200504161843613.png" alt="image-20200504161843613"></p><h3 id="3、Gitlab-的使用"><a href="#3、Gitlab-的使用" class="headerlink" title="3、Gitlab 的使用"></a>3、Gitlab 的使用</h3><p><strong>在浏览器中输入 <a href="http://192.168.1.178/">http://192.168.1.178/</a> ，然后 change password:  ，并使用root用户登录 即可 (后续动作根据提示操作)</strong></p><h4 id="1、Gitlab-命令行修改密码"><a href="#1、Gitlab-命令行修改密码" class="headerlink" title="1、Gitlab 命令行修改密码"></a>1、Gitlab 命令行修改密码</h4><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# gitlab-rails console productionirb(main):001:0>user = User.where(id: 1).first      # id为1的是超级管理员irb(main):002:0>user.password = 'yourpassword'      # 密码必须至少8个字符irb(main):003:0>user.save!                          # 如没有问题 返回trueexit                                                 # 退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、Gitlab服务管理"><a href="#2、Gitlab服务管理" class="headerlink" title="2、Gitlab服务管理"></a>2、Gitlab服务管理</h4><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# gitlab-ctl start                        # 启动所有 gitlab 组件；[root@qfedu.com ~]# gitlab-ctl stop                         # 停止所有 gitlab 组件；[root@qfedu.com ~]# gitlab-ctl restart                      # 重启所有 gitlab 组件；[root@qfedu.com ~]# gitlab-ctl status                       # 查看服务状态；[root@qfedu.com ~]# gitlab-ctl reconfigure                  # 初始化服务；[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb               # 修改默认的配置文件；[root@qfedu.com ~]# gitlab-ctl tail                         # 查看日志；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、登陆-Gitlab"><a href="#3、登陆-Gitlab" class="headerlink" title="3、登陆 Gitlab"></a>3、登陆 Gitlab</h4><p><img src="./assets/1.png" alt="1"></p><p><strong>如果需要手工修改nginx的port ，可以在gitlab.rb中设置 nginx[‘listen_port’] = 8000 ，然后再次 gitlab-ctl reconfigure即可</strong></p><p><strong>登录 gitlab 如下所示(首次登陆设置 root 密码)：</strong><br><img src="./assets/2.1.png" alt="1"></p><h4 id="4、创建项目组-group"><a href="#4、创建项目组-group" class="headerlink" title="4、创建项目组 group"></a>4、创建项目组 group</h4><p>组名为plat-sp ,<br><img src="./assets/2.2.png" alt="1"></p><p><img src="./assets/3.png" alt="1"></p><h4 id="5、去掉用户的自动注册功能（安全）"><a href="#5、去掉用户的自动注册功能（安全）" class="headerlink" title="5、去掉用户的自动注册功能（安全）"></a>5、去掉用户的自动注册功能（安全）</h4><p>admin are -&gt; settings -&gt; Sign-up Restrictions 去掉钩钩，然后拉到最下面保存，重新登录<br><img src="./assets/4.png" alt="1"></p><h2 id="九、Gitlab-开发代码提交处理流程"><a href="#九、Gitlab-开发代码提交处理流程" class="headerlink" title="九、Gitlab 开发代码提交处理流程"></a>九、Gitlab 开发代码提交处理流程</h2><h3 id="1、公司代码提交合并流程"><a href="#1、公司代码提交合并流程" class="headerlink" title="1、公司代码提交合并流程"></a>1、公司代码提交合并流程</h3><ul><li><p>  PM（项目主管/项目经理）在gitlab创建任务，分配给开发人员</p></li><li><p>  开发人员领取任务后，在本地使用git clone拉取代码库</p></li><li><p>  开发人员创建开发分支（git checkout -b dev），并进行开发</p></li><li><p>  开发人员完成之后，提交到本地仓库（git commit ）</p></li><li><p>  开发人员在gitlab界面上申请分支合并请求（Merge request）</p></li><li><p>  PM在gitlab上查看提交和代码修改情况，确认无误后，确认将开发人员的分支合并到主分支（master）</p></li><li><p>  开发人员在gitlab上Mark done确认开发完成，并关闭issue。这一步在提交合并请求时可以通过描述中填写”close #1”等字样，可以直接关闭issue</p></li></ul><h3 id="2、创建项目管理用户-Tompson"><a href="#2、创建项目管理用户-Tompson" class="headerlink" title="2、创建项目管理用户 Tompson"></a>2、创建项目管理用户 Tompson</h3><p><img src="./assets/5.png" alt="1"><br>同样的方法，再创建 Eric 、Hellen 用户。用户添加完毕后，gitlab 会给用户发一封修改密码的邮件，各用户需要登录自己的邮箱，并点击相关的链接，设置新密码。</p><h3 id="3、将-Tompson-用户添加到组中，指定T为本组的-owner"><a href="#3、将-Tompson-用户添加到组中，指定T为本组的-owner" class="headerlink" title="3、将 Tompson 用户添加到组中，指定T为本组的 owner"></a>3、将 Tompson 用户添加到组中，指定T为本组的 owner</h3><p><img src="./assets/6.png" alt="1"></p><h3 id="4、同样的方法将用户Eric、Hellen-添加到组中，并指定为Developer"><a href="#4、同样的方法将用户Eric、Hellen-添加到组中，并指定为Developer" class="headerlink" title="4、同样的方法将用户Eric、Hellen 添加到组中，并指定为Developer"></a>4、同样的方法将用户Eric、Hellen 添加到组中，并指定为Developer</h3><p><img src="./assets/7.png" alt="1"></p><h3 id="5、使用-Tompson-用户的身份与密码登录到-gitlab-界面中，并创建项目-Project"><a href="#5、使用-Tompson-用户的身份与密码登录到-gitlab-界面中，并创建项目-Project" class="headerlink" title="5、使用 Tompson 用户的身份与密码登录到 gitlab 界面中，并创建项目 Project"></a>5、使用 Tompson 用户的身份与密码登录到 gitlab 界面中，并创建项目 Project</h3><p><img src="./assets/10.png" alt="1"></p><h3 id="6、指定项目的存储路径和项目名称"><a href="#6、指定项目的存储路径和项目名称" class="headerlink" title="6、指定项目的存储路径和项目名称"></a>6、指定项目的存储路径和项目名称</h3><p><img src="./assets/11.png" alt="1"></p><p>把客户端的公钥添加到这里之后才会出现下图的内容</p><p><img src="./assets/12.png" alt="1"></p><h3 id="7、为项目创建-Dev分支"><a href="#7、为项目创建-Dev分支" class="headerlink" title="7、为项目创建 Dev分支"></a>7、为项目创建 Dev分支</h3><p>注意：因为版本的原因，需要先在项目里面添加一个文件，才能显示下图中创建分支的操作</p><p><img src="./assets/13.png" alt="1"></p><p><img src="./assets/14.png" alt="1"></p><h3 id="8、在-client-上添加-Tompson-的用户"><a href="#8、在-client-上添加-Tompson-的用户" class="headerlink" title="8、在 client 上添加 Tompson 的用户"></a>8、在 client 上添加 Tompson 的用户</h3><pre class="line-numbers language-shell"><code class="language-shell">[git@qfedu.com ~]# useradd Tompson[git@qfedu.com ~]# useradd Hellen[git@qfedu.com ~]# useradd Eric[git@qfedu.com ~]# useradd test[git@qfedu.com ~]# su - Tompson[Tompson@qfedu.com ~]$ ssh-keygenGenerating public/private rsa key pair.Enter file in which to save the key (/home/Tompson/.ssh/id_rsa): Created directory '/home/Tompson/.ssh'.Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/Tompson/.ssh/id_rsa.Your public key has been saved in /home/Tompson/.ssh/id_rsa.pub.The key fingerprint is:SHA256:SAoAH2zSxqEJqVgKKrxM5XMi6tKe61JMRdwMhwBNIrE Tompson@domain.cnThe key's randomart image is:+---[RSA 2048]----+|XX==o=.          ||*BOo+.o          ||E*=.  .          ||*+.= + .         ||=oo = . S        ||.oo              ||.o               ||o...             ||.+=.             |+----[SHA256]-----+[Tompson@qfedu.com ~]$ cat .ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDZ8cRGHej+sZzlmK36W5MUXMLOGdTwFI9Jj44mGuabZCrlYW4GDpL6ppezN+Sur0wHtnKonYJzm8ntqS0S0UHyaPPQPl9Mrs/6Z4VrXZ/4RlqHdWeSrmOwCBQld0l8HvrmP4TyGHrOreO8uZqimd/Z+OiMqnYRZzENX11Pti/Px5g1MtJcoCi9uLtF42QYrt1X/fzAyPU9C5/5ZUq4Jln3EF20bzcA52oAzZIl0jrhI0TeTeW6zYq+KxdHGshL+qG7+Ne+akPOe4Ma5BQjcMZ2dQ2kbGuozXmLT8RDcj9YRKceQsUdTI71lJpwrWKGn8Vhra0EaK3hgoTuvMYaGfOF Tompson@domain.cn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9、将-Tompson-的公钥复制到-gitlab-中"><a href="#9、将-Tompson-的公钥复制到-gitlab-中" class="headerlink" title="9、将 Tompson 的公钥复制到 gitlab 中"></a>9、将 Tompson 的公钥复制到 gitlab 中</h3><p>使用 Tompson 用户的身份与密码登录到 gitlab界面中，然后在 ssh-key 中添加相关的key<br><img src="./assets/8.png" alt="1"></p><p><img src="./assets/9.png" alt="1"></p><h3 id="10、为-Tompson-用户配置-git"><a href="#10、为-Tompson-用户配置-git" class="headerlink" title="10、为 Tompson 用户配置 git"></a>10、为 Tompson 用户配置 git</h3><pre class="line-numbers language-shell"><code class="language-shell">[Tompson@qfedu.com ~]$ git config --global user.email "222@qq.com"[Tompson@qfedu.com ~]$ git config --global user.name "tom"[Tompson@qfedu.com ~]$ git clone git@192.168.60.119:plat-sp/chathall.gitCloning into 'chathall'...The authenticity of host '192.168.60.119 (192.168.60.119)' can't be established.ECDSA key fingerprint is SHA256:CDxAQmj6gUkIxB6XUofbZ853GuPM5LS2QO4a5dD7jRo.ECDSA key fingerprint is MD5:4e:20:72:a7:46:c6:d7:5d:bb:9d:ce:c3:f3:da:43:f9.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '192.168.60.119' (ECDSA) to the list of known hosts.remote: Counting objects: 3, done.remote: Total 3 (delta 0), reused 0 (delta 0)Receiving objects: 100% (3/3), done.[Tompson@qfedu.com ~]$ [Tompson@qfedu.com ~]$ cd chathall/[Tompson@qfedu.com chathall]$ lsReadme.txt[Tompson@qfedu.com chathall]$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11、创建新文件，添加内容，并提交到-master-分支"><a href="#11、创建新文件，添加内容，并提交到-master-分支" class="headerlink" title="11、创建新文件，添加内容，并提交到 master 分支"></a>11、创建新文件，添加内容，并提交到 master 分支</h3><pre class="line-numbers language-shell"><code class="language-shell">[Tompson@qfedu.com chathall]$ vim test.sh[Tompson@qfedu.com chathall]$ cat test.sh #!/bin/bashecho "gitlab test"[Tompson@qfedu.com chathall]$ git add . [Tompson@qfedu.com chathall]$ git commit -m '201805101649'[master 80edf6b] 201805101649 1 file changed, 2 insertions(+) create mode 100644 test.sh[Tompson@qfedu.com chathall]$ [Tompson@qfedu.com chathall]$ git push -u origin master Counting objects: 4, done.Compressing objects: 100% (2/2), done.Writing objects: 100% (3/3), 305 bytes | 0 bytes/s, done.Total 3 (delta 0), reused 0 (delta 0)To git@192.168.60.119:plat-sp/chathall.git   4611654..80edf6b  master -> masterBranch master set up to track remote branch master from origin.[Tompson@qfedu.com chathall]$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12、使用-Eric-用户登录，并-clone-项目"><a href="#12、使用-Eric-用户登录，并-clone-项目" class="headerlink" title="12、使用 Eric 用户登录，并 clone 项目"></a>12、使用 Eric 用户登录，并 clone 项目</h3><pre class="line-numbers language-shell"><code class="language-shell">[git@qfedu.com ~]# su - Eric[Eric@qfedu.com ~]$ ssh-keygen -C Eric@domain.cnGenerating public/private rsa key pair.Enter file in which to save the key (/home/Eric/.ssh/id_rsa): Created directory '/home/Eric/.ssh'.Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/Eric/.ssh/id_rsa.Your public key has been saved in /home/Eric/.ssh/id_rsa.pub.The key fingerprint is:SHA256:VZaJvjA5SJZEB+yuRpDBNHCECCZ5R8X0DYcNE0f1B6E Eric@domain.cnThe key's randomart image is:+---[RSA 2048]----+|*O=..B*o**+o+oo. ||*.+.. *o.*oooo . || . + + ..oo E . .||  o   o =..    . ||   . .  S+ .     ||    . .   .      ||   . .           ||    o            ||   .             |+----[SHA256]-----+[Eric@qfedu.com ~]$ cat .ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDxQcn4UjRW/5PT5witeV9+S2w8WK5ouawHxEF7s9wuWsT4pqhcu5BN74NG3CPaq1jJZnkV+aQsTw+60BAd1gOK0FBbKWxmohmE61n9vfpUT5igJ72t2jpXjfKwLIHw+Iq5yM4yUhkwSsoBuZkxYSEltnj8OvXaOlCDYnXuGBa9+xO8f5yVIcOtiwRvv+Y1PRRzSIcazPVZax9FLK26t1R4NPiY4xWkIJyK2OrKMeiaBBzyMfWzHdmsCWa51oSrYSmz3PDBXpzIBs3OdKxcaJs9Lc5u87YCV5RMUjLrPcA7nPK6crOabLXhz3d5GSYggMTOByQkyKOo7WlYpARCHOt/ Eric@domain.cn[Eric@qfedu.com ~]$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13、同样需要使用Eric用户登录gitlab-web-界面，并添加相应的ssh-key。然后设置git-，并clone项目"><a href="#13、同样需要使用Eric用户登录gitlab-web-界面，并添加相应的ssh-key。然后设置git-，并clone项目" class="headerlink" title="13、同样需要使用Eric用户登录gitlab web 界面，并添加相应的ssh-key。然后设置git ，并clone项目"></a>13、同样需要使用Eric用户登录gitlab web 界面，并添加相应的ssh-key。然后设置git ，并clone项目</h3><pre class="line-numbers language-shell"><code class="language-shell">[Eric@qfedu.com ~]$ git config --global user.email "Eric@domain.cn"[Eric@qfedu.com ~]$ git config --global user.name "Eric"[Eric@qfedu.com ~]$ git clone git@192.168.60.119:plat-sp/chathall.gitCloning into 'chathall'...The authenticity of host '192.168.60.119 (192.168.60.119)' can't be established.ECDSA key fingerprint is SHA256:CDxAQmj6gUkIxB6XUofbZ853GuPM5LS2QO4a5dD7jRo.ECDSA key fingerprint is MD5:4e:20:72:a7:46:c6:d7:5d:bb:9d:ce:c3:f3:da:43:f9.Are you sure you want to continue connecting (yes/no)? yesremote: Counting objects: 6, done.remote: Compressing objects: 100% (3/3), done.remote: Total 6 (delta 0), reused 0 (delta 0)Receiving objects: 100% (6/6), done.[Eric@qfedu.com ~]$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14、切换到dev分支，修改文件内容，并将新-code-提交到-dev分支-Developer角色默认并没有提交master的权限"><a href="#14、切换到dev分支，修改文件内容，并将新-code-提交到-dev分支-Developer角色默认并没有提交master的权限" class="headerlink" title="14、切换到dev分支，修改文件内容，并将新 code 提交到 dev分支 (Developer角色默认并没有提交master的权限)"></a>14、切换到dev分支，修改文件内容，并将新 code 提交到 dev分支 (Developer角色默认并没有提交master的权限)</h3><pre class="line-numbers language-shell"><code class="language-shell">[Eric@qfedu.com chathall]$ git checkout dev Branch dev set up to track remote branch dev from origin.Switched to a new branch 'dev'[Eric@qfedu.com chathall]$ lsReadme.txt  test.sh[Eric@qfedu.com chathall]$ vim eric.sh [Eric@qfedu.com chathall]$ cat eric.sh#!/bin/bashecho "brahch test"[Eric@qfedu.com chathall]$ git add . [Eric@qfedu.com chathall]$ git commit -m '201805101658'[dev 6687039] 201805101658 1 file changed, 1 insertion(+)[Eric@qfedu.com chathall]$ git push -u origin dev Counting objects: 5, done.Compressing objects: 100% (3/3), done.Writing objects: 100% (3/3), 306 bytes | 0 bytes/s, done.Total 3 (delta 0), reused 0 (delta 0)remote: remote: To create a merge request for dev, visit:remote:   http://192.168.60.119/plat-sp/chathall/merge_requests/new?merge_request%5Bsource_branch%5D=devremote: To git@192.168.60.119:plat-sp/chathall.git   80edf6b..6687039  dev -> devBranch dev set up to track remote branch dev from origin.[Eric@qfedu.com chathall]$[Eric@qfedu.com chathall]$ git checkout master Switched to branch 'master'[Eric@qfedu.com chathall]$ git branch   dev* master[Eric@qfedu.com chathall]$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="15、使用Eric-用户登录gitlab-web，在界面中-创建一个合并请求"><a href="#15、使用Eric-用户登录gitlab-web，在界面中-创建一个合并请求" class="headerlink" title="15、使用Eric 用户登录gitlab web，在界面中 创建一个合并请求"></a>15、使用Eric 用户登录gitlab web，在界面中 创建一个合并请求</h3><p><img src="./assets/15.png" alt="1"></p><p><strong>提交合并请求：</strong><br><img src="./assets/16.png" alt="1"></p><h3 id="16、使用Tompson用户登录-gitlab-web-，找到“合并请求”-，然后将dev分支合并到master分支"><a href="#16、使用Tompson用户登录-gitlab-web-，找到“合并请求”-，然后将dev分支合并到master分支" class="headerlink" title="16、使用Tompson用户登录 gitlab web ，找到“合并请求” ，然后将dev分支合并到master分支"></a>16、使用Tompson用户登录 gitlab web ，找到“合并请求” ，然后将dev分支合并到master分支</h3><p><img src="./assets/17.png" alt="1"></p><p><img src="./assets/18.png" alt="1"></p><h2 id="十、Gitlab-备份与恢复"><a href="#十、Gitlab-备份与恢复" class="headerlink" title="十、Gitlab 备份与恢复"></a>十、Gitlab 备份与恢复</h2><h3 id="1、查看系统版本和软件版本"><a href="#1、查看系统版本和软件版本" class="headerlink" title="1、查看系统版本和软件版本"></a>1、查看系统版本和软件版本</h3><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com gitlab]# cat /etc/redhat-release CentOS Linux release 7.3.1611 (Core) [root@qfedu.com gitlab]# cat /opt/gitlab/embedded/service/gitlab-rails/VERSION8.15.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、数据备份"><a href="#2、数据备份" class="headerlink" title="2、数据备份"></a>2、数据备份</h3><h4 id="1、查看备份相关的配置项"><a href="#1、查看备份相关的配置项" class="headerlink" title="1、查看备份相关的配置项"></a>1、查看备份相关的配置项</h4><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rbgitlab_rails['manage_backup_path'] = truegitlab_rails['backup_path'] = "/data/gitlab/backups"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>该项定义了默认备份出文件的路径，可以通过修改该配置，并执行 <strong>gitlab-ctl reconfigure 或者 gitlab-ctl  restart</strong> 重启服务生效。</p><h4 id="2、执行备份命令进行备份"><a href="#2、执行备份命令进行备份" class="headerlink" title="2、执行备份命令进行备份"></a>2、执行备份命令进行备份</h4><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# /opt/gitlab/bin/gitlab-rake gitlab:backup:create <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3、添加到-crontab-中定时执行"><a href="#3、添加到-crontab-中定时执行" class="headerlink" title="3、添加到 crontab 中定时执行"></a>3、添加到 crontab 中定时执行</h4><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# crontab -e0 2 * * * bash /opt/gitlab/bin/gitlab-rake gitlab:backup:create<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以到/data/gitlab/backups找到备份包，解压查看，会发现备份的还是比较全面的，数据库、repositories、build、upload等分类还是比较清晰的。</p><h4 id="4、设置备份保留时长"><a href="#4、设置备份保留时长" class="headerlink" title="4、设置备份保留时长"></a>4、设置备份保留时长</h4><p>防止每天执行备份，有目录被爆满的风险，打开/etc/gitlab/gitlab.rb配置文件，找到如下配置：</p><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rbgitlab_rails['backup_keep_time'] = 604800<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置备份保留7天（7<em>3600</em>24=604800），秒为单位，如果想增大或减小，可以直接在该处配置，并通过gitlab-ctl restart 重启服务生效。</p><p>备份完成，会在备份目录中生成一个当天日期的tar包。</p><h3 id="3、数据恢复"><a href="#3、数据恢复" class="headerlink" title="3、数据恢复"></a>3、数据恢复</h3><h4 id="1、安装部署-gitlab-server"><a href="#1、安装部署-gitlab-server" class="headerlink" title="1、安装部署 gitlab server"></a>1、安装部署 gitlab server</h4><p> 具体步骤参见上面：gitlab server 搭建过程</p><h4 id="2、恢复-gitlab"><a href="#2、恢复-gitlab" class="headerlink" title="2、恢复 gitlab"></a>2、恢复 gitlab</h4><h5 id="1、查看备份相关的配置项-1"><a href="#1、查看备份相关的配置项-1" class="headerlink" title="1、查看备份相关的配置项"></a>1、查看备份相关的配置项</h5><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rbgitlab_rails['backup_path'] = "/data/gitlab/backups"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改该配置，定义了默认备份出文件的路径，并执行 <strong>gitlab-ctl reconfigure 或者 gitlab-ctl  restart</strong> 重启服务生效。</p><h5 id="2、恢复前需要先停掉数据连接服务"><a href="#2、恢复前需要先停掉数据连接服务" class="headerlink" title="2、恢复前需要先停掉数据连接服务"></a>2、恢复前需要先停掉数据连接服务</h5><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# gitlab-ctl stop unicorn[root@qfedu.com ~]# gitlab-ctl stop sidekiq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>如果是台新搭建的主机，不需要操作，理论上不停这两个服务也可以。停这两个服务是为了保证数据一致性。</li></ul><h5 id="3、同步备份文件到新服务器"><a href="#3、同步备份文件到新服务器" class="headerlink" title="3、同步备份文件到新服务器"></a>3、同步备份文件到新服务器</h5><p>将老服务器/data/gitlab/backups目录下的备份文件拷贝到新服务器上的/data/gitlab/backups</p><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com gitlab]# rsync -avz 1530773117_2019_03_05_gitlab_backup.tar 192.168.95.135:/data/gitlab/backups/ <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注意权限：600权限是无权恢复的。 实验环境可改成了777，生产环境建议修改属主属组</li></ul><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com backups]# pwd/data/gitlab/backups[root@qfedu.com backups]# chown -R git.git 1530773117_2019_03_05_gitlab_backup.tar [root@qfedu.com backups]# lltotal 17328900-rwxrwxrwx 1 git git 17744793600 Jul  5 14:47 1530773117_2018_07_05_gitlab_backup.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、执行命令进行恢复"><a href="#4、执行命令进行恢复" class="headerlink" title="4、执行命令进行恢复"></a>4、执行命令进行恢复</h5><p>后面再输入两次 yes 就完成恢复了。</p><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# gitlab-rake gitlab:backup:restore BACKUP=1530773117_2018_07_05_gitlab_backup.tar注意：backups 目录下保留一个备份文件可直接执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="5、恢复完成启动服务"><a href="#5、恢复完成启动服务" class="headerlink" title="5、恢复完成启动服务"></a>5、恢复完成启动服务</h5><p>恢复完成后，启动刚刚的两个服务，或者重启所有服务，再打开浏览器进行访问，发现数据和之前的一致：</p><pre class="line-numbers language-shell"><code class="language-shell">[root@qfedu.com ~]# gitlab-ctl start unicorn[root@qfedu.com ~]# gitlab-ctl start sidekiq或[root@qfedu.com ~]# gitlab-ctl restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：通过备份文件恢复gitlab必须保证两台主机的gitlab版本一致，否则会提示版本不匹配</strong></p><h2 id="十一、利用Gitlab管理k8s集群"><a href="#十一、利用Gitlab管理k8s集群" class="headerlink" title="十一、利用Gitlab管理k8s集群"></a>十一、利用Gitlab管理k8s集群</h2><h3 id="1、权限设置"><a href="#1、权限设置" class="headerlink" title="1、权限设置"></a>1、权限设置</h3><p><img src="assets/image-20200821174547237.png" alt="image-20200821174547237"></p><h3 id="2、获取k8s集群API地址"><a href="#2、获取k8s集群API地址" class="headerlink" title="2、获取k8s集群API地址"></a>2、获取k8s集群API地址</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl cluster-info | grep 'Kubernetes master' | awk '/http/ &amp;#123;print $NF&amp;#125;'</span>https<span class="token punctuation">:</span>//192.168.19.200<span class="token punctuation">:</span><span class="token number">6443</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3、获取k8s集群默认CA证书"><a href="#3、获取k8s集群默认CA证书" class="headerlink" title="3、获取k8s集群默认CA证书"></a>3、获取k8s集群默认CA证书</h3><pre><code>[root@master ~]# kubectl get secretsNAME                  TYPE                                  DATA   AGEdefault-token-cvfqx   kubernetes.io/service-account-token   3      3d21h</code></pre><p>default-token-cvfqx 为上面获取到的secrets的名称，用以下命令查看证书</p><pre><code>[root@master ~]# kubectl get secret default-token-cvfqx  -o jsonpath=&quot;&#123;[&#39;data&#39;][&#39;ca\.crt&#39;]&#125;&quot; | base64 --decode-----BEGIN CERTIFICATE-----MIICyDCCAbCgAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJlcm5ldGVzMB4XDTIwMDgxNzA5MjAwMFoXDTMwMDgxNTA5MjAwMFowFTETMBEGA1UEAxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANIMiOGHeolaxkE+kqZtc8kDbGFhwqGxNxg4orbIjrz//Z6vrgqo2COn2NjKrVM11bmzVhHPCruc3snfTLIS+/Z6gZqgpw5ruX8OjfH4nhr9npKxdBon3soa10EovPwMz1KWlaqbuLKTbtTm+oCtAKYXUlzqrFGR//GW2D3bjl1QGOPbAR0pggdxSpPo6oUgtEQJQAsNOJ40qMjevi3fnrNDrMqmcNKlSlkw8+Gf4TqM1EfAERRHiEcb/W3hOGWV0gdmvaq7CE/ENeD1O11NE76BMmk5WO0u6ot4OmP35TTlx8K0N/WPyq76RlH7somiIb8S1NpAzg+9K0vv1QmILScCAwEAAaMjMCEwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAEVgIlTFDoFhb3KA0RMVjckgsP3OOB7vTEws6w9ZDGJsNlbbCa15f8q3VmERSkfjAhfG4I9gb4KI0CM5Xt3JhU76GWsOZXHDfK7AzDGpLPUxlygkK7c7XCES/GEJe5agBxQyCo2pAvcj/nb+JIBeSh8JcG05pzPhL11it9hDqmS5k92+63xGs/SDEzXEbBVMnyZWiv+AOHlO1/IFofUD3VHcSRMYwH5j6Irc0p0XTnFg+GHBpqjxwMWxP6IxdVrsOWUALM5oOJYn4aJQy5kSpJFkwNW8xDvVgtOWq5P9fVfnE4Am0LI/DevzYtcr3O9hUmCfEOnF0hC0n4ghYOPqiB4=-----END CERTIFICATE-----</code></pre><h3 id="4、设置rbac"><a href="#4、设置rbac" class="headerlink" title="4、设置rbac"></a>4、设置rbac</h3><pre><code>[root@master ~]# vim gitlab-admin-service-account.yamlapiVersion: v1kind: ServiceAccountmetadata:  name: gitlab-admin  namespace: kube-system---apiVersion: rbac.authorization.k8s.io/v1beta1kind: ClusterRoleBindingmetadata:  name: gitlab-adminroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: cluster-adminsubjects:- kind: ServiceAccount  name: gitlab-admin  namespace: kube-system[root@master ~]# kubectl apply -f gitlab-admin-service-account.yamlserviceaccount/gitlab-admin createdclusterrolebinding.rbac.authorization.k8s.io/gitlab-admin created</code></pre><h3 id="5、获取gitlab-admin的token"><a href="#5、获取gitlab-admin的token" class="headerlink" title="5、获取gitlab-admin的token"></a>5、获取gitlab-admin的token</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep gitlab-admin | awk '&amp;#123;print $1&amp;#125;')</span><span class="token key atrule">Name</span><span class="token punctuation">:</span>         gitlab<span class="token punctuation">-</span>admin<span class="token punctuation">-</span>token<span class="token punctuation">-</span>pmb2h<span class="token key atrule">Namespace</span><span class="token punctuation">:</span>    kube<span class="token punctuation">-</span>system<span class="token key atrule">Labels</span><span class="token punctuation">:</span>       &lt;none<span class="token punctuation">></span><span class="token key atrule">Annotations</span><span class="token punctuation">:</span>  <span class="token key atrule">kubernetes.io/service-account.name</span><span class="token punctuation">:</span> gitlab<span class="token punctuation">-</span>admin              <span class="token key atrule">kubernetes.io/service-account.uid</span><span class="token punctuation">:</span> bc9e1f94<span class="token punctuation">-</span>088d<span class="token punctuation">-</span>41f4<span class="token punctuation">-</span>8e18<span class="token punctuation">-</span>f31f1e9a9369<span class="token key atrule">Type</span><span class="token punctuation">:</span>  kubernetes.io/service<span class="token punctuation">-</span>account<span class="token punctuation">-</span>tokenData====<span class="token key atrule">ca.crt</span><span class="token punctuation">:</span>     1025 bytes<span class="token key atrule">namespace</span><span class="token punctuation">:</span>  11 bytes<span class="token key atrule">token</span><span class="token punctuation">:</span>      eyJhbGciOiJSUzI1NiIsImtpZCI6InluNWZyY3V5T1BjNmFFQlpmRVBmOGFOenRmVkx1U0dCRDFhT0s5dEtGeXMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJnaXRsYWItYWRtaW4tdG9rZW4tcG1iMmgiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZ2l0bGFiLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYmM5ZTFmOTQtMDg4ZC00MWY0LThlMTgtZjMxZjFlOWE5MzY5Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmdpdGxhYi1hZG1pbiJ9.HGNf2_q_NS7ASk2ID6Y658PMpDIruFLr70VGk9I_dAP<span class="token punctuation">-</span>rYt81FarjQhIQPn554SrtmiTp<span class="token punctuation">-</span>iQ_j7slX_YRsGHlpo74VrBM2SirDToXobuSpe77v6MFx6Ol2UsUrxY0ulm_DAjOhZ16jlohPWlhkP0083KBfywwdpyF2oVdALQnT4sI1aDxgUHs<span class="token punctuation">-</span>Pmg6D0NbdN0Ipb<span class="token punctuation">-</span><span class="token punctuation">-</span>s<span class="token punctuation">-</span>Z59QKGr1XH4Pp0Qb9kze6KCJSWOk8<span class="token punctuation">-</span>4pwtpQcT7K2MA1ucyEJB283D5ChQSddo9q7pBkEwq94TLy<span class="token punctuation">-</span>ZbAhHgO89OqVIjY<span class="token punctuation">-</span>3H<span class="token punctuation">-</span>rb5Kd3meGrtGJZJscx7xnn6_DEvbBwp8DmCoM4vfFLUUow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、添加k8s集群</p><p><img src="assets/image-20200821180353378.png" alt="image-20200821180353378"></p>]]></content>
      
      
      <categories>
          
          <category> CICD自动构建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
            <tag> Gitlab </tag>
            
            <tag> SVN </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
