{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatar.png","path":"medias/avatar.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/contact.png","path":"medias/contact.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/icp.png","path":"medias/icp.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/matery/source/css/bb.css","path":"css/bb.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.png","path":"medias/reward/alipay.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/分布式版本控制系统.md","hash":"4623a39ada7daa5483649feef4c84f6ef264f321","modified":1644554306846},{"_id":"source/_data/friends.json","hash":"f292a73200f5b73e3d669d0f4ffe229ad5a21a17","modified":1644468706708},{"_id":"source/_posts/这是第一个博客网站 copy 2.md","hash":"cbc33a3a9f6fc66073de6655a1af9c30628b84f2","modified":1642858456783},{"_id":"source/_posts/学习了一下接口框架DDT数据的传递过程.md","hash":"bed275fb6eacd3734b564e705be3c6d807a126bf","modified":1644511355034},{"_id":"source/_posts/这是第一个博客网站 copy.md","hash":"cbc33a3a9f6fc66073de6655a1af9c30628b84f2","modified":1642858433244},{"_id":"source/_posts/这是第一个博客网站.md","hash":"c6ffcfb48836718d53ebec7bc849328c561e0c9e","modified":1642908768170},{"_id":"source/about/index.md","hash":"27716ad12695774908760b4b4efa667654c1f754","modified":1645256072687},{"_id":"source/tags/index.md","hash":"e4b058f0ead8ba3a1ffcb982e19abf86a83c262c","modified":1645256072687},{"_id":"source/about/.DS_Store","hash":"34fe290bc8d934cf4c51deea76c7ec16f3cf4d2f","modified":1645252556208},{"_id":"source/categories/index.md","hash":"b0626f6c32790d70bb1909bb945d2eb418d467c3","modified":1642826506554},{"_id":"source/.DS_Store","hash":"95edbaf733aa960adcb3e0ce3db667870b3f0514","modified":1645252578638},{"_id":"source/_data/musics.json","hash":"df03bd4ebcffdf93d32fa1e48b1506cb064575ca","modified":1642828110242},{"_id":"source/friends/index.md","hash":"6e1710744cd6ee34cd876af8b9a51b32e8677df8","modified":1642826655357},{"_id":"themes/matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1606456707000},{"_id":"themes/matery/.DS_Store","hash":"aa93ab25f2a10edb93324208d6e660a253e869e0","modified":1645252615881},{"_id":"themes/matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1606456707000},{"_id":"themes/matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1606456707000},{"_id":"themes/matery/README_CN.md","hash":"089de96e2165ea2a8a3adf38ebda85b65e7f716e","modified":1606456707000},{"_id":"themes/matery/README.md","hash":"0366f3d50b18d095b0581e7b5974e3283d693884","modified":1606456707000},{"_id":"themes/matery/_config.yml","hash":"4f0346af5634b29519bf5f463cdf05a477b069be","modified":1645019812345},{"_id":"themes/matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1606456707000},{"_id":"themes/matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1606456707000},{"_id":"themes/matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1606456707000},{"_id":"themes/matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1606456707000},{"_id":"themes/matery/layout/.DS_Store","hash":"c42691c6eb63f36fef8f20ad9cd158468d3f7cf2","modified":1644132978414},{"_id":"themes/matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1606456707000},{"_id":"themes/matery/layout/about.ejs","hash":"41849f9300b8dc47048333fcf4a897dd8a2a13ca","modified":1606456707000},{"_id":"themes/matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1606456707000},{"_id":"themes/matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1606456707000},{"_id":"themes/matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1606456707000},{"_id":"themes/matery/layout/contact.ejs","hash":"19d62e521c4253496db559478db5164ddfd2480e","modified":1606456707000},{"_id":"themes/matery/layout/friends.ejs","hash":"92892bab5578ccf758ce57e19fca08be80d0d5b9","modified":1606456707000},{"_id":"themes/matery/layout/index.ejs","hash":"4dc6f08e7709cc04e886be72dbf0d06469f0effc","modified":1606456707000},{"_id":"themes/matery/layout/layout.ejs","hash":"974b44eb3e343cd3ee57ebad34bbb0eff4184400","modified":1606456707000},{"_id":"themes/matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1606456707000},{"_id":"themes/matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1606456707000},{"_id":"themes/matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1606456707000},{"_id":"themes/matery/source/.DS_Store","hash":"5cba2644cb04b4787dc352142b4f1bff2c3192e1","modified":1645252683104},{"_id":"themes/matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1606456707000},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1606456707000},{"_id":"themes/matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1606456707000},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"28617bf2a35a4269eba6df466acd174e416d2d1e","modified":1606456707000},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1606456707000},{"_id":"themes/matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1606456707000},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1606456707000},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1606456707000},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1606456707000},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1606456707000},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1606456707000},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1606456707000},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"b5ff9d409bea011dad7cf87c9c51213802458f41","modified":1644128995047},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1606456707000},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"76b4a37e0364380b143fdf94bf1a5e6941564414","modified":1606456707000},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1606456707000},{"_id":"themes/matery/layout/_partial/minivaline.ejs","hash":"5f09386aece8f9cf31f6059bbde79cd6c5171493","modified":1606456707000},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1606456707000},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1606456707000},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1606456707000},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"880ebaf78a947631a38ad0b3d65201315845a264","modified":1606456707000},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1606456707000},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1606456707000},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1606456707000},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1606456707000},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1606456707000},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1606456707000},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1606456707000},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1606456707000},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1606456707000},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1606456707000},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1606456707000},{"_id":"themes/matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1606456707000},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1606456707000},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1606456707000},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1606456707000},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1606456707000},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1606456707000},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1606456707000},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1606456707000},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1606456707000},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1606456707000},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1606456707000},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1606456707000},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1606456707000},{"_id":"themes/matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1606456707000},{"_id":"themes/matery/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1606456707000},{"_id":"themes/matery/source/libs/.DS_Store","hash":"34d491d02562447771bd7b68e7aaba9be2c5dab8","modified":1645252678026},{"_id":"themes/matery/source/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1606456707000},{"_id":"themes/matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1606456707000},{"_id":"themes/matery/source/medias/.DS_Store","hash":"59208acf219cd03f2d71b51bbf3620da8f0a7736","modified":1644136653569},{"_id":"themes/matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1606456707000},{"_id":"themes/matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1606456707000},{"_id":"themes/matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1606456707000},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1606456707000},{"_id":"themes/matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1606456707000},{"_id":"themes/matery/source/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1606456707000},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1606456707000},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1606456707000},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1606456707000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1606456707000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1606456707000},{"_id":"themes/matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1606456707000},{"_id":"themes/matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1606456707000},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1606456707000},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1606456707000},{"_id":"themes/matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1606456707000},{"_id":"themes/matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1606456707000},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1606456707000},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1606456707000},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1606456707000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1606456707000},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1606456707000},{"_id":"themes/matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1606456707000},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1606456707000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1606456707000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/.DS_Store","hash":"2d8ae822b7936afb2513bf80dcff4869862f26e2","modified":1645252678024},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1606456707000},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1606456707000},{"_id":"themes/matery/source/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1606456707000},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1606456707000},{"_id":"themes/matery/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1606456707000},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1606456707000},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1606456707000},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1606456707000},{"_id":"themes/matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1606456707000},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1606456707000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1606456707000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1606456707000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1606456707000},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1606456707000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1606456707000},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1606456707000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1606456707000},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1606456707000},{"_id":"themes/matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1606456707000},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1606456707000},{"_id":"themes/matery/source/medias/reward/alipay.png","hash":"b747f6e87103d71429dfbf902f122b90c612c02a","modified":1644382314542},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1606456707000},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1606456707000},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1606456707000},{"_id":"themes/matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1606456707000},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1606456707000},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1606456707000},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1606456707000},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1606456707000},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"a36fabc4b691c7739730a85f5749fb6cb66d638c","modified":1644382352289},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1606456707000},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1606456707000},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1606456707000},{"_id":"themes/matery/source/medias/avatar.png","hash":"2c571c3c3dffe56b8cbf1b14a1539f8852f5f231","modified":1644136570077},{"_id":"themes/matery/source/medias/logo.png","hash":"2c571c3c3dffe56b8cbf1b14a1539f8852f5f231","modified":1644136570077},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1606456707000},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1606456707000},{"_id":"public/atom.xml","hash":"19f38879abcb24dd7e11ab4c11f8ddb26b2f89b4","modified":1645257138337},{"_id":"public/search.xml","hash":"caf23938b4442159f914b3ce76233cda8374bca5","modified":1645257138337},{"_id":"public/tags/index.html","hash":"944710cd2ebee3a12b58a2c541543e01d823f84b","modified":1645257138337},{"_id":"public/categories/index.html","hash":"4f5ecf7d518070179aba2e5ca83f100ba797516f","modified":1645257138337},{"_id":"public/friends/index.html","hash":"c708bf960d0f3fd77d33f59a901e4cddd037a53c","modified":1645257138337},{"_id":"public/about/index.html","hash":"50897ef53f0d1e6e69aa1ca7faec25cb20d270cc","modified":1645257138337},{"_id":"public/2022/01/22/873469c32076.html","hash":"6625cf5372798e717c8c6230f2ba63b4ee69197a","modified":1645257138337},{"_id":"public/2022/01/22/cacc7080ea96.html","hash":"e7fb277c6f1acf87a483151c8d499216f9afc44e","modified":1645257138337},{"_id":"public/2022/01/20/3a966efeeda7.html","hash":"ba966a148312a1f546e1ccb4fc0f05ab932c58e6","modified":1645257138337},{"_id":"public/2021/11/23/99acc59ed0cb.html","hash":"d8e87ff2ffae016596401850a597fdc87245f429","modified":1645257138337},{"_id":"public/2020/10/20/8345b3edd0ac.html","hash":"4ca2891789bb35d0ec848f78259c5bb946f7f9e3","modified":1645257138337},{"_id":"public/archives/index.html","hash":"3c0131a01b4b8d78c94a9748849373d3da86f636","modified":1645257138337},{"_id":"public/archives/2020/10/index.html","hash":"a653563821c731aea7f8afeaddfdff4b33c33595","modified":1645257138337},{"_id":"public/archives/2020/index.html","hash":"75a616996a835ace2ec20b7d793c1534755d7f44","modified":1645257138337},{"_id":"public/archives/2021/index.html","hash":"1ee304d6cc9b8ecf177f6332bab66cbdfa3f0a5c","modified":1645257138337},{"_id":"public/archives/2021/11/index.html","hash":"19b50f94276287be6e39630e5093a8b6983523b7","modified":1645257138337},{"_id":"public/archives/2022/index.html","hash":"46edc5f187fc7b21213d01a0ea02825a9d210a5a","modified":1645257138337},{"_id":"public/archives/2022/01/index.html","hash":"941808c492c8f756575bd339229d6342e8d26039","modified":1645257138337},{"_id":"public/categories/Python/index.html","hash":"3f9a8c9bf15abeed77ea057541aa1b161c37713a","modified":1645257138337},{"_id":"public/categories/CICD自动构建/index.html","hash":"04bce367c941b8a59bad02f02e15fde109c1642d","modified":1645257138337},{"_id":"public/categories/Markdown/index.html","hash":"22b23a137c72ffae73de5d3150bc0199a4ef9787","modified":1645257138337},{"_id":"public/tags/Python/index.html","hash":"c1c1995a736db12e2738b794caa66091540e95f9","modified":1645257138337},{"_id":"public/tags/Git/index.html","hash":"0d66d7a69ed56726e6d21b51f01d6faaded22989","modified":1645257138337},{"_id":"public/tags/Github/index.html","hash":"a6f9734f5becf843a0e70242b7a71152e719344a","modified":1645257138337},{"_id":"public/index.html","hash":"2cf07edd180d2a73f7ae1f48476f65053e0e67cf","modified":1645257138337},{"_id":"public/tags/Gitlab/index.html","hash":"f60db13c4c9d09ef7093eb7dca883ca89537f48a","modified":1645257138337},{"_id":"public/tags/SVN/index.html","hash":"719b474f775d384ffb45114967ebbfd5367d6cad","modified":1645257138337},{"_id":"public/tags/Typora/index.html","hash":"48b78e0b01f7911ec239e066b5dd6aa84b36f231","modified":1645257138337},{"_id":"public/tags/Markdown/index.html","hash":"007cef1d79a0b2f5c81891971465ee0b10f1f764","modified":1645257138337},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1645257138337},{"_id":"public/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1645257138337},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1645257138337},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1645257138337},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1645257138337},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1645257138337},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1645257138337},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1645257138337},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1645257138337},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1645257138337},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1645257138337},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1645257138337},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1645257138337},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1645257138337},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1645257138337},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1645257138337},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1645257138337},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1645257138337},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1645257138337},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1645257138337},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1645257138337},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1645257138337},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1645257138337},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1645257138337},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1645257138337},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1645257138337},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1645257138337},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1645257138337},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1645257138337},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1645257138337},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1645257138337},{"_id":"public/css/prism-line-numbers.css","hash":"a1692758d22c6cdf6fd1a8dafc9b4b98e41d3138","modified":1645257138337},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1645257138337},{"_id":"public/medias/reward/alipay.png","hash":"b747f6e87103d71429dfbf902f122b90c612c02a","modified":1645257138337},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1645257138337},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1645257138337},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1645257138337},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1645257138337},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1645257138337},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1645257138337},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1645257138337},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1645257138337},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1645257138337},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1645257138337},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1645257138337},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1645257138337},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1645257138337},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1645257138337},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1645257138337},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1645257138337},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1645257138337},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1645257138337},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1645257138337},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1645257138337},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1645257138337},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1645257138337},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1645257138337},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1645257138337},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1645257138337},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1645257138337},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1645257138337},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1645257138337},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1645257138337},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1645257138337},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1645257138337},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1645257138337},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1645257138337},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1645257138337},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1645257138337},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1645257138337},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1645257138337},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1645257138337},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1645257138337},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1645257138337},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1645257138337},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1645257138337},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1645257138337},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1645257138337},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1645257138337},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1645257138337},{"_id":"public/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1645257138337},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1645257138337},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1645257138337},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1645257138337},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1645257138337},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1645257138337},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1645257138337},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1645257138337},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1645257138337},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1645257138337},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1645257138337},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1645257138337},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1645257138337},{"_id":"public/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1645257138337},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1645257138337},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1645257138337},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1645257138337},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1645257138337},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1645257138337},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1645257138337},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1645257138337},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1645257138337},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1645257138337},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1645257138337},{"_id":"public/medias/reward/wechat.png","hash":"a36fabc4b691c7739730a85f5749fb6cb66d638c","modified":1645257138337},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1645257138337},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1645257138337},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1645257138337},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1645257138337},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1645257138337},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1645257138337},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1645257138337},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1645257138337},{"_id":"public/medias/logo.png","hash":"2c571c3c3dffe56b8cbf1b14a1539f8852f5f231","modified":1645257138337},{"_id":"public/medias/avatar.png","hash":"2c571c3c3dffe56b8cbf1b14a1539f8852f5f231","modified":1645257138337},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1645257138337},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1645257138337},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1645257138337}],"Category":[{"name":"Python","_id":"ckztjmdh60004nb668201h7l2"},{"name":"CICD自动构建","_id":"ckztjmdhg000bnb66apjgbfyl"},{"name":"Markdown","_id":"ckztjmdhi000fnb661pw731il"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://testcabana.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://testcabana.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://testcabana.github.io/","title":"前去学习"}]},{"_id":"musics","data":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}]}],"Page":[{"title":"Tags","date":"2022-01-21T10:23:38.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-01-21 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2022-02-19T07:34:32.687Z","path":"tags/index.html","comments":1,"_id":"ckztjmdgn0000nb661uqm3lil","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://testcabana.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://testcabana.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://testcabana.github.io/","title":"前去学习"}],"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}]}},"excerpt":"","more":""},{"title":"Categories","date":"2018-09-30T09:25:30.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2022-01-22T04:41:46.554Z","path":"categories/index.html","comments":1,"_id":"ckztjmdh30002nb66he2yfq9u","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://testcabana.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://testcabana.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://testcabana.github.io/","title":"前去学习"}],"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}]}},"excerpt":"","more":""},{"title":"Friends","date":"2018-12-12T13:25:30.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2022-01-22T04:44:15.357Z","path":"friends/index.html","comments":1,"_id":"ckztjmdhb0006nb66c4pmaxhv","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://testcabana.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://testcabana.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://testcabana.github.io/","title":"前去学习"}],"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}]}},"excerpt":"","more":""},{"title":"About","date":"2018-09-30T09:25:30.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2022-02-19T07:34:32.687Z","path":"about/index.html","comments":1,"_id":"ckztjmdhe0008nb66bd7re3ky","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://testcabana.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://testcabana.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://testcabana.github.io/","title":"前去学习"}],"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}]}},"excerpt":"","more":""}],"Post":[{"title":"学习了一下接口框架DDT数据的传递过程","_content":"\n#### 学习了一下接口框架DDT数据的传递过程\n\n##### 话说在前面\n\n- 在之前的接口脚本中，用csv文件、xlsx文件作为载体存放接口用例的数据。现在学习一下xmind，个人觉得xmind的结构：一个主题下面有多个子主题，在一个接口多种场景（正常值、空值、错误值）下，可以让用例文件更直观。\n- 但我自己也只是大概的debug了一下，原来的代码没啥备注，啃得可能也有些错误，有大佬指点一下的话感激涕零~\n\n\n\n##### 一、xmind结构\n\n![image-20211110142019391](C:\\Users\\86183\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211110142019391.png)\n\nxmind文件名（cyTest.xmind）\n\n画布：等同于excel中sheet的概念，默认名为：画布 1\n\n主题：一个画布由一个中心主题开始延伸，中心主题下包含子主题。\n\n主题的一些要素\n\n1. title标题：分支主题2\n2. note备注：备注2\n\n3. markers标记：priority-2优先级、tag-orange标签颜色、smiley-cry情绪、task-start任务完成度、等\n\n4. labels标签：标签二\n\n5. link链接：http://www.baidu.com\n6. topics子主题：子主题也是相同的要素\n\n\n\n##### 二、python的xmindparser模块常用方法\n\n```python\nimport xmindparser\n# xmindparser配置\nxmindparser.config = {\n            'showTopicId': False, #是否展示主题ID\n            'hideEmptyValue': True， #是否隐藏空值\n            'showStructure': False, #是否展示结构值\n            'showRelationship': False #是否展示节点关系\n        }\nfilePath = r'/文件路径/cyTest.xmind'\ndata_json = xmindparser.xmind_to_json(filePath) #解析成json数据类型\ndata_dcit = xmindparser.xmind_to_dict(filePath) #解析成dict数据类型 - 常用\ndata_xml = xmindparser.xmind_to_xml(filePath) #解析成xml数据类型 \n# 解析到文件\nfile_json = xmindparser.xmind_to_file(filePath, 'json')\nfile_xml = xmindparser.xmind_to_file(filePath, 'xml')\n#[{'title': '画布 1', 'topic': {'title': '中心主题', 'topics': [{'title': '分支主题 1', 'note': '备注一', 'makers': ['priority-1', 'tag-red', 'smiley-laugh', 'task-done'], 'labels': ['标签一','标签二'], 'topics': [{'title': '子主题 1', 'makers': ['flag-red']}, {'title': '子主题 2'}]}, {'title': '分支主题 2', 'note': '备注二', 'makers': ['priority-2', 'tag-orange', 'smiley-cry', 'task-start'], 'labels': ['标签二'], 'link': 'http://www.baidu.com', 'topics': [{'title': '子主题 3'}]}]}, 'structure': 'org.xmind.ui.map.unbalanced'}]\n```\n\n\n\n##### 三、公司的xmind用例结构\n\n<img src=\"C:\\Users\\86183\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211111194307394.png\" alt=\"image-20211111194307394\" style=\"zoom:200%;\" />\n\n一级主题，作为class名，所以尽量用首字母大写的英文单次（必须英文字母或下划线开头、字母/数字/下划线组成，如果有其他字符会被替换为\"_\"）\n\n```python\ndef to_safe_name(string):\n    return str(re.sub(\"[^a-zA-Z0-9_]+\", \"_\", string)\n```\n\n\n\n##### 四、框架中读取xmind接口测试数据的代码解析\n\n这一部门的代码我全部copy到下面了，因为自己之前ddt没有用过xmind来作为数据载体，所以手写了一遍去理解xmind模板为什么要这么写，觉得太长的话就直接看最后函数把接口数据整理成什么样的格式就行。\n\n```python\nfrom xmindparser import xmind_to_dict\nimport json\n\nHOST_TAG_CHOICE = [\"mk\", \"qw\", \"bill\", \"qyapi\"]  # 对应 host_<mk/qw>\nPRIORITY_TAG_CHOICE = [\"critical\", \"blocker\", \"normal\"]\n\nclass ReadXmind(object):\n    \"\"\"读取xmind内容，返回字典列表（list[dict1,dict2]）\"\"\"\n    def __init__(self, file_path, canvas=\"\"):\n        self.file_path = file_path\n        self.canvas = canvas\n        self.xmind_dict_list = xmind_to_dict(file_path)\n\n    def get_canvas_name_list(self):\n        '''遍历xmind文件的每一个画布，得到全部画布的名称装成列表 ['画布 1', '画布 2']，但是如果传入了canvas，就不重新读直接return'''\n        return [self.canvas] if self.canvas else [cv.get('title') for cv in self.xmind_dict_list]\n\n    def get_canvas_topic(self, canvas=\"画布 1\"):\n        \"\"\"\n        根据初始指定的画布名称（对应于excel的sheet表），返回该画布的接口数据\n        :return: {'title': '画布中心主题', 'topics': [{接口1信息},{接口2信息},...]} 此时title为画布 1 的中心主题 BillTrailSettingApi\n        \"\"\"\n        for cv in self.xmind_dict_list: #遍历每一个画布\n            if cv.get('title') == canvas: #如果画布名==传入的画布名参数\n                return cv.get('topic') #return画布下的全部接口[{接口1信息},{接口2信息},...]\n        else:\n            raise Exception(\"Xmind中画布<{}>不存在!\".format(canvas))\n\n    def get_canvas_data(self, canvas):\n        \"\"\"\n        获取画布内所有API-CASE信息\n        :return: canvas_data\n        case_dict 字典：存放一个用例的信息，eg用例名event_001、用例描述desc等\n        api_dict 字典：存放一个接口的信息，eg接口名api_name、依赖depends、所有用例test_case_list [{case_dict},{case_dict},...]\n        api_case_dict_list 数组：存放一个画布的所有接口信息，[{api_dict},{api_dict},...]\n        canvas_data 字典：存放一个画布的信息，{'desc': '画布 1', 'module': 'BillTrailSettingApi', 'api_case_list':[{api_dict},{api_dict},...]} \n        \"\"\"\n        canvas_data = {} #dict 存放：画布名、中心主题、api_case_list接口列表\n        api_case_dict_list = [] #list 存放：api_dict\n        canvas_topic = self.get_canvas_topic(canvas)\n        module_name = canvas_topic.get('title')\n        canvas_data['desc'] = canvas #画布名\n        canvas_data['module'] = module_name #中心主题 BillTrailSettingApi\n        api_list = canvas_topic.get('topics') or [] #接口列表 [{接口1信息},{接口2信息},...]\n        for api in api_list: #遍历每一个接口\n            api_dict = {} #存放：接口信息\n            api_name = api.get('title') if api.get('title') else \"\" #api名 event\n            api_desc = api.get('note') if api.get('note') else \"\" #描述 新增事件\n            api_labels = api.get('labels')  #标签 depends、host、sleep\n            api_dict['api_name'] = api_name\n            api_dict['api_desc'] = api_desc\n            api_dict['depends'] = []  # depends 依赖标签\n            api_dict['sleep'] = 0  # sleep 标签\n            api_dict['skipif'] = \"\"  # skipif 标签\n            host_tag = \"host_\" + HOST_TAG_CHOICE[0]  # host 标签 默认为qw\n            # 如果有接口数据有标签，重新赋值，否则就是上述空值和默认值\n            if api_labels:\n                for alb in api_labels: #遍历每个标签 'labels': ['host=qw', 'depends=addUser', 'sleep=2', 'skipif=skip', 'name=name']\n                    lb_dps = alb.split(\"depends=\") #返回['host=qw'] 子字符串在父字符串中不存在时，返回整个父字符串作为列表的元素\n                    lb_dps2 = alb.split(\"name=\")\n                    lb_sleep = alb.split(\"sleep=\")\n                    lb_skipif = alb.split(\"skipif=\")\n                    lb_host = alb.split(\"host=\") #返回['','qw']\n                    if len(lb_dps) == 2:\n                        api_dict['depends'].append(lb_dps[-1])\n                    if len(lb_dps2) == 2:\n                        api_dict['depends'].append(lb_dps2[-1])\n                    if len(lb_sleep) == 2:\n                        api_dict['sleep'] = int(lb_sleep[-1])\n                    if len(lb_skipif) == 2:\n                        api_dict['skipif'] = lb_skipif[-1]\n                    if len(lb_host) == 2 and lb_host[-1] in HOST_TAG_CHOICE:\n                        host_tag = \"host_\" + lb_host[-1]\n            api_dict['host_tag'] = host_tag\n            api_dict['test_case_list'] = []  #存放：该接口的全部用例\n            api_detail = api.get('topics')[0]\n            path = api_detail.get('title') or \"\" #接口路径\n            rq = api_detail.get('topics')[0]\n            method = rq.get('title') or \"\" #请求方法\n            api_dict['path'] = path\n            api_dict['method'] = method\n            case_cf_list = rq.get('topics') #一个接口的多个条用例 [{用例1},{用例2},...]\n            if api_name.startswith('#'):  #被注释掉的接口，不解析用例参数\n                continue\n            for idx, case in enumerate(case_cf_list): #enumerate将可遍历的数据对象组合为一个索引序列\n                if case.get('title').startswith('#'):  #被注释掉的用例，不解析\n                    continue\n                case_dict = {} #存放：用例信息\n                case_labels = case.get('labels')  # 用例描述下的标签\n                case_dict['module'] = module_name  # 模块名\n                case_dict['api_name'] = api_name  # api名\n                case_dict['host_tag'] = host_tag  # host_qw / host_mk\n                case_dict['api_desc'] = api_desc  # api描述\n                case_dict['depends'] = api_dict['depends']  # api依赖\n                case_dict['sleep'] = api_dict['sleep']  # api sleep\n                case_dict['skipif'] = api_dict['skipif']  # api skipif\n                case_dict['name'] = f\"{api_name}_\" + str(idx+1).zfill(3)  # case名 zfill填充字符串为三位 event_001 event_002\n                case_dict['desc'] = case.get('title')  # 用例描述\n                case_dict['priority'] = \"\"  # 用例优先级\n                if case_labels: #标签为 用例严重程度\n                    for clb in case_labels:\n                        if clb in PRIORITY_TAG_CHOICE:\n                            case_dict['priority'] = clb\n                            break\n                case_dict['method'] = method  # method: get/post/...\n                case_dict['path'] = path  # api path\n                case_input_output = case.get('topics')[0] #入参及后面的子主题\n                case_dict['data'] = case_input_output.get('title')  #入参\n                output_set_vars = case_input_output.get('topics')\n                str_expect = output_set_vars[0].get('title') #期望结果\n                try:\n                    case_dict['expect'] = json.loads(str_expect, strict=False)  #xmind读出来的期望结果str转换成字典\n                # 自定义异常 定位到主题名-api名-期望结果\n                except Exception as e:\n                    print(\"API:{0}->{1}\\nJSON Content:{2}\".format(module_name, api_name, str_expect))\n                    raise e\n                case_dict['set_vars'] = {}\n                if len(output_set_vars) > 1: #期望结果有两个主题 即设置了全局的变量\n                    str_set_vars = output_set_vars[1].get('title') #拿到变量'{\"customerId\": \"$..data.id\"}'\n                    try:\n                        case_dict['set_vars'] = json.loads(str_set_vars, strict=False)  # 需要设置为全局的变量，key-value， key为保存变量名，value为字段查询名或jsonpath\n                    #自定义异常 变量写法有问题 定位到主题名-api名-变量\n                    except Exception as e:\n                        print(\"API:{0}->{1}\\nJSON Content:{2}\".format(module_name, api_name, str_set_vars))\n                        raise e\n                api_dict['test_case_list'].append(dict(case_dict))\n            api_case_dict_list.append(api_dict)\n        canvas_data['api_case_list'] = api_case_dict_list\n        return canvas_data\n\n    def get_xmind_data(self):\n        '''读xmind每一个画布的数据 [{canvas_data},{canvas_data},...]'''\n        return [self.get_canvas_data(cv) for cv in self.get_canvas_name_list()]\n'''\ncase_dict的值，之后会作为pytest的传参\n{'module': 'BillTrailSettingApi', 'api_name': 'event', 'host_tag': 'host_qw', 'api_desc': '新增事件', \n'depends': ['addUser', 'name'], 'sleep': 2, 'skipif': 'skip', \n'name': 'event_001', 'desc': '异常值（新增事件参数为异常值校验）', 'priority': 'critical', 'method': 'POST', \n'path': '/bill-trail-settings-api/trail/event', 'data': '{\"eventIcon\": \"事件图标\", \"eventName\": \"事件名称\", \"eventTopic\": \"事件\", \"fieldList\": \"事件内容列表\", \"id\": \"事件ID，编辑时必传\", \"operator\": \"操作人\", \"remark\": \"备注\", \"trailId\": \"旅程项目ID\"}', \n'expect': {'code': 8401, 'msg': '参数不能为空', 'data': None}, 'set_vars': {'customerId': '$..data.id'}}\n'''\n```\n\n一个点：因为之前没找到完整的xmind模板，不明白为什么api_name主题下的标签，depends=  和 name=  要存在一个数组depends中，最后悟了。方便dependency去传参，这样没有依赖，却需要别名给其他接口依赖时，depends传入空数组[]。妙！（dict的value存数组也完全ok）\n\n```python\ndp_name, depends = None, []\nfor dp in api_data['depends']: #[\"addEevent\",\"event\"] api_name=event\n    if dp == api_name: #如果apiname是当前自己接口的名字，作为别名\n        dp_name = api_name\n        continue\n\telse:\n\t\tdepends.append(dp)\nif dp_name or len(depends) > 0:\n\tlogger.info(\"dependency: {} : name={},depends={}\".format(func_name, dp_name, depends))\n\tattrs[func_name] = pytest.mark.dependency(name=dp_name, depends=depends, scope='class')(attrs[func_name])\n# skip以#开头的测试用例\nif api_name.startswith(\"#\") or api_desc.startswith(\"#\"):\n\tattrs[func_name] = pytest.mark.skip(reason='测试用例被注释#')(attrs[func_name])\n```\n\n\n\n##### 五、接口脚本自动生成的大概原理和过程\n\n所用技术：文件写入脚本、compile()内置函数编译、metaclass对子类的改写、装饰器与闭包函数，和一些杂七杂八的\n\n上面写到了DDT的测试数据xmind载体的解析，拿到了参数之后传入pytest即可（题外话pytest两种传参方式，fixture或者parametrize，一定要知晓参数传递过程的），接下来写一下作者大大将参数融进pytest的过程，可能自己理解的比较简陋，有大佬指点的话感激涕零~\n\n第一步：构建用例脚本，就是with open去写就ok了，主要写入的是：导包的内容、类模板（包括脚本名称和测试数据），compile后生成脚本的类如下所示~\n\n```python\n@allure.feature('画布 1')\nclass TestBillTrailSettingApi(PreRequest, metaclass=CaseMetaClass):\n    test_py = \"test_bill-trail-settings-api.py\"\n    test_cases_data = [{接口1},{接口2},...]\n```\n\nPreRequest这个父类就是一些请求前的操作，比如拿变量值、sessionId，就不展开了。\n\n第二步：compile生成函数对象，用例的模板字符串参数传入api_name，来动态生成接口函数。模板有很多执行时的细节操作，比如skip、allure敏捷标记等，不详细展开了，贴一下生成的函数代码。如下~\n\n```python\ndef create_function(function_express, namespace=None):\n    \"\"\"动态生成函数对象\"\"\"\n    if namespace is not None:\n        builtins.__dict__.update(namespace) # 哇 全部添加到内建模块中\n    module_code = compile(function_express, '', 'exec')  # 根据模板(字符串)生成可执行的代码，mode为exec（源包含多个python语句时使用）\n    function_code = [x for x in module_code.co_consts if isinstance(x, types.CodeType)][0] #注意isinstance()会考虑继承关系 所以这里用type()不行哟！\n    return types.FunctionType(function_code, builtins.__dict__) #返回内存地址<function test_001_event at 0x05A0AA98>\n```\n\n第三步：重点来了！！写一个metaclass，来修改子类的属性或方法\n\n```python\nclass CaseMetaClass(type):\n    def __new__(cls, name, bases, attrs):\n        # print(\"此时new的对象是\",cls.__name__) #CaseMetaClass\n        test_cases_data = attrs.pop('test_cases_data') # 字典的pop有返回值 拿到一个画布的接口数据[{接口1},{接口2},...]\n        for idx, api_data in enumerate(test_cases_data):\n            if is_contains_chinese(api_data['api_name']) and not is_contains_chinese(api_data['api_desc']): #检查了一手api_name是否包含中文，decs为英文，是就互换一下\n                api_data['api_name'], api_data['api_desc'] = api_data['api_desc'], api_data['api_name']\n            api_name = api_data['api_name']\n            api_name = \"\" if api_name is None else api_name #又让api_name兼容一手None值\n            api_desc = api_data['api_desc']\n            case_list = api_data['test_case_list'] #一个接口的用例列表 [{case_dict},{case_dict},...]\n            func_name = 'test_{0}_{1}'.format(str(idx+1).zfill(3), to_safe_name(api_name.replace(\"#\", \"\"))) #api_name=event格式统一成 test_001_event\n            function = create_function(func_template.format(func_name=func_name),\n                                       namespace={\n                                           'pytest': pytest,\n                                           'allure': allure,\n                                           'logger': logger,\n                                           'is_contains_chinese': is_contains_chinese,\n                                           'sleep_progressbar': sleep_progressbar,\n                                           'methodcaller': methodcaller,\n                                           'setup': setup,\n                                           'callback': callback,\n                                       })\n            ids = [str(c).zfill(3) for c in range(1, len(case_list)+1)] # 接口有多少条用例 001 002 003...\n            # 哇 这个写法又学习了，返回的function内存地址后，直接手工闭包！和用parametrize装饰器一样哟，nice！\n            attrs[func_name] = pytest.mark.parametrize('case_data', case_list, ids=ids)(function)\n            dp_name, depends = None, []\n            for dp in api_data['depends']:\n                if dp == api_name:\n                    dp_name = api_name\n                    continue\n                else:\n                    depends.append(dp)\n            if dp_name or len(depends) > 0:\n                logger.info(\"dependency: {} : name={},depends={}\".format(func_name, dp_name, depends))\n                attrs[func_name] = pytest.mark.dependency(name=dp_name, depends=depends, scope='class')(attrs[func_name]) #装饰一手 依赖\n            if api_name.startswith(\"#\") or api_desc.startswith(\"#\"):\n                attrs[func_name] = pytest.mark.skip(reason='测试用例被注释#')(attrs[func_name]) #再装饰一手skip 基本齐活，坐等调用func_name，pytest就嗖嗖运行起来惹，妙！\n            # 集成allure装饰器 这个不知道是不是作者大大觉得模块下面展示case就行了，再打story好懒得挨个点开喔，我是这么想的~\n            # attrs[func_name] = allure.story(api_data['api_desc'])(attrs[func_name])\n        return super().__new__(cls, name, bases, attrs)\n```\n\n一些点：\n\n1、pytest在收集用例时，按照test_ 开头去找，自动生成的脚本就是test_ 文件名.py，测试用例集按照类来展示一个xmind文件每个画布的接口用例，比如上面的class TestBillTrailSettingApi()，pytest执行时按顺序去解析类，会先调用CaseMetaClass.__ new __()来创建类，所以CaseMetaClass可以借助attrs来改变TestBillTrailSettingApi()类的属性或方法。\n\n2、metaclass我的理解是the class of the class，类的类，它new出来的是一个类，而非实例。自定义的CaseMetaClass通过new方法返回子类的name、bases、attrs即类名、继承的集合、属性方法。这是meclass与继承不一样层面的原因，子类继承父类除私有属性和方法外的特性，对父类进行重写，但父类无法操纵子类，借用metaclass，就可以对子类进行操作，像装饰器一样去【动态修改】。（关于metaclass这篇还可以：https://www.cnblogs.com/yssjun/p/9832526.html?ivk_sa=1024320u，多多debug试一试理解更快）\n\n3、在上述代码的new方法中，通过“手工闭包”来形成装饰器，将函数内存地址传给pytest.mark.parametrize()，等同于平常使用@pytest.mark.parametrize()。下面写了一个最最最简单的闭包函数，当然还有装饰方法、装饰器传参等各种情况就不细说了。只是简单举个栗子~\n\n```python\n def outer(func):\n        def inner():\n            print(\"before\")\n            func()\n            print(\"after\")\n        return inner\n    \n    @outer\n    def cytest():\n        print(\"陈语测试\")\n    cytest() #装饰后调用原函数\n    \n    #这等价于上面的装饰\n    cytest = outer(cytest)\n    cytest() #调用闭包函数inner\n```\n\n4、当xmind的一个画布由多个接口，new方法在for循环中遍历每个接口，根据接口api_name来使子类动态生成多个function，即动态生成了多个接口用例集了，如下图。\n\n![image-20211120151106113](C:\\Users\\86183\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120151106113.png)\n\n##### 六、写不动了\n\n以上就是大致把数据流看了一下，做的笔记。\n\n这样run_main主入口脚本的运行过程就可以串起来啦\n","source":"_posts/学习了一下接口框架DDT数据的传递过程.md","raw":"---\ntitle: 学习了一下接口框架DDT数据的传递过程\ncategories: Python\ntags:\n  - Python\n---\n\n#### 学习了一下接口框架DDT数据的传递过程\n\n##### 话说在前面\n\n- 在之前的接口脚本中，用csv文件、xlsx文件作为载体存放接口用例的数据。现在学习一下xmind，个人觉得xmind的结构：一个主题下面有多个子主题，在一个接口多种场景（正常值、空值、错误值）下，可以让用例文件更直观。\n- 但我自己也只是大概的debug了一下，原来的代码没啥备注，啃得可能也有些错误，有大佬指点一下的话感激涕零~\n\n\n\n##### 一、xmind结构\n\n![image-20211110142019391](C:\\Users\\86183\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211110142019391.png)\n\nxmind文件名（cyTest.xmind）\n\n画布：等同于excel中sheet的概念，默认名为：画布 1\n\n主题：一个画布由一个中心主题开始延伸，中心主题下包含子主题。\n\n主题的一些要素\n\n1. title标题：分支主题2\n2. note备注：备注2\n\n3. markers标记：priority-2优先级、tag-orange标签颜色、smiley-cry情绪、task-start任务完成度、等\n\n4. labels标签：标签二\n\n5. link链接：http://www.baidu.com\n6. topics子主题：子主题也是相同的要素\n\n\n\n##### 二、python的xmindparser模块常用方法\n\n```python\nimport xmindparser\n# xmindparser配置\nxmindparser.config = {\n            'showTopicId': False, #是否展示主题ID\n            'hideEmptyValue': True， #是否隐藏空值\n            'showStructure': False, #是否展示结构值\n            'showRelationship': False #是否展示节点关系\n        }\nfilePath = r'/文件路径/cyTest.xmind'\ndata_json = xmindparser.xmind_to_json(filePath) #解析成json数据类型\ndata_dcit = xmindparser.xmind_to_dict(filePath) #解析成dict数据类型 - 常用\ndata_xml = xmindparser.xmind_to_xml(filePath) #解析成xml数据类型 \n# 解析到文件\nfile_json = xmindparser.xmind_to_file(filePath, 'json')\nfile_xml = xmindparser.xmind_to_file(filePath, 'xml')\n#[{'title': '画布 1', 'topic': {'title': '中心主题', 'topics': [{'title': '分支主题 1', 'note': '备注一', 'makers': ['priority-1', 'tag-red', 'smiley-laugh', 'task-done'], 'labels': ['标签一','标签二'], 'topics': [{'title': '子主题 1', 'makers': ['flag-red']}, {'title': '子主题 2'}]}, {'title': '分支主题 2', 'note': '备注二', 'makers': ['priority-2', 'tag-orange', 'smiley-cry', 'task-start'], 'labels': ['标签二'], 'link': 'http://www.baidu.com', 'topics': [{'title': '子主题 3'}]}]}, 'structure': 'org.xmind.ui.map.unbalanced'}]\n```\n\n\n\n##### 三、公司的xmind用例结构\n\n<img src=\"C:\\Users\\86183\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211111194307394.png\" alt=\"image-20211111194307394\" style=\"zoom:200%;\" />\n\n一级主题，作为class名，所以尽量用首字母大写的英文单次（必须英文字母或下划线开头、字母/数字/下划线组成，如果有其他字符会被替换为\"_\"）\n\n```python\ndef to_safe_name(string):\n    return str(re.sub(\"[^a-zA-Z0-9_]+\", \"_\", string)\n```\n\n\n\n##### 四、框架中读取xmind接口测试数据的代码解析\n\n这一部门的代码我全部copy到下面了，因为自己之前ddt没有用过xmind来作为数据载体，所以手写了一遍去理解xmind模板为什么要这么写，觉得太长的话就直接看最后函数把接口数据整理成什么样的格式就行。\n\n```python\nfrom xmindparser import xmind_to_dict\nimport json\n\nHOST_TAG_CHOICE = [\"mk\", \"qw\", \"bill\", \"qyapi\"]  # 对应 host_<mk/qw>\nPRIORITY_TAG_CHOICE = [\"critical\", \"blocker\", \"normal\"]\n\nclass ReadXmind(object):\n    \"\"\"读取xmind内容，返回字典列表（list[dict1,dict2]）\"\"\"\n    def __init__(self, file_path, canvas=\"\"):\n        self.file_path = file_path\n        self.canvas = canvas\n        self.xmind_dict_list = xmind_to_dict(file_path)\n\n    def get_canvas_name_list(self):\n        '''遍历xmind文件的每一个画布，得到全部画布的名称装成列表 ['画布 1', '画布 2']，但是如果传入了canvas，就不重新读直接return'''\n        return [self.canvas] if self.canvas else [cv.get('title') for cv in self.xmind_dict_list]\n\n    def get_canvas_topic(self, canvas=\"画布 1\"):\n        \"\"\"\n        根据初始指定的画布名称（对应于excel的sheet表），返回该画布的接口数据\n        :return: {'title': '画布中心主题', 'topics': [{接口1信息},{接口2信息},...]} 此时title为画布 1 的中心主题 BillTrailSettingApi\n        \"\"\"\n        for cv in self.xmind_dict_list: #遍历每一个画布\n            if cv.get('title') == canvas: #如果画布名==传入的画布名参数\n                return cv.get('topic') #return画布下的全部接口[{接口1信息},{接口2信息},...]\n        else:\n            raise Exception(\"Xmind中画布<{}>不存在!\".format(canvas))\n\n    def get_canvas_data(self, canvas):\n        \"\"\"\n        获取画布内所有API-CASE信息\n        :return: canvas_data\n        case_dict 字典：存放一个用例的信息，eg用例名event_001、用例描述desc等\n        api_dict 字典：存放一个接口的信息，eg接口名api_name、依赖depends、所有用例test_case_list [{case_dict},{case_dict},...]\n        api_case_dict_list 数组：存放一个画布的所有接口信息，[{api_dict},{api_dict},...]\n        canvas_data 字典：存放一个画布的信息，{'desc': '画布 1', 'module': 'BillTrailSettingApi', 'api_case_list':[{api_dict},{api_dict},...]} \n        \"\"\"\n        canvas_data = {} #dict 存放：画布名、中心主题、api_case_list接口列表\n        api_case_dict_list = [] #list 存放：api_dict\n        canvas_topic = self.get_canvas_topic(canvas)\n        module_name = canvas_topic.get('title')\n        canvas_data['desc'] = canvas #画布名\n        canvas_data['module'] = module_name #中心主题 BillTrailSettingApi\n        api_list = canvas_topic.get('topics') or [] #接口列表 [{接口1信息},{接口2信息},...]\n        for api in api_list: #遍历每一个接口\n            api_dict = {} #存放：接口信息\n            api_name = api.get('title') if api.get('title') else \"\" #api名 event\n            api_desc = api.get('note') if api.get('note') else \"\" #描述 新增事件\n            api_labels = api.get('labels')  #标签 depends、host、sleep\n            api_dict['api_name'] = api_name\n            api_dict['api_desc'] = api_desc\n            api_dict['depends'] = []  # depends 依赖标签\n            api_dict['sleep'] = 0  # sleep 标签\n            api_dict['skipif'] = \"\"  # skipif 标签\n            host_tag = \"host_\" + HOST_TAG_CHOICE[0]  # host 标签 默认为qw\n            # 如果有接口数据有标签，重新赋值，否则就是上述空值和默认值\n            if api_labels:\n                for alb in api_labels: #遍历每个标签 'labels': ['host=qw', 'depends=addUser', 'sleep=2', 'skipif=skip', 'name=name']\n                    lb_dps = alb.split(\"depends=\") #返回['host=qw'] 子字符串在父字符串中不存在时，返回整个父字符串作为列表的元素\n                    lb_dps2 = alb.split(\"name=\")\n                    lb_sleep = alb.split(\"sleep=\")\n                    lb_skipif = alb.split(\"skipif=\")\n                    lb_host = alb.split(\"host=\") #返回['','qw']\n                    if len(lb_dps) == 2:\n                        api_dict['depends'].append(lb_dps[-1])\n                    if len(lb_dps2) == 2:\n                        api_dict['depends'].append(lb_dps2[-1])\n                    if len(lb_sleep) == 2:\n                        api_dict['sleep'] = int(lb_sleep[-1])\n                    if len(lb_skipif) == 2:\n                        api_dict['skipif'] = lb_skipif[-1]\n                    if len(lb_host) == 2 and lb_host[-1] in HOST_TAG_CHOICE:\n                        host_tag = \"host_\" + lb_host[-1]\n            api_dict['host_tag'] = host_tag\n            api_dict['test_case_list'] = []  #存放：该接口的全部用例\n            api_detail = api.get('topics')[0]\n            path = api_detail.get('title') or \"\" #接口路径\n            rq = api_detail.get('topics')[0]\n            method = rq.get('title') or \"\" #请求方法\n            api_dict['path'] = path\n            api_dict['method'] = method\n            case_cf_list = rq.get('topics') #一个接口的多个条用例 [{用例1},{用例2},...]\n            if api_name.startswith('#'):  #被注释掉的接口，不解析用例参数\n                continue\n            for idx, case in enumerate(case_cf_list): #enumerate将可遍历的数据对象组合为一个索引序列\n                if case.get('title').startswith('#'):  #被注释掉的用例，不解析\n                    continue\n                case_dict = {} #存放：用例信息\n                case_labels = case.get('labels')  # 用例描述下的标签\n                case_dict['module'] = module_name  # 模块名\n                case_dict['api_name'] = api_name  # api名\n                case_dict['host_tag'] = host_tag  # host_qw / host_mk\n                case_dict['api_desc'] = api_desc  # api描述\n                case_dict['depends'] = api_dict['depends']  # api依赖\n                case_dict['sleep'] = api_dict['sleep']  # api sleep\n                case_dict['skipif'] = api_dict['skipif']  # api skipif\n                case_dict['name'] = f\"{api_name}_\" + str(idx+1).zfill(3)  # case名 zfill填充字符串为三位 event_001 event_002\n                case_dict['desc'] = case.get('title')  # 用例描述\n                case_dict['priority'] = \"\"  # 用例优先级\n                if case_labels: #标签为 用例严重程度\n                    for clb in case_labels:\n                        if clb in PRIORITY_TAG_CHOICE:\n                            case_dict['priority'] = clb\n                            break\n                case_dict['method'] = method  # method: get/post/...\n                case_dict['path'] = path  # api path\n                case_input_output = case.get('topics')[0] #入参及后面的子主题\n                case_dict['data'] = case_input_output.get('title')  #入参\n                output_set_vars = case_input_output.get('topics')\n                str_expect = output_set_vars[0].get('title') #期望结果\n                try:\n                    case_dict['expect'] = json.loads(str_expect, strict=False)  #xmind读出来的期望结果str转换成字典\n                # 自定义异常 定位到主题名-api名-期望结果\n                except Exception as e:\n                    print(\"API:{0}->{1}\\nJSON Content:{2}\".format(module_name, api_name, str_expect))\n                    raise e\n                case_dict['set_vars'] = {}\n                if len(output_set_vars) > 1: #期望结果有两个主题 即设置了全局的变量\n                    str_set_vars = output_set_vars[1].get('title') #拿到变量'{\"customerId\": \"$..data.id\"}'\n                    try:\n                        case_dict['set_vars'] = json.loads(str_set_vars, strict=False)  # 需要设置为全局的变量，key-value， key为保存变量名，value为字段查询名或jsonpath\n                    #自定义异常 变量写法有问题 定位到主题名-api名-变量\n                    except Exception as e:\n                        print(\"API:{0}->{1}\\nJSON Content:{2}\".format(module_name, api_name, str_set_vars))\n                        raise e\n                api_dict['test_case_list'].append(dict(case_dict))\n            api_case_dict_list.append(api_dict)\n        canvas_data['api_case_list'] = api_case_dict_list\n        return canvas_data\n\n    def get_xmind_data(self):\n        '''读xmind每一个画布的数据 [{canvas_data},{canvas_data},...]'''\n        return [self.get_canvas_data(cv) for cv in self.get_canvas_name_list()]\n'''\ncase_dict的值，之后会作为pytest的传参\n{'module': 'BillTrailSettingApi', 'api_name': 'event', 'host_tag': 'host_qw', 'api_desc': '新增事件', \n'depends': ['addUser', 'name'], 'sleep': 2, 'skipif': 'skip', \n'name': 'event_001', 'desc': '异常值（新增事件参数为异常值校验）', 'priority': 'critical', 'method': 'POST', \n'path': '/bill-trail-settings-api/trail/event', 'data': '{\"eventIcon\": \"事件图标\", \"eventName\": \"事件名称\", \"eventTopic\": \"事件\", \"fieldList\": \"事件内容列表\", \"id\": \"事件ID，编辑时必传\", \"operator\": \"操作人\", \"remark\": \"备注\", \"trailId\": \"旅程项目ID\"}', \n'expect': {'code': 8401, 'msg': '参数不能为空', 'data': None}, 'set_vars': {'customerId': '$..data.id'}}\n'''\n```\n\n一个点：因为之前没找到完整的xmind模板，不明白为什么api_name主题下的标签，depends=  和 name=  要存在一个数组depends中，最后悟了。方便dependency去传参，这样没有依赖，却需要别名给其他接口依赖时，depends传入空数组[]。妙！（dict的value存数组也完全ok）\n\n```python\ndp_name, depends = None, []\nfor dp in api_data['depends']: #[\"addEevent\",\"event\"] api_name=event\n    if dp == api_name: #如果apiname是当前自己接口的名字，作为别名\n        dp_name = api_name\n        continue\n\telse:\n\t\tdepends.append(dp)\nif dp_name or len(depends) > 0:\n\tlogger.info(\"dependency: {} : name={},depends={}\".format(func_name, dp_name, depends))\n\tattrs[func_name] = pytest.mark.dependency(name=dp_name, depends=depends, scope='class')(attrs[func_name])\n# skip以#开头的测试用例\nif api_name.startswith(\"#\") or api_desc.startswith(\"#\"):\n\tattrs[func_name] = pytest.mark.skip(reason='测试用例被注释#')(attrs[func_name])\n```\n\n\n\n##### 五、接口脚本自动生成的大概原理和过程\n\n所用技术：文件写入脚本、compile()内置函数编译、metaclass对子类的改写、装饰器与闭包函数，和一些杂七杂八的\n\n上面写到了DDT的测试数据xmind载体的解析，拿到了参数之后传入pytest即可（题外话pytest两种传参方式，fixture或者parametrize，一定要知晓参数传递过程的），接下来写一下作者大大将参数融进pytest的过程，可能自己理解的比较简陋，有大佬指点的话感激涕零~\n\n第一步：构建用例脚本，就是with open去写就ok了，主要写入的是：导包的内容、类模板（包括脚本名称和测试数据），compile后生成脚本的类如下所示~\n\n```python\n@allure.feature('画布 1')\nclass TestBillTrailSettingApi(PreRequest, metaclass=CaseMetaClass):\n    test_py = \"test_bill-trail-settings-api.py\"\n    test_cases_data = [{接口1},{接口2},...]\n```\n\nPreRequest这个父类就是一些请求前的操作，比如拿变量值、sessionId，就不展开了。\n\n第二步：compile生成函数对象，用例的模板字符串参数传入api_name，来动态生成接口函数。模板有很多执行时的细节操作，比如skip、allure敏捷标记等，不详细展开了，贴一下生成的函数代码。如下~\n\n```python\ndef create_function(function_express, namespace=None):\n    \"\"\"动态生成函数对象\"\"\"\n    if namespace is not None:\n        builtins.__dict__.update(namespace) # 哇 全部添加到内建模块中\n    module_code = compile(function_express, '', 'exec')  # 根据模板(字符串)生成可执行的代码，mode为exec（源包含多个python语句时使用）\n    function_code = [x for x in module_code.co_consts if isinstance(x, types.CodeType)][0] #注意isinstance()会考虑继承关系 所以这里用type()不行哟！\n    return types.FunctionType(function_code, builtins.__dict__) #返回内存地址<function test_001_event at 0x05A0AA98>\n```\n\n第三步：重点来了！！写一个metaclass，来修改子类的属性或方法\n\n```python\nclass CaseMetaClass(type):\n    def __new__(cls, name, bases, attrs):\n        # print(\"此时new的对象是\",cls.__name__) #CaseMetaClass\n        test_cases_data = attrs.pop('test_cases_data') # 字典的pop有返回值 拿到一个画布的接口数据[{接口1},{接口2},...]\n        for idx, api_data in enumerate(test_cases_data):\n            if is_contains_chinese(api_data['api_name']) and not is_contains_chinese(api_data['api_desc']): #检查了一手api_name是否包含中文，decs为英文，是就互换一下\n                api_data['api_name'], api_data['api_desc'] = api_data['api_desc'], api_data['api_name']\n            api_name = api_data['api_name']\n            api_name = \"\" if api_name is None else api_name #又让api_name兼容一手None值\n            api_desc = api_data['api_desc']\n            case_list = api_data['test_case_list'] #一个接口的用例列表 [{case_dict},{case_dict},...]\n            func_name = 'test_{0}_{1}'.format(str(idx+1).zfill(3), to_safe_name(api_name.replace(\"#\", \"\"))) #api_name=event格式统一成 test_001_event\n            function = create_function(func_template.format(func_name=func_name),\n                                       namespace={\n                                           'pytest': pytest,\n                                           'allure': allure,\n                                           'logger': logger,\n                                           'is_contains_chinese': is_contains_chinese,\n                                           'sleep_progressbar': sleep_progressbar,\n                                           'methodcaller': methodcaller,\n                                           'setup': setup,\n                                           'callback': callback,\n                                       })\n            ids = [str(c).zfill(3) for c in range(1, len(case_list)+1)] # 接口有多少条用例 001 002 003...\n            # 哇 这个写法又学习了，返回的function内存地址后，直接手工闭包！和用parametrize装饰器一样哟，nice！\n            attrs[func_name] = pytest.mark.parametrize('case_data', case_list, ids=ids)(function)\n            dp_name, depends = None, []\n            for dp in api_data['depends']:\n                if dp == api_name:\n                    dp_name = api_name\n                    continue\n                else:\n                    depends.append(dp)\n            if dp_name or len(depends) > 0:\n                logger.info(\"dependency: {} : name={},depends={}\".format(func_name, dp_name, depends))\n                attrs[func_name] = pytest.mark.dependency(name=dp_name, depends=depends, scope='class')(attrs[func_name]) #装饰一手 依赖\n            if api_name.startswith(\"#\") or api_desc.startswith(\"#\"):\n                attrs[func_name] = pytest.mark.skip(reason='测试用例被注释#')(attrs[func_name]) #再装饰一手skip 基本齐活，坐等调用func_name，pytest就嗖嗖运行起来惹，妙！\n            # 集成allure装饰器 这个不知道是不是作者大大觉得模块下面展示case就行了，再打story好懒得挨个点开喔，我是这么想的~\n            # attrs[func_name] = allure.story(api_data['api_desc'])(attrs[func_name])\n        return super().__new__(cls, name, bases, attrs)\n```\n\n一些点：\n\n1、pytest在收集用例时，按照test_ 开头去找，自动生成的脚本就是test_ 文件名.py，测试用例集按照类来展示一个xmind文件每个画布的接口用例，比如上面的class TestBillTrailSettingApi()，pytest执行时按顺序去解析类，会先调用CaseMetaClass.__ new __()来创建类，所以CaseMetaClass可以借助attrs来改变TestBillTrailSettingApi()类的属性或方法。\n\n2、metaclass我的理解是the class of the class，类的类，它new出来的是一个类，而非实例。自定义的CaseMetaClass通过new方法返回子类的name、bases、attrs即类名、继承的集合、属性方法。这是meclass与继承不一样层面的原因，子类继承父类除私有属性和方法外的特性，对父类进行重写，但父类无法操纵子类，借用metaclass，就可以对子类进行操作，像装饰器一样去【动态修改】。（关于metaclass这篇还可以：https://www.cnblogs.com/yssjun/p/9832526.html?ivk_sa=1024320u，多多debug试一试理解更快）\n\n3、在上述代码的new方法中，通过“手工闭包”来形成装饰器，将函数内存地址传给pytest.mark.parametrize()，等同于平常使用@pytest.mark.parametrize()。下面写了一个最最最简单的闭包函数，当然还有装饰方法、装饰器传参等各种情况就不细说了。只是简单举个栗子~\n\n```python\n def outer(func):\n        def inner():\n            print(\"before\")\n            func()\n            print(\"after\")\n        return inner\n    \n    @outer\n    def cytest():\n        print(\"陈语测试\")\n    cytest() #装饰后调用原函数\n    \n    #这等价于上面的装饰\n    cytest = outer(cytest)\n    cytest() #调用闭包函数inner\n```\n\n4、当xmind的一个画布由多个接口，new方法在for循环中遍历每个接口，根据接口api_name来使子类动态生成多个function，即动态生成了多个接口用例集了，如下图。\n\n![image-20211120151106113](C:\\Users\\86183\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120151106113.png)\n\n##### 六、写不动了\n\n以上就是大致把数据流看了一下，做的笔记。\n\n这样run_main主入口脚本的运行过程就可以串起来啦\n","slug":"学习了一下接口框架DDT数据的传递过程","published":1,"date":"2021-11-23T02:36:08.505Z","updated":"2022-02-10T16:42:35.034Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckztjmdgw0001nb665pdl154q","content":"<h4 id=\"学习了一下接口框架DDT数据的传递过程\"><a href=\"#学习了一下接口框架DDT数据的传递过程\" class=\"headerlink\" title=\"学习了一下接口框架DDT数据的传递过程\"></a>学习了一下接口框架DDT数据的传递过程</h4><h5 id=\"话说在前面\"><a href=\"#话说在前面\" class=\"headerlink\" title=\"话说在前面\"></a>话说在前面</h5><ul>\n<li>在之前的接口脚本中，用csv文件、xlsx文件作为载体存放接口用例的数据。现在学习一下xmind，个人觉得xmind的结构：一个主题下面有多个子主题，在一个接口多种场景（正常值、空值、错误值）下，可以让用例文件更直观。</li>\n<li>但我自己也只是大概的debug了一下，原来的代码没啥备注，啃得可能也有些错误，有大佬指点一下的话感激涕零~</li>\n</ul>\n<h5 id=\"一、xmind结构\"><a href=\"#一、xmind结构\" class=\"headerlink\" title=\"一、xmind结构\"></a>一、xmind结构</h5><p><img src=\"C:\\Users\\86183\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211110142019391.png\" alt=\"image-20211110142019391\"></p>\n<p>xmind文件名（cyTest.xmind）</p>\n<p>画布：等同于excel中sheet的概念，默认名为：画布 1</p>\n<p>主题：一个画布由一个中心主题开始延伸，中心主题下包含子主题。</p>\n<p>主题的一些要素</p>\n<ol>\n<li><p>title标题：分支主题2</p>\n</li>\n<li><p>note备注：备注2</p>\n</li>\n<li><p>markers标记：priority-2优先级、tag-orange标签颜色、smiley-cry情绪、task-start任务完成度、等</p>\n</li>\n<li><p>labels标签：标签二</p>\n</li>\n<li><p>link链接：<a href=\"http://www.baidu.com/\">http://www.baidu.com</a></p>\n</li>\n<li><p>topics子主题：子主题也是相同的要素</p>\n</li>\n</ol>\n<h5 id=\"二、python的xmindparser模块常用方法\"><a href=\"#二、python的xmindparser模块常用方法\" class=\"headerlink\" title=\"二、python的xmindparser模块常用方法\"></a>二、python的xmindparser模块常用方法</h5><pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> xmindparser\n<span class=\"token comment\" spellcheck=\"true\"># xmindparser配置</span>\nxmindparser<span class=\"token punctuation\">.</span>config <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;</span>\n            <span class=\"token string\">'showTopicId'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">#是否展示主题ID</span>\n            <span class=\"token string\">'hideEmptyValue'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span>， <span class=\"token comment\" spellcheck=\"true\">#是否隐藏空值</span>\n            <span class=\"token string\">'showStructure'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">#是否展示结构值</span>\n            <span class=\"token string\">'showRelationship'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span> <span class=\"token comment\" spellcheck=\"true\">#是否展示节点关系</span>\n        <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#125;</span>\nfilePath <span class=\"token operator\">=</span> r<span class=\"token string\">'/文件路径/cyTest.xmind'</span>\ndata_json <span class=\"token operator\">=</span> xmindparser<span class=\"token punctuation\">.</span>xmind_to_json<span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#解析成json数据类型</span>\ndata_dcit <span class=\"token operator\">=</span> xmindparser<span class=\"token punctuation\">.</span>xmind_to_dict<span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#解析成dict数据类型 - 常用</span>\ndata_xml <span class=\"token operator\">=</span> xmindparser<span class=\"token punctuation\">.</span>xmind_to_xml<span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#解析成xml数据类型 </span>\n<span class=\"token comment\" spellcheck=\"true\"># 解析到文件</span>\nfile_json <span class=\"token operator\">=</span> xmindparser<span class=\"token punctuation\">.</span>xmind_to_file<span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">)</span>\nfile_xml <span class=\"token operator\">=</span> xmindparser<span class=\"token punctuation\">.</span>xmind_to_file<span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> <span class=\"token string\">'xml'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#[&amp;#123;'title': '画布 1', 'topic': &amp;#123;'title': '中心主题', 'topics': [&amp;#123;'title': '分支主题 1', 'note': '备注一', 'makers': ['priority-1', 'tag-red', 'smiley-laugh', 'task-done'], 'labels': ['标签一','标签二'], 'topics': [&amp;#123;'title': '子主题 1', 'makers': ['flag-red']&amp;#125;, &amp;#123;'title': '子主题 2'&amp;#125;]&amp;#125;, &amp;#123;'title': '分支主题 2', 'note': '备注二', 'makers': ['priority-2', 'tag-orange', 'smiley-cry', 'task-start'], 'labels': ['标签二'], 'link': 'http://www.baidu.com', 'topics': [&amp;#123;'title': '子主题 3'&amp;#125;]&amp;#125;]&amp;#125;, 'structure': 'org.xmind.ui.map.unbalanced'&amp;#125;]</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"三、公司的xmind用例结构\"><a href=\"#三、公司的xmind用例结构\" class=\"headerlink\" title=\"三、公司的xmind用例结构\"></a>三、公司的xmind用例结构</h5><img src=\"C:\\Users\\86183\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211111194307394.png\" alt=\"image-20211111194307394\" style=\"zoom:200%;\" />\n\n<p>一级主题，作为class名，所以尽量用首字母大写的英文单次（必须英文字母或下划线开头、字母/数字/下划线组成，如果有其他字符会被替换为”_”）</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">to_safe_name</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">\"[^a-zA-Z0-9_]+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"_\"</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"四、框架中读取xmind接口测试数据的代码解析\"><a href=\"#四、框架中读取xmind接口测试数据的代码解析\" class=\"headerlink\" title=\"四、框架中读取xmind接口测试数据的代码解析\"></a>四、框架中读取xmind接口测试数据的代码解析</h5><p>这一部门的代码我全部copy到下面了，因为自己之前ddt没有用过xmind来作为数据载体，所以手写了一遍去理解xmind模板为什么要这么写，觉得太长的话就直接看最后函数把接口数据整理成什么样的格式就行。</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> xmindparser <span class=\"token keyword\">import</span> xmind_to_dict\n<span class=\"token keyword\">import</span> json\n\nHOST_TAG_CHOICE <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"mk\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"qw\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bill\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"qyapi\"</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\" spellcheck=\"true\"># 对应 host_&lt;mk/qw></span>\nPRIORITY_TAG_CHOICE <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"critical\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blocker\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReadXmind</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"读取xmind内容，返回字典列表（list[dict1,dict2]）\"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> file_path<span class=\"token punctuation\">,</span> canvas<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>file_path <span class=\"token operator\">=</span> file_path\n        self<span class=\"token punctuation\">.</span>canvas <span class=\"token operator\">=</span> canvas\n        self<span class=\"token punctuation\">.</span>xmind_dict_list <span class=\"token operator\">=</span> xmind_to_dict<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_canvas_name_list</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">'''遍历xmind文件的每一个画布，得到全部画布的名称装成列表 ['画布 1', '画布 2']，但是如果传入了canvas，就不重新读直接return'''</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>canvas <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span>cv<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> cv <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>xmind_dict_list<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_canvas_topic</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> canvas<span class=\"token operator\">=</span><span class=\"token string\">\"画布 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        根据初始指定的画布名称（对应于excel的sheet表），返回该画布的接口数据\n        :return: &amp;#123;'title': '画布中心主题', 'topics': [&amp;#123;接口1信息&amp;#125;,&amp;#123;接口2信息&amp;#125;,...]&amp;#125; 此时title为画布 1 的中心主题 BillTrailSettingApi\n        \"\"\"</span>\n        <span class=\"token keyword\">for</span> cv <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>xmind_dict_list<span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\">#遍历每一个画布</span>\n            <span class=\"token keyword\">if</span> cv<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> canvas<span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\">#如果画布名==传入的画布名参数</span>\n                <span class=\"token keyword\">return</span> cv<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'topic'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#return画布下的全部接口[&amp;#123;接口1信息&amp;#125;,&amp;#123;接口2信息&amp;#125;,...]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"Xmind中画布&lt;&amp;#123;&amp;#125;>不存在!\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_canvas_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        获取画布内所有API-CASE信息\n        :return: canvas_data\n        case_dict 字典：存放一个用例的信息，eg用例名event_001、用例描述desc等\n        api_dict 字典：存放一个接口的信息，eg接口名api_name、依赖depends、所有用例test_case_list [&amp;#123;case_dict&amp;#125;,&amp;#123;case_dict&amp;#125;,...]\n        api_case_dict_list 数组：存放一个画布的所有接口信息，[&amp;#123;api_dict&amp;#125;,&amp;#123;api_dict&amp;#125;,...]\n        canvas_data 字典：存放一个画布的信息，&amp;#123;'desc': '画布 1', 'module': 'BillTrailSettingApi', 'api_case_list':[&amp;#123;api_dict&amp;#125;,&amp;#123;api_dict&amp;#125;,...]&amp;#125; \n        \"\"\"</span>\n        canvas_data <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;&amp;#125; #dict 存放：画布名、中心主题、api_case_list接口列表</span>\n        api_case_dict_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\" spellcheck=\"true\">#list 存放：api_dict</span>\n        canvas_topic <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_canvas_topic<span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">)</span>\n        module_name <span class=\"token operator\">=</span> canvas_topic<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span>\n        canvas_data<span class=\"token punctuation\">[</span><span class=\"token string\">'desc'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> canvas <span class=\"token comment\" spellcheck=\"true\">#画布名</span>\n        canvas_data<span class=\"token punctuation\">[</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> module_name <span class=\"token comment\" spellcheck=\"true\">#中心主题 BillTrailSettingApi</span>\n        api_list <span class=\"token operator\">=</span> canvas_topic<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'topics'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\" spellcheck=\"true\">#接口列表 [&amp;#123;接口1信息&amp;#125;,&amp;#123;接口2信息&amp;#125;,...]</span>\n        <span class=\"token keyword\">for</span> api <span class=\"token keyword\">in</span> api_list<span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\">#遍历每一个接口</span>\n            api_dict <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;&amp;#125; #存放：接口信息</span>\n            api_name <span class=\"token operator\">=</span> api<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> api<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"\"</span> <span class=\"token comment\" spellcheck=\"true\">#api名 event</span>\n            api_desc <span class=\"token operator\">=</span> api<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'note'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> api<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'note'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"\"</span> <span class=\"token comment\" spellcheck=\"true\">#描述 新增事件</span>\n            api_labels <span class=\"token operator\">=</span> api<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'labels'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">#标签 depends、host、sleep</span>\n            api_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'api_name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> api_name\n            api_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'api_desc'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> api_desc\n            api_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'depends'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\" spellcheck=\"true\"># depends 依赖标签</span>\n            api_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'sleep'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\" spellcheck=\"true\"># sleep 标签</span>\n            api_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'skipif'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>  <span class=\"token comment\" spellcheck=\"true\"># skipif 标签</span>\n            host_tag <span class=\"token operator\">=</span> <span class=\"token string\">\"host_\"</span> <span class=\"token operator\">+</span> HOST_TAG_CHOICE<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\" spellcheck=\"true\"># host 标签 默认为qw</span>\n            <span class=\"token comment\" spellcheck=\"true\"># 如果有接口数据有标签，重新赋值，否则就是上述空值和默认值</span>\n            <span class=\"token keyword\">if</span> api_labels<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">for</span> alb <span class=\"token keyword\">in</span> api_labels<span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\">#遍历每个标签 'labels': ['host=qw', 'depends=addUser', 'sleep=2', 'skipif=skip', 'name=name']</span>\n                    lb_dps <span class=\"token operator\">=</span> alb<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"depends=\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#返回['host=qw'] 子字符串在父字符串中不存在时，返回整个父字符串作为列表的元素</span>\n                    lb_dps2 <span class=\"token operator\">=</span> alb<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"name=\"</span><span class=\"token punctuation\">)</span>\n                    lb_sleep <span class=\"token operator\">=</span> alb<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"sleep=\"</span><span class=\"token punctuation\">)</span>\n                    lb_skipif <span class=\"token operator\">=</span> alb<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"skipif=\"</span><span class=\"token punctuation\">)</span>\n                    lb_host <span class=\"token operator\">=</span> alb<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"host=\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#返回['','qw']</span>\n                    <span class=\"token keyword\">if</span> len<span class=\"token punctuation\">(</span>lb_dps<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n                        api_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'depends'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>lb_dps<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> len<span class=\"token punctuation\">(</span>lb_dps2<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n                        api_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'depends'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>lb_dps2<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> len<span class=\"token punctuation\">(</span>lb_sleep<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n                        api_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'sleep'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> int<span class=\"token punctuation\">(</span>lb_sleep<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> len<span class=\"token punctuation\">(</span>lb_skipif<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n                        api_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'skipif'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lb_skipif<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n                    <span class=\"token keyword\">if</span> len<span class=\"token punctuation\">(</span>lb_host<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">and</span> lb_host<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> HOST_TAG_CHOICE<span class=\"token punctuation\">:</span>\n                        host_tag <span class=\"token operator\">=</span> <span class=\"token string\">\"host_\"</span> <span class=\"token operator\">+</span> lb_host<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            api_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'host_tag'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> host_tag\n            api_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'test_case_list'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\" spellcheck=\"true\">#存放：该接口的全部用例</span>\n            api_detail <span class=\"token operator\">=</span> api<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'topics'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            path <span class=\"token operator\">=</span> api_detail<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span> <span class=\"token string\">\"\"</span> <span class=\"token comment\" spellcheck=\"true\">#接口路径</span>\n            rq <span class=\"token operator\">=</span> api_detail<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'topics'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            method <span class=\"token operator\">=</span> rq<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span> <span class=\"token string\">\"\"</span> <span class=\"token comment\" spellcheck=\"true\">#请求方法</span>\n            api_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> path\n            api_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'method'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> method\n            case_cf_list <span class=\"token operator\">=</span> rq<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'topics'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#一个接口的多个条用例 [&amp;#123;用例1&amp;#125;,&amp;#123;用例2&amp;#125;,...]</span>\n            <span class=\"token keyword\">if</span> api_name<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  #被注释掉的接口，不解析用例参数\n                <span class=\"token keyword\">continue</span>\n            <span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> case <span class=\"token keyword\">in</span> enumerate<span class=\"token punctuation\">(</span>case_cf_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\">#enumerate将可遍历的数据对象组合为一个索引序列</span>\n                <span class=\"token keyword\">if</span> case<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  #被注释掉的用例，不解析\n                    <span class=\"token keyword\">continue</span>\n                case_dict <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;&amp;#125; #存放：用例信息</span>\n                case_labels <span class=\"token operator\">=</span> case<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'labels'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\"># 用例描述下的标签</span>\n                case_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> module_name  <span class=\"token comment\" spellcheck=\"true\"># 模块名</span>\n                case_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'api_name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> api_name  <span class=\"token comment\" spellcheck=\"true\"># api名</span>\n                case_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'host_tag'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> host_tag  <span class=\"token comment\" spellcheck=\"true\"># host_qw / host_mk</span>\n                case_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'api_desc'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> api_desc  <span class=\"token comment\" spellcheck=\"true\"># api描述</span>\n                case_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'depends'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> api_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'depends'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\" spellcheck=\"true\"># api依赖</span>\n                case_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'sleep'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> api_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'sleep'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\" spellcheck=\"true\"># api sleep</span>\n                case_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'skipif'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> api_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'skipif'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\" spellcheck=\"true\"># api skipif</span>\n                case_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token string\">\"&amp;#123;api_name&amp;#125;_\"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>idx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>zfill<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  # case名 zfill填充字符串为三位 event_001 event_002\n                case_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'desc'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> case<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\"># 用例描述</span>\n                case_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'priority'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>  <span class=\"token comment\" spellcheck=\"true\"># 用例优先级</span>\n                <span class=\"token keyword\">if</span> case_labels<span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\">#标签为 用例严重程度</span>\n                    <span class=\"token keyword\">for</span> clb <span class=\"token keyword\">in</span> case_labels<span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">if</span> clb <span class=\"token keyword\">in</span> PRIORITY_TAG_CHOICE<span class=\"token punctuation\">:</span>\n                            case_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'priority'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> clb\n                            <span class=\"token keyword\">break</span>\n                case_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'method'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> method  <span class=\"token comment\" spellcheck=\"true\"># method: get/post/...</span>\n                case_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> path  <span class=\"token comment\" spellcheck=\"true\"># api path</span>\n                case_input_output <span class=\"token operator\">=</span> case<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'topics'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\" spellcheck=\"true\">#入参及后面的子主题</span>\n                case_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> case_input_output<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">#入参</span>\n                output_set_vars <span class=\"token operator\">=</span> case_input_output<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'topics'</span><span class=\"token punctuation\">)</span>\n                str_expect <span class=\"token operator\">=</span> output_set_vars<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#期望结果</span>\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                    case_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'expect'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>str_expect<span class=\"token punctuation\">,</span> strict<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">#xmind读出来的期望结果str转换成字典</span>\n                <span class=\"token comment\" spellcheck=\"true\"># 自定义异常 定位到主题名-api名-期望结果</span>\n                <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"API:&amp;#123;0&amp;#125;->&amp;#123;1&amp;#125;\\nJSON Content:&amp;#123;2&amp;#125;\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>module_name<span class=\"token punctuation\">,</span> api_name<span class=\"token punctuation\">,</span> str_expect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">raise</span> e\n                case_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'set_vars'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;&amp;#125;</span>\n                <span class=\"token keyword\">if</span> len<span class=\"token punctuation\">(</span>output_set_vars<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\">#期望结果有两个主题 即设置了全局的变量</span>\n                    str_set_vars <span class=\"token operator\">=</span> output_set_vars<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#拿到变量'&amp;#123;\"customerId\": \"$..data.id\"&amp;#125;'</span>\n                    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                        case_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'set_vars'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>str_set_vars<span class=\"token punctuation\">,</span> strict<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\"># 需要设置为全局的变量，key-value， key为保存变量名，value为字段查询名或jsonpath</span>\n                    <span class=\"token comment\" spellcheck=\"true\">#自定义异常 变量写法有问题 定位到主题名-api名-变量</span>\n                    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"API:&amp;#123;0&amp;#125;->&amp;#123;1&amp;#125;\\nJSON Content:&amp;#123;2&amp;#125;\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>module_name<span class=\"token punctuation\">,</span> api_name<span class=\"token punctuation\">,</span> str_set_vars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">raise</span> e\n                api_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'test_case_list'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">(</span>case_dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            api_case_dict_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>api_dict<span class=\"token punctuation\">)</span>\n        canvas_data<span class=\"token punctuation\">[</span><span class=\"token string\">'api_case_list'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> api_case_dict_list\n        <span class=\"token keyword\">return</span> canvas_data\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_xmind_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">'''读xmind每一个画布的数据 [&amp;#123;canvas_data&amp;#125;,&amp;#123;canvas_data&amp;#125;,...]'''</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>get_canvas_data<span class=\"token punctuation\">(</span>cv<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> cv <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>get_canvas_name_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token triple-quoted-string string\">'''\ncase_dict的值，之后会作为pytest的传参\n&amp;#123;'module': 'BillTrailSettingApi', 'api_name': 'event', 'host_tag': 'host_qw', 'api_desc': '新增事件', \n'depends': ['addUser', 'name'], 'sleep': 2, 'skipif': 'skip', \n'name': 'event_001', 'desc': '异常值（新增事件参数为异常值校验）', 'priority': 'critical', 'method': 'POST', \n'path': '/bill-trail-settings-api/trail/event', 'data': '&amp;#123;\"eventIcon\": \"事件图标\", \"eventName\": \"事件名称\", \"eventTopic\": \"事件\", \"fieldList\": \"事件内容列表\", \"id\": \"事件ID，编辑时必传\", \"operator\": \"操作人\", \"remark\": \"备注\", \"trailId\": \"旅程项目ID\"&amp;#125;', \n'expect': &amp;#123;'code': 8401, 'msg': '参数不能为空', 'data': None&amp;#125;, 'set_vars': &amp;#123;'customerId': '$..data.id'&amp;#125;&amp;#125;\n'''</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>一个点：因为之前没找到完整的xmind模板，不明白为什么api_name主题下的标签，depends=  和 name=  要存在一个数组depends中，最后悟了。方便dependency去传参，这样没有依赖，却需要别名给其他接口依赖时，depends传入空数组[]。妙！（dict的value存数组也完全ok）</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">dp_name<span class=\"token punctuation\">,</span> depends <span class=\"token operator\">=</span> None<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> dp <span class=\"token keyword\">in</span> api_data<span class=\"token punctuation\">[</span><span class=\"token string\">'depends'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\">#[\"addEevent\",\"event\"] api_name=event</span>\n    <span class=\"token keyword\">if</span> dp <span class=\"token operator\">==</span> api_name<span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\">#如果apiname是当前自己接口的名字，作为别名</span>\n        dp_name <span class=\"token operator\">=</span> api_name\n        <span class=\"token keyword\">continue</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        depends<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> dp_name <span class=\"token operator\">or</span> len<span class=\"token punctuation\">(</span>depends<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"dependency: &amp;#123;&amp;#125; : name=&amp;#123;&amp;#125;,depends=&amp;#123;&amp;#125;\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>func_name<span class=\"token punctuation\">,</span> dp_name<span class=\"token punctuation\">,</span> depends<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    attrs<span class=\"token punctuation\">[</span>func_name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>dependency<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>dp_name<span class=\"token punctuation\">,</span> depends<span class=\"token operator\">=</span>depends<span class=\"token punctuation\">,</span> scope<span class=\"token operator\">=</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>attrs<span class=\"token punctuation\">[</span>func_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># skip以#开头的测试用例</span>\n<span class=\"token keyword\">if</span> api_name<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span> api_desc<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    attrs<span class=\"token punctuation\">[</span>func_name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>skip<span class=\"token punctuation\">(</span>reason<span class=\"token operator\">=</span><span class=\"token string\">'测试用例被注释#'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>attrs<span class=\"token punctuation\">[</span>func_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"五、接口脚本自动生成的大概原理和过程\"><a href=\"#五、接口脚本自动生成的大概原理和过程\" class=\"headerlink\" title=\"五、接口脚本自动生成的大概原理和过程\"></a>五、接口脚本自动生成的大概原理和过程</h5><p>所用技术：文件写入脚本、compile()内置函数编译、metaclass对子类的改写、装饰器与闭包函数，和一些杂七杂八的</p>\n<p>上面写到了DDT的测试数据xmind载体的解析，拿到了参数之后传入pytest即可（题外话pytest两种传参方式，fixture或者parametrize，一定要知晓参数传递过程的），接下来写一下作者大大将参数融进pytest的过程，可能自己理解的比较简陋，有大佬指点的话感激涕零~</p>\n<p>第一步：构建用例脚本，就是with open去写就ok了，主要写入的是：导包的内容、类模板（包括脚本名称和测试数据），compile后生成脚本的类如下所示~</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">@allure<span class=\"token punctuation\">.</span>feature<span class=\"token punctuation\">(</span><span class=\"token string\">'画布 1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestBillTrailSettingApi</span><span class=\"token punctuation\">(</span>PreRequest<span class=\"token punctuation\">,</span> metaclass<span class=\"token operator\">=</span>CaseMetaClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    test_py <span class=\"token operator\">=</span> <span class=\"token string\">\"test_bill-trail-settings-api.py\"</span>\n    test_cases_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;接口1&amp;#125;,&amp;#123;接口2&amp;#125;,...]</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>PreRequest这个父类就是一些请求前的操作，比如拿变量值、sessionId，就不展开了。</p>\n<p>第二步：compile生成函数对象，用例的模板字符串参数传入api_name，来动态生成接口函数。模板有很多执行时的细节操作，比如skip、allure敏捷标记等，不详细展开了，贴一下生成的函数代码。如下~</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">create_function</span><span class=\"token punctuation\">(</span>function_express<span class=\"token punctuation\">,</span> namespace<span class=\"token operator\">=</span>None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"动态生成函数对象\"\"\"</span>\n    <span class=\"token keyword\">if</span> namespace <span class=\"token keyword\">is</span> <span class=\"token operator\">not</span> None<span class=\"token punctuation\">:</span>\n        builtins<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>namespace<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 哇 全部添加到内建模块中</span>\n    module_code <span class=\"token operator\">=</span> compile<span class=\"token punctuation\">(</span>function_express<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'exec'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\"># 根据模板(字符串)生成可执行的代码，mode为exec（源包含多个python语句时使用）</span>\n    function_code <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> module_code<span class=\"token punctuation\">.</span>co_consts <span class=\"token keyword\">if</span> isinstance<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> types<span class=\"token punctuation\">.</span>CodeType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\" spellcheck=\"true\">#注意isinstance()会考虑继承关系 所以这里用type()不行哟！</span>\n    <span class=\"token keyword\">return</span> types<span class=\"token punctuation\">.</span>FunctionType<span class=\"token punctuation\">(</span>function_code<span class=\"token punctuation\">,</span> builtins<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#返回内存地址&lt;function test_001_event at 0x05A0AA98></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>第三步：重点来了！！写一个metaclass，来修改子类的属性或方法</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CaseMetaClass</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> bases<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\" spellcheck=\"true\"># print(\"此时new的对象是\",cls.__name__) #CaseMetaClass</span>\n        test_cases_data <span class=\"token operator\">=</span> attrs<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">'test_cases_data'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 字典的pop有返回值 拿到一个画布的接口数据[&amp;#123;接口1&amp;#125;,&amp;#123;接口2&amp;#125;,...]</span>\n        <span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> api_data <span class=\"token keyword\">in</span> enumerate<span class=\"token punctuation\">(</span>test_cases_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> is_contains_chinese<span class=\"token punctuation\">(</span>api_data<span class=\"token punctuation\">[</span><span class=\"token string\">'api_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> <span class=\"token operator\">not</span> is_contains_chinese<span class=\"token punctuation\">(</span>api_data<span class=\"token punctuation\">[</span><span class=\"token string\">'api_desc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\">#检查了一手api_name是否包含中文，decs为英文，是就互换一下</span>\n                api_data<span class=\"token punctuation\">[</span><span class=\"token string\">'api_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> api_data<span class=\"token punctuation\">[</span><span class=\"token string\">'api_desc'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> api_data<span class=\"token punctuation\">[</span><span class=\"token string\">'api_desc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> api_data<span class=\"token punctuation\">[</span><span class=\"token string\">'api_name'</span><span class=\"token punctuation\">]</span>\n            api_name <span class=\"token operator\">=</span> api_data<span class=\"token punctuation\">[</span><span class=\"token string\">'api_name'</span><span class=\"token punctuation\">]</span>\n            api_name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token keyword\">if</span> api_name <span class=\"token keyword\">is</span> None <span class=\"token keyword\">else</span> api_name <span class=\"token comment\" spellcheck=\"true\">#又让api_name兼容一手None值</span>\n            api_desc <span class=\"token operator\">=</span> api_data<span class=\"token punctuation\">[</span><span class=\"token string\">'api_desc'</span><span class=\"token punctuation\">]</span>\n            case_list <span class=\"token operator\">=</span> api_data<span class=\"token punctuation\">[</span><span class=\"token string\">'test_case_list'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\" spellcheck=\"true\">#一个接口的用例列表 [&amp;#123;case_dict&amp;#125;,&amp;#123;case_dict&amp;#125;,...]</span>\n            func_name <span class=\"token operator\">=</span> <span class=\"token string\">'test_&amp;#123;0&amp;#125;_&amp;#123;1&amp;#125;'</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">(</span>idx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>zfill<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> to_safe_name<span class=\"token punctuation\">(</span>api_name<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> #api_name<span class=\"token operator\">=</span>event格式统一成 test_001_event\n            function <span class=\"token operator\">=</span> create_function<span class=\"token punctuation\">(</span>func_template<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>func_name<span class=\"token operator\">=</span>func_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                       namespace<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;</span>\n                                           <span class=\"token string\">'pytest'</span><span class=\"token punctuation\">:</span> pytest<span class=\"token punctuation\">,</span>\n                                           <span class=\"token string\">'allure'</span><span class=\"token punctuation\">:</span> allure<span class=\"token punctuation\">,</span>\n                                           <span class=\"token string\">'logger'</span><span class=\"token punctuation\">:</span> logger<span class=\"token punctuation\">,</span>\n                                           <span class=\"token string\">'is_contains_chinese'</span><span class=\"token punctuation\">:</span> is_contains_chinese<span class=\"token punctuation\">,</span>\n                                           <span class=\"token string\">'sleep_progressbar'</span><span class=\"token punctuation\">:</span> sleep_progressbar<span class=\"token punctuation\">,</span>\n                                           <span class=\"token string\">'methodcaller'</span><span class=\"token punctuation\">:</span> methodcaller<span class=\"token punctuation\">,</span>\n                                           <span class=\"token string\">'setup'</span><span class=\"token punctuation\">:</span> setup<span class=\"token punctuation\">,</span>\n                                           <span class=\"token string\">'callback'</span><span class=\"token punctuation\">:</span> callback<span class=\"token punctuation\">,</span>\n                                       <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#125;)</span>\n            ids <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>zfill<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">(</span>case_list<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\" spellcheck=\"true\"># 接口有多少条用例 001 002 003...</span>\n            <span class=\"token comment\" spellcheck=\"true\"># 哇 这个写法又学习了，返回的function内存地址后，直接手工闭包！和用parametrize装饰器一样哟，nice！</span>\n            attrs<span class=\"token punctuation\">[</span>func_name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>parametrize<span class=\"token punctuation\">(</span><span class=\"token string\">'case_data'</span><span class=\"token punctuation\">,</span> case_list<span class=\"token punctuation\">,</span> ids<span class=\"token operator\">=</span>ids<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">)</span>\n            dp_name<span class=\"token punctuation\">,</span> depends <span class=\"token operator\">=</span> None<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">for</span> dp <span class=\"token keyword\">in</span> api_data<span class=\"token punctuation\">[</span><span class=\"token string\">'depends'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> dp <span class=\"token operator\">==</span> api_name<span class=\"token punctuation\">:</span>\n                    dp_name <span class=\"token operator\">=</span> api_name\n                    <span class=\"token keyword\">continue</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    depends<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> dp_name <span class=\"token operator\">or</span> len<span class=\"token punctuation\">(</span>depends<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"dependency: &amp;#123;&amp;#125; : name=&amp;#123;&amp;#125;,depends=&amp;#123;&amp;#125;\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>func_name<span class=\"token punctuation\">,</span> dp_name<span class=\"token punctuation\">,</span> depends<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                attrs<span class=\"token punctuation\">[</span>func_name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>dependency<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>dp_name<span class=\"token punctuation\">,</span> depends<span class=\"token operator\">=</span>depends<span class=\"token punctuation\">,</span> scope<span class=\"token operator\">=</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>attrs<span class=\"token punctuation\">[</span>func_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#装饰一手 依赖</span>\n            <span class=\"token keyword\">if</span> api_name<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span> api_desc<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                attrs<span class=\"token punctuation\">[</span>func_name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>skip<span class=\"token punctuation\">(</span>reason<span class=\"token operator\">=</span><span class=\"token string\">'测试用例被注释#'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>attrs<span class=\"token punctuation\">[</span>func_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> #再装饰一手skip 基本齐活，坐等调用func_name，pytest就嗖嗖运行起来惹，妙！\n            <span class=\"token comment\" spellcheck=\"true\"># 集成allure装饰器 这个不知道是不是作者大大觉得模块下面展示case就行了，再打story好懒得挨个点开喔，我是这么想的~</span>\n            <span class=\"token comment\" spellcheck=\"true\"># attrs[func_name] = allure.story(api_data['api_desc'])(attrs[func_name])</span>\n        <span class=\"token keyword\">return</span> super<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__new__<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> bases<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>一些点：</p>\n<p>1、pytest在收集用例时，按照test_ 开头去找，自动生成的脚本就是test_ 文件名.py，测试用例集按照类来展示一个xmind文件每个画布的接口用例，比如上面的class TestBillTrailSettingApi()，pytest执行时按顺序去解析类，会先调用CaseMetaClass.__ new __()来创建类，所以CaseMetaClass可以借助attrs来改变TestBillTrailSettingApi()类的属性或方法。</p>\n<p>2、metaclass我的理解是the class of the class，类的类，它new出来的是一个类，而非实例。自定义的CaseMetaClass通过new方法返回子类的name、bases、attrs即类名、继承的集合、属性方法。这是meclass与继承不一样层面的原因，子类继承父类除私有属性和方法外的特性，对父类进行重写，但父类无法操纵子类，借用metaclass，就可以对子类进行操作，像装饰器一样去【动态修改】。（关于metaclass这篇还可以：<a href=\"https://www.cnblogs.com/yssjun/p/9832526.html?ivk_sa=1024320u%EF%BC%8C%E5%A4%9A%E5%A4%9Adebug%E8%AF%95%E4%B8%80%E8%AF%95%E7%90%86%E8%A7%A3%E6%9B%B4%E5%BF%AB%EF%BC%89\">https://www.cnblogs.com/yssjun/p/9832526.html?ivk_sa=1024320u，多多debug试一试理解更快）</a></p>\n<p>3、在上述代码的new方法中，通过“手工闭包”来形成装饰器，将函数内存地址传给pytest.mark.parametrize()，等同于平常使用@pytest.mark.parametrize()。下面写了一个最最最简单的闭包函数，当然还有装饰方法、装饰器传参等各种情况就不细说了。只是简单举个栗子~</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"> <span class=\"token keyword\">def</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before\"</span><span class=\"token punctuation\">)</span>\n            func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> inner\n    \n    @outer\n    <span class=\"token keyword\">def</span> <span class=\"token function\">cytest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"陈语测试\"</span><span class=\"token punctuation\">)</span>\n    cytest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#装饰后调用原函数</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">#这等价于上面的装饰</span>\n    cytest <span class=\"token operator\">=</span> outer<span class=\"token punctuation\">(</span>cytest<span class=\"token punctuation\">)</span>\n    cytest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#调用闭包函数inner</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>4、当xmind的一个画布由多个接口，new方法在for循环中遍历每个接口，根据接口api_name来使子类动态生成多个function，即动态生成了多个接口用例集了，如下图。</p>\n<p><img src=\"C:\\Users\\86183\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120151106113.png\" alt=\"image-20211120151106113\"></p>\n<h5 id=\"六、写不动了\"><a href=\"#六、写不动了\" class=\"headerlink\" title=\"六、写不动了\"></a>六、写不动了</h5><p>以上就是大致把数据流看了一下，做的笔记。</p>\n<p>这样run_main主入口脚本的运行过程就可以串起来啦</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://testcabana.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://testcabana.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://testcabana.github.io/","title":"前去学习"}],"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}]}},"excerpt":"","more":"<h4 id=\"学习了一下接口框架DDT数据的传递过程\"><a href=\"#学习了一下接口框架DDT数据的传递过程\" class=\"headerlink\" title=\"学习了一下接口框架DDT数据的传递过程\"></a>学习了一下接口框架DDT数据的传递过程</h4><h5 id=\"话说在前面\"><a href=\"#话说在前面\" class=\"headerlink\" title=\"话说在前面\"></a>话说在前面</h5><ul>\n<li>在之前的接口脚本中，用csv文件、xlsx文件作为载体存放接口用例的数据。现在学习一下xmind，个人觉得xmind的结构：一个主题下面有多个子主题，在一个接口多种场景（正常值、空值、错误值）下，可以让用例文件更直观。</li>\n<li>但我自己也只是大概的debug了一下，原来的代码没啥备注，啃得可能也有些错误，有大佬指点一下的话感激涕零~</li>\n</ul>\n<h5 id=\"一、xmind结构\"><a href=\"#一、xmind结构\" class=\"headerlink\" title=\"一、xmind结构\"></a>一、xmind结构</h5><p><img src=\"C:\\Users\\86183\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211110142019391.png\" alt=\"image-20211110142019391\"></p>\n<p>xmind文件名（cyTest.xmind）</p>\n<p>画布：等同于excel中sheet的概念，默认名为：画布 1</p>\n<p>主题：一个画布由一个中心主题开始延伸，中心主题下包含子主题。</p>\n<p>主题的一些要素</p>\n<ol>\n<li><p>title标题：分支主题2</p>\n</li>\n<li><p>note备注：备注2</p>\n</li>\n<li><p>markers标记：priority-2优先级、tag-orange标签颜色、smiley-cry情绪、task-start任务完成度、等</p>\n</li>\n<li><p>labels标签：标签二</p>\n</li>\n<li><p>link链接：<a href=\"http://www.baidu.com/\">http://www.baidu.com</a></p>\n</li>\n<li><p>topics子主题：子主题也是相同的要素</p>\n</li>\n</ol>\n<h5 id=\"二、python的xmindparser模块常用方法\"><a href=\"#二、python的xmindparser模块常用方法\" class=\"headerlink\" title=\"二、python的xmindparser模块常用方法\"></a>二、python的xmindparser模块常用方法</h5><pre><code class=\"python\">import xmindparser\n# xmindparser配置\nxmindparser.config = &#123;\n            &#39;showTopicId&#39;: False, #是否展示主题ID\n            &#39;hideEmptyValue&#39;: True， #是否隐藏空值\n            &#39;showStructure&#39;: False, #是否展示结构值\n            &#39;showRelationship&#39;: False #是否展示节点关系\n        &#125;\nfilePath = r&#39;/文件路径/cyTest.xmind&#39;\ndata_json = xmindparser.xmind_to_json(filePath) #解析成json数据类型\ndata_dcit = xmindparser.xmind_to_dict(filePath) #解析成dict数据类型 - 常用\ndata_xml = xmindparser.xmind_to_xml(filePath) #解析成xml数据类型 \n# 解析到文件\nfile_json = xmindparser.xmind_to_file(filePath, &#39;json&#39;)\nfile_xml = xmindparser.xmind_to_file(filePath, &#39;xml&#39;)\n#[&#123;&#39;title&#39;: &#39;画布 1&#39;, &#39;topic&#39;: &#123;&#39;title&#39;: &#39;中心主题&#39;, &#39;topics&#39;: [&#123;&#39;title&#39;: &#39;分支主题 1&#39;, &#39;note&#39;: &#39;备注一&#39;, &#39;makers&#39;: [&#39;priority-1&#39;, &#39;tag-red&#39;, &#39;smiley-laugh&#39;, &#39;task-done&#39;], &#39;labels&#39;: [&#39;标签一&#39;,&#39;标签二&#39;], &#39;topics&#39;: [&#123;&#39;title&#39;: &#39;子主题 1&#39;, &#39;makers&#39;: [&#39;flag-red&#39;]&#125;, &#123;&#39;title&#39;: &#39;子主题 2&#39;&#125;]&#125;, &#123;&#39;title&#39;: &#39;分支主题 2&#39;, &#39;note&#39;: &#39;备注二&#39;, &#39;makers&#39;: [&#39;priority-2&#39;, &#39;tag-orange&#39;, &#39;smiley-cry&#39;, &#39;task-start&#39;], &#39;labels&#39;: [&#39;标签二&#39;], &#39;link&#39;: &#39;http://www.baidu.com&#39;, &#39;topics&#39;: [&#123;&#39;title&#39;: &#39;子主题 3&#39;&#125;]&#125;]&#125;, &#39;structure&#39;: &#39;org.xmind.ui.map.unbalanced&#39;&#125;]\n</code></pre>\n<h5 id=\"三、公司的xmind用例结构\"><a href=\"#三、公司的xmind用例结构\" class=\"headerlink\" title=\"三、公司的xmind用例结构\"></a>三、公司的xmind用例结构</h5><img src=\"C:\\Users\\86183\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211111194307394.png\" alt=\"image-20211111194307394\" style=\"zoom:200%;\" />\n\n<p>一级主题，作为class名，所以尽量用首字母大写的英文单次（必须英文字母或下划线开头、字母/数字/下划线组成，如果有其他字符会被替换为”_”）</p>\n<pre><code class=\"python\">def to_safe_name(string):\n    return str(re.sub(&quot;[^a-zA-Z0-9_]+&quot;, &quot;_&quot;, string)\n</code></pre>\n<h5 id=\"四、框架中读取xmind接口测试数据的代码解析\"><a href=\"#四、框架中读取xmind接口测试数据的代码解析\" class=\"headerlink\" title=\"四、框架中读取xmind接口测试数据的代码解析\"></a>四、框架中读取xmind接口测试数据的代码解析</h5><p>这一部门的代码我全部copy到下面了，因为自己之前ddt没有用过xmind来作为数据载体，所以手写了一遍去理解xmind模板为什么要这么写，觉得太长的话就直接看最后函数把接口数据整理成什么样的格式就行。</p>\n<pre><code class=\"python\">from xmindparser import xmind_to_dict\nimport json\n\nHOST_TAG_CHOICE = [&quot;mk&quot;, &quot;qw&quot;, &quot;bill&quot;, &quot;qyapi&quot;]  # 对应 host_&lt;mk/qw&gt;\nPRIORITY_TAG_CHOICE = [&quot;critical&quot;, &quot;blocker&quot;, &quot;normal&quot;]\n\nclass ReadXmind(object):\n    &quot;&quot;&quot;读取xmind内容，返回字典列表（list[dict1,dict2]）&quot;&quot;&quot;\n    def __init__(self, file_path, canvas=&quot;&quot;):\n        self.file_path = file_path\n        self.canvas = canvas\n        self.xmind_dict_list = xmind_to_dict(file_path)\n\n    def get_canvas_name_list(self):\n        &#39;&#39;&#39;遍历xmind文件的每一个画布，得到全部画布的名称装成列表 [&#39;画布 1&#39;, &#39;画布 2&#39;]，但是如果传入了canvas，就不重新读直接return&#39;&#39;&#39;\n        return [self.canvas] if self.canvas else [cv.get(&#39;title&#39;) for cv in self.xmind_dict_list]\n\n    def get_canvas_topic(self, canvas=&quot;画布 1&quot;):\n        &quot;&quot;&quot;\n        根据初始指定的画布名称（对应于excel的sheet表），返回该画布的接口数据\n        :return: &#123;&#39;title&#39;: &#39;画布中心主题&#39;, &#39;topics&#39;: [&#123;接口1信息&#125;,&#123;接口2信息&#125;,...]&#125; 此时title为画布 1 的中心主题 BillTrailSettingApi\n        &quot;&quot;&quot;\n        for cv in self.xmind_dict_list: #遍历每一个画布\n            if cv.get(&#39;title&#39;) == canvas: #如果画布名==传入的画布名参数\n                return cv.get(&#39;topic&#39;) #return画布下的全部接口[&#123;接口1信息&#125;,&#123;接口2信息&#125;,...]\n        else:\n            raise Exception(&quot;Xmind中画布&lt;&#123;&#125;&gt;不存在!&quot;.format(canvas))\n\n    def get_canvas_data(self, canvas):\n        &quot;&quot;&quot;\n        获取画布内所有API-CASE信息\n        :return: canvas_data\n        case_dict 字典：存放一个用例的信息，eg用例名event_001、用例描述desc等\n        api_dict 字典：存放一个接口的信息，eg接口名api_name、依赖depends、所有用例test_case_list [&#123;case_dict&#125;,&#123;case_dict&#125;,...]\n        api_case_dict_list 数组：存放一个画布的所有接口信息，[&#123;api_dict&#125;,&#123;api_dict&#125;,...]\n        canvas_data 字典：存放一个画布的信息，&#123;&#39;desc&#39;: &#39;画布 1&#39;, &#39;module&#39;: &#39;BillTrailSettingApi&#39;, &#39;api_case_list&#39;:[&#123;api_dict&#125;,&#123;api_dict&#125;,...]&#125; \n        &quot;&quot;&quot;\n        canvas_data = &#123;&#125; #dict 存放：画布名、中心主题、api_case_list接口列表\n        api_case_dict_list = [] #list 存放：api_dict\n        canvas_topic = self.get_canvas_topic(canvas)\n        module_name = canvas_topic.get(&#39;title&#39;)\n        canvas_data[&#39;desc&#39;] = canvas #画布名\n        canvas_data[&#39;module&#39;] = module_name #中心主题 BillTrailSettingApi\n        api_list = canvas_topic.get(&#39;topics&#39;) or [] #接口列表 [&#123;接口1信息&#125;,&#123;接口2信息&#125;,...]\n        for api in api_list: #遍历每一个接口\n            api_dict = &#123;&#125; #存放：接口信息\n            api_name = api.get(&#39;title&#39;) if api.get(&#39;title&#39;) else &quot;&quot; #api名 event\n            api_desc = api.get(&#39;note&#39;) if api.get(&#39;note&#39;) else &quot;&quot; #描述 新增事件\n            api_labels = api.get(&#39;labels&#39;)  #标签 depends、host、sleep\n            api_dict[&#39;api_name&#39;] = api_name\n            api_dict[&#39;api_desc&#39;] = api_desc\n            api_dict[&#39;depends&#39;] = []  # depends 依赖标签\n            api_dict[&#39;sleep&#39;] = 0  # sleep 标签\n            api_dict[&#39;skipif&#39;] = &quot;&quot;  # skipif 标签\n            host_tag = &quot;host_&quot; + HOST_TAG_CHOICE[0]  # host 标签 默认为qw\n            # 如果有接口数据有标签，重新赋值，否则就是上述空值和默认值\n            if api_labels:\n                for alb in api_labels: #遍历每个标签 &#39;labels&#39;: [&#39;host=qw&#39;, &#39;depends=addUser&#39;, &#39;sleep=2&#39;, &#39;skipif=skip&#39;, &#39;name=name&#39;]\n                    lb_dps = alb.split(&quot;depends=&quot;) #返回[&#39;host=qw&#39;] 子字符串在父字符串中不存在时，返回整个父字符串作为列表的元素\n                    lb_dps2 = alb.split(&quot;name=&quot;)\n                    lb_sleep = alb.split(&quot;sleep=&quot;)\n                    lb_skipif = alb.split(&quot;skipif=&quot;)\n                    lb_host = alb.split(&quot;host=&quot;) #返回[&#39;&#39;,&#39;qw&#39;]\n                    if len(lb_dps) == 2:\n                        api_dict[&#39;depends&#39;].append(lb_dps[-1])\n                    if len(lb_dps2) == 2:\n                        api_dict[&#39;depends&#39;].append(lb_dps2[-1])\n                    if len(lb_sleep) == 2:\n                        api_dict[&#39;sleep&#39;] = int(lb_sleep[-1])\n                    if len(lb_skipif) == 2:\n                        api_dict[&#39;skipif&#39;] = lb_skipif[-1]\n                    if len(lb_host) == 2 and lb_host[-1] in HOST_TAG_CHOICE:\n                        host_tag = &quot;host_&quot; + lb_host[-1]\n            api_dict[&#39;host_tag&#39;] = host_tag\n            api_dict[&#39;test_case_list&#39;] = []  #存放：该接口的全部用例\n            api_detail = api.get(&#39;topics&#39;)[0]\n            path = api_detail.get(&#39;title&#39;) or &quot;&quot; #接口路径\n            rq = api_detail.get(&#39;topics&#39;)[0]\n            method = rq.get(&#39;title&#39;) or &quot;&quot; #请求方法\n            api_dict[&#39;path&#39;] = path\n            api_dict[&#39;method&#39;] = method\n            case_cf_list = rq.get(&#39;topics&#39;) #一个接口的多个条用例 [&#123;用例1&#125;,&#123;用例2&#125;,...]\n            if api_name.startswith(&#39;#&#39;):  #被注释掉的接口，不解析用例参数\n                continue\n            for idx, case in enumerate(case_cf_list): #enumerate将可遍历的数据对象组合为一个索引序列\n                if case.get(&#39;title&#39;).startswith(&#39;#&#39;):  #被注释掉的用例，不解析\n                    continue\n                case_dict = &#123;&#125; #存放：用例信息\n                case_labels = case.get(&#39;labels&#39;)  # 用例描述下的标签\n                case_dict[&#39;module&#39;] = module_name  # 模块名\n                case_dict[&#39;api_name&#39;] = api_name  # api名\n                case_dict[&#39;host_tag&#39;] = host_tag  # host_qw / host_mk\n                case_dict[&#39;api_desc&#39;] = api_desc  # api描述\n                case_dict[&#39;depends&#39;] = api_dict[&#39;depends&#39;]  # api依赖\n                case_dict[&#39;sleep&#39;] = api_dict[&#39;sleep&#39;]  # api sleep\n                case_dict[&#39;skipif&#39;] = api_dict[&#39;skipif&#39;]  # api skipif\n                case_dict[&#39;name&#39;] = f&quot;&#123;api_name&#125;_&quot; + str(idx+1).zfill(3)  # case名 zfill填充字符串为三位 event_001 event_002\n                case_dict[&#39;desc&#39;] = case.get(&#39;title&#39;)  # 用例描述\n                case_dict[&#39;priority&#39;] = &quot;&quot;  # 用例优先级\n                if case_labels: #标签为 用例严重程度\n                    for clb in case_labels:\n                        if clb in PRIORITY_TAG_CHOICE:\n                            case_dict[&#39;priority&#39;] = clb\n                            break\n                case_dict[&#39;method&#39;] = method  # method: get/post/...\n                case_dict[&#39;path&#39;] = path  # api path\n                case_input_output = case.get(&#39;topics&#39;)[0] #入参及后面的子主题\n                case_dict[&#39;data&#39;] = case_input_output.get(&#39;title&#39;)  #入参\n                output_set_vars = case_input_output.get(&#39;topics&#39;)\n                str_expect = output_set_vars[0].get(&#39;title&#39;) #期望结果\n                try:\n                    case_dict[&#39;expect&#39;] = json.loads(str_expect, strict=False)  #xmind读出来的期望结果str转换成字典\n                # 自定义异常 定位到主题名-api名-期望结果\n                except Exception as e:\n                    print(&quot;API:&#123;0&#125;-&gt;&#123;1&#125;\\nJSON Content:&#123;2&#125;&quot;.format(module_name, api_name, str_expect))\n                    raise e\n                case_dict[&#39;set_vars&#39;] = &#123;&#125;\n                if len(output_set_vars) &gt; 1: #期望结果有两个主题 即设置了全局的变量\n                    str_set_vars = output_set_vars[1].get(&#39;title&#39;) #拿到变量&#39;&#123;&quot;customerId&quot;: &quot;$..data.id&quot;&#125;&#39;\n                    try:\n                        case_dict[&#39;set_vars&#39;] = json.loads(str_set_vars, strict=False)  # 需要设置为全局的变量，key-value， key为保存变量名，value为字段查询名或jsonpath\n                    #自定义异常 变量写法有问题 定位到主题名-api名-变量\n                    except Exception as e:\n                        print(&quot;API:&#123;0&#125;-&gt;&#123;1&#125;\\nJSON Content:&#123;2&#125;&quot;.format(module_name, api_name, str_set_vars))\n                        raise e\n                api_dict[&#39;test_case_list&#39;].append(dict(case_dict))\n            api_case_dict_list.append(api_dict)\n        canvas_data[&#39;api_case_list&#39;] = api_case_dict_list\n        return canvas_data\n\n    def get_xmind_data(self):\n        &#39;&#39;&#39;读xmind每一个画布的数据 [&#123;canvas_data&#125;,&#123;canvas_data&#125;,...]&#39;&#39;&#39;\n        return [self.get_canvas_data(cv) for cv in self.get_canvas_name_list()]\n&#39;&#39;&#39;\ncase_dict的值，之后会作为pytest的传参\n&#123;&#39;module&#39;: &#39;BillTrailSettingApi&#39;, &#39;api_name&#39;: &#39;event&#39;, &#39;host_tag&#39;: &#39;host_qw&#39;, &#39;api_desc&#39;: &#39;新增事件&#39;, \n&#39;depends&#39;: [&#39;addUser&#39;, &#39;name&#39;], &#39;sleep&#39;: 2, &#39;skipif&#39;: &#39;skip&#39;, \n&#39;name&#39;: &#39;event_001&#39;, &#39;desc&#39;: &#39;异常值（新增事件参数为异常值校验）&#39;, &#39;priority&#39;: &#39;critical&#39;, &#39;method&#39;: &#39;POST&#39;, \n&#39;path&#39;: &#39;/bill-trail-settings-api/trail/event&#39;, &#39;data&#39;: &#39;&#123;&quot;eventIcon&quot;: &quot;事件图标&quot;, &quot;eventName&quot;: &quot;事件名称&quot;, &quot;eventTopic&quot;: &quot;事件&quot;, &quot;fieldList&quot;: &quot;事件内容列表&quot;, &quot;id&quot;: &quot;事件ID，编辑时必传&quot;, &quot;operator&quot;: &quot;操作人&quot;, &quot;remark&quot;: &quot;备注&quot;, &quot;trailId&quot;: &quot;旅程项目ID&quot;&#125;&#39;, \n&#39;expect&#39;: &#123;&#39;code&#39;: 8401, &#39;msg&#39;: &#39;参数不能为空&#39;, &#39;data&#39;: None&#125;, &#39;set_vars&#39;: &#123;&#39;customerId&#39;: &#39;$..data.id&#39;&#125;&#125;\n&#39;&#39;&#39;\n</code></pre>\n<p>一个点：因为之前没找到完整的xmind模板，不明白为什么api_name主题下的标签，depends=  和 name=  要存在一个数组depends中，最后悟了。方便dependency去传参，这样没有依赖，却需要别名给其他接口依赖时，depends传入空数组[]。妙！（dict的value存数组也完全ok）</p>\n<pre><code class=\"python\">dp_name, depends = None, []\nfor dp in api_data[&#39;depends&#39;]: #[&quot;addEevent&quot;,&quot;event&quot;] api_name=event\n    if dp == api_name: #如果apiname是当前自己接口的名字，作为别名\n        dp_name = api_name\n        continue\n    else:\n        depends.append(dp)\nif dp_name or len(depends) &gt; 0:\n    logger.info(&quot;dependency: &#123;&#125; : name=&#123;&#125;,depends=&#123;&#125;&quot;.format(func_name, dp_name, depends))\n    attrs[func_name] = pytest.mark.dependency(name=dp_name, depends=depends, scope=&#39;class&#39;)(attrs[func_name])\n# skip以#开头的测试用例\nif api_name.startswith(&quot;#&quot;) or api_desc.startswith(&quot;#&quot;):\n    attrs[func_name] = pytest.mark.skip(reason=&#39;测试用例被注释#&#39;)(attrs[func_name])\n</code></pre>\n<h5 id=\"五、接口脚本自动生成的大概原理和过程\"><a href=\"#五、接口脚本自动生成的大概原理和过程\" class=\"headerlink\" title=\"五、接口脚本自动生成的大概原理和过程\"></a>五、接口脚本自动生成的大概原理和过程</h5><p>所用技术：文件写入脚本、compile()内置函数编译、metaclass对子类的改写、装饰器与闭包函数，和一些杂七杂八的</p>\n<p>上面写到了DDT的测试数据xmind载体的解析，拿到了参数之后传入pytest即可（题外话pytest两种传参方式，fixture或者parametrize，一定要知晓参数传递过程的），接下来写一下作者大大将参数融进pytest的过程，可能自己理解的比较简陋，有大佬指点的话感激涕零~</p>\n<p>第一步：构建用例脚本，就是with open去写就ok了，主要写入的是：导包的内容、类模板（包括脚本名称和测试数据），compile后生成脚本的类如下所示~</p>\n<pre><code class=\"python\">@allure.feature(&#39;画布 1&#39;)\nclass TestBillTrailSettingApi(PreRequest, metaclass=CaseMetaClass):\n    test_py = &quot;test_bill-trail-settings-api.py&quot;\n    test_cases_data = [&#123;接口1&#125;,&#123;接口2&#125;,...]\n</code></pre>\n<p>PreRequest这个父类就是一些请求前的操作，比如拿变量值、sessionId，就不展开了。</p>\n<p>第二步：compile生成函数对象，用例的模板字符串参数传入api_name，来动态生成接口函数。模板有很多执行时的细节操作，比如skip、allure敏捷标记等，不详细展开了，贴一下生成的函数代码。如下~</p>\n<pre><code class=\"python\">def create_function(function_express, namespace=None):\n    &quot;&quot;&quot;动态生成函数对象&quot;&quot;&quot;\n    if namespace is not None:\n        builtins.__dict__.update(namespace) # 哇 全部添加到内建模块中\n    module_code = compile(function_express, &#39;&#39;, &#39;exec&#39;)  # 根据模板(字符串)生成可执行的代码，mode为exec（源包含多个python语句时使用）\n    function_code = [x for x in module_code.co_consts if isinstance(x, types.CodeType)][0] #注意isinstance()会考虑继承关系 所以这里用type()不行哟！\n    return types.FunctionType(function_code, builtins.__dict__) #返回内存地址&lt;function test_001_event at 0x05A0AA98&gt;\n</code></pre>\n<p>第三步：重点来了！！写一个metaclass，来修改子类的属性或方法</p>\n<pre><code class=\"python\">class CaseMetaClass(type):\n    def __new__(cls, name, bases, attrs):\n        # print(&quot;此时new的对象是&quot;,cls.__name__) #CaseMetaClass\n        test_cases_data = attrs.pop(&#39;test_cases_data&#39;) # 字典的pop有返回值 拿到一个画布的接口数据[&#123;接口1&#125;,&#123;接口2&#125;,...]\n        for idx, api_data in enumerate(test_cases_data):\n            if is_contains_chinese(api_data[&#39;api_name&#39;]) and not is_contains_chinese(api_data[&#39;api_desc&#39;]): #检查了一手api_name是否包含中文，decs为英文，是就互换一下\n                api_data[&#39;api_name&#39;], api_data[&#39;api_desc&#39;] = api_data[&#39;api_desc&#39;], api_data[&#39;api_name&#39;]\n            api_name = api_data[&#39;api_name&#39;]\n            api_name = &quot;&quot; if api_name is None else api_name #又让api_name兼容一手None值\n            api_desc = api_data[&#39;api_desc&#39;]\n            case_list = api_data[&#39;test_case_list&#39;] #一个接口的用例列表 [&#123;case_dict&#125;,&#123;case_dict&#125;,...]\n            func_name = &#39;test_&#123;0&#125;_&#123;1&#125;&#39;.format(str(idx+1).zfill(3), to_safe_name(api_name.replace(&quot;#&quot;, &quot;&quot;))) #api_name=event格式统一成 test_001_event\n            function = create_function(func_template.format(func_name=func_name),\n                                       namespace=&#123;\n                                           &#39;pytest&#39;: pytest,\n                                           &#39;allure&#39;: allure,\n                                           &#39;logger&#39;: logger,\n                                           &#39;is_contains_chinese&#39;: is_contains_chinese,\n                                           &#39;sleep_progressbar&#39;: sleep_progressbar,\n                                           &#39;methodcaller&#39;: methodcaller,\n                                           &#39;setup&#39;: setup,\n                                           &#39;callback&#39;: callback,\n                                       &#125;)\n            ids = [str(c).zfill(3) for c in range(1, len(case_list)+1)] # 接口有多少条用例 001 002 003...\n            # 哇 这个写法又学习了，返回的function内存地址后，直接手工闭包！和用parametrize装饰器一样哟，nice！\n            attrs[func_name] = pytest.mark.parametrize(&#39;case_data&#39;, case_list, ids=ids)(function)\n            dp_name, depends = None, []\n            for dp in api_data[&#39;depends&#39;]:\n                if dp == api_name:\n                    dp_name = api_name\n                    continue\n                else:\n                    depends.append(dp)\n            if dp_name or len(depends) &gt; 0:\n                logger.info(&quot;dependency: &#123;&#125; : name=&#123;&#125;,depends=&#123;&#125;&quot;.format(func_name, dp_name, depends))\n                attrs[func_name] = pytest.mark.dependency(name=dp_name, depends=depends, scope=&#39;class&#39;)(attrs[func_name]) #装饰一手 依赖\n            if api_name.startswith(&quot;#&quot;) or api_desc.startswith(&quot;#&quot;):\n                attrs[func_name] = pytest.mark.skip(reason=&#39;测试用例被注释#&#39;)(attrs[func_name]) #再装饰一手skip 基本齐活，坐等调用func_name，pytest就嗖嗖运行起来惹，妙！\n            # 集成allure装饰器 这个不知道是不是作者大大觉得模块下面展示case就行了，再打story好懒得挨个点开喔，我是这么想的~\n            # attrs[func_name] = allure.story(api_data[&#39;api_desc&#39;])(attrs[func_name])\n        return super().__new__(cls, name, bases, attrs)\n</code></pre>\n<p>一些点：</p>\n<p>1、pytest在收集用例时，按照test_ 开头去找，自动生成的脚本就是test_ 文件名.py，测试用例集按照类来展示一个xmind文件每个画布的接口用例，比如上面的class TestBillTrailSettingApi()，pytest执行时按顺序去解析类，会先调用CaseMetaClass.__ new __()来创建类，所以CaseMetaClass可以借助attrs来改变TestBillTrailSettingApi()类的属性或方法。</p>\n<p>2、metaclass我的理解是the class of the class，类的类，它new出来的是一个类，而非实例。自定义的CaseMetaClass通过new方法返回子类的name、bases、attrs即类名、继承的集合、属性方法。这是meclass与继承不一样层面的原因，子类继承父类除私有属性和方法外的特性，对父类进行重写，但父类无法操纵子类，借用metaclass，就可以对子类进行操作，像装饰器一样去【动态修改】。（关于metaclass这篇还可以：<a href=\"https://www.cnblogs.com/yssjun/p/9832526.html?ivk_sa=1024320u%EF%BC%8C%E5%A4%9A%E5%A4%9Adebug%E8%AF%95%E4%B8%80%E8%AF%95%E7%90%86%E8%A7%A3%E6%9B%B4%E5%BF%AB%EF%BC%89\">https://www.cnblogs.com/yssjun/p/9832526.html?ivk_sa=1024320u，多多debug试一试理解更快）</a></p>\n<p>3、在上述代码的new方法中，通过“手工闭包”来形成装饰器，将函数内存地址传给pytest.mark.parametrize()，等同于平常使用@pytest.mark.parametrize()。下面写了一个最最最简单的闭包函数，当然还有装饰方法、装饰器传参等各种情况就不细说了。只是简单举个栗子~</p>\n<pre><code class=\"python\"> def outer(func):\n        def inner():\n            print(&quot;before&quot;)\n            func()\n            print(&quot;after&quot;)\n        return inner\n    \n    @outer\n    def cytest():\n        print(&quot;陈语测试&quot;)\n    cytest() #装饰后调用原函数\n    \n    #这等价于上面的装饰\n    cytest = outer(cytest)\n    cytest() #调用闭包函数inner\n</code></pre>\n<p>4、当xmind的一个画布由多个接口，new方法在for循环中遍历每个接口，根据接口api_name来使子类动态生成多个function，即动态生成了多个接口用例集了，如下图。</p>\n<p><img src=\"C:\\Users\\86183\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211120151106113.png\" alt=\"image-20211120151106113\"></p>\n<h5 id=\"六、写不动了\"><a href=\"#六、写不动了\" class=\"headerlink\" title=\"六、写不动了\"></a>六、写不动了</h5><p>以上就是大致把数据流看了一下，做的笔记。</p>\n<p>这样run_main主入口脚本的运行过程就可以串起来啦</p>\n"},{"title":"分布式版本控制系统","_content":"\n\n# 第1天-分布式版本控制系统\n\n## 一、Git、Github、Gitlab 的区别\n\nGit是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\n\n是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。\n\nGithub是在线的基于Git的代码托管服务。 GitHub是2008年由Ruby on Rails编写而成。GitHub同时提供付费账户和免费账户。这两种账户都可以创建公开的代码仓库，只有付费账户可以创建私有的代码仓库。 Gitlab解决了这个问题, 可以在上面创建免费的私人repo。 \n\ngit            是一套软件 可以做本地私有仓库\n\ngithub   本身是一个代码托管网站   公有和私有仓库(收费)   不能做本地私有仓库\n\ngitlab     本身也是一个代码托管的网站 功能上和github没有区别   公有和私有仓库（免费）  可以部署本地私有仓库\n\n## 二、Git 与 SVN 区别\n\nGIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。\n\n如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。\n\n**Git 与 SVN 区别**\n\n1. Git是分布式的，svn不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。\n2. GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。\n3. GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。\n4. GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。\n5. GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。\n\ngit   是分布式的版本控制器  没有客户端和服务器端的概念\n\nsvn 它是C/S结构的版本控制器  有客户端和服务器端  服务器如果宕机而且代码没有备份的情况下  完整代码就会丢失\n\n## 三、部署Git 服务\n\n**创建git仓库**\n\ngit-server上的操作：\n\n```\n[root@qfedu.com ~]# yum install git git-core gitweb -y\n[root@qfedu.com ~]# useradd git\n[root@qfedu.com ~]# passwd git\n[root@qfedu.com ~]# mkdir /git-root/\n[root@qfedu.com ~]# cd /git-root/\n[root@qfedu.com git-root]# git init --bare shell.git\nInitialized empty Git repository in /git-root/shell.git/\n注意：\ngit init 和 git init --bare 的区别:\n使用--bare选项时,不再生成.git目录,而是只生成.git目录下面的版本历史记录文件,这些版本历史记录文件也不再存放在.git目录下面,而是直接存放在版本库的根目录下面.\n用\"git init\"初始化的版本库用户也可以在该目录下执行所有git方面的操作。但别的用户在将更新push上来的时候容易出现冲突。\n使用”git init --bare”方法创建一个所谓的裸仓库，之所以叫裸仓库是因为这个仓库只保存git历史提交的版本信息，而不允许用户在上面进行各种git操作，如果你硬要操作的话，只会得到下面的错误（”This operation must be run in a work tree”）这个就是最好把远端仓库初始化成bare仓库的原因\n\n[root@qfedu.com git-root]# chown -R git:git shell.git\n```\n\n**git仓库测试**\n\ngit-client上的操作：\n\n```shell\n[root@qfedu.com ~]# ssh-keygen\n[root@qfedu.com ~]# ssh-copy-id git@192.168.1.178\n\n[root@qfedu.com shell]# git config --global user.email \"you@example.com\"\n[root@qfedu.com shell]# git config --global user.name \"Your Name\"\n\n[root@qfedu.com ~]# git clone git@192.168.1.178:/git-root/shell.git\n[root@qfedu.com ~]# ls\nrh  shell\n[root@qfedu.com ~]# cd shell/\n[root@qfedu.com shell]# vim test.sh\n[root@qfedu.com shell]# git add test.sh\n\n[root@qfedu.com shell]# git commit -m 'first commit'\n[master (root-commit) 33c5fbf] first commit\n 1 file changed, 2 insertions(+)\n create mode 100644 test1.sh\n[root@qfedu.com shell]# git push origin master\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 230 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo git@192.168.1.178:/git-root/shell.git\n * [new branch]      master -> master\n```\n\n## 四、Git工作流程\n\n一般工作流程如下：\n\n- 克隆 Git 资源作为工作目录。\n- 在克隆的资源上添加或修改文件。 \n- 如果其他人修改了，你可以更新资源。\n- 在提交前查看修改。\n- 提交修改。\n- 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。\n\n 　　Git 的工作流程示意图：\n\n![img](assets/805129-20160710102658467-1520443599.png)\n\n## 五、Git基本概念\n\n- **工作区：**就是你在电脑里能看到的目录。\n- **暂存区：**英文叫stage, 或index。一般存放在\"git目录\"下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。\n- **版本库：**工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。\n\n　　工作区、版本库中的暂存区和版本库之间的关系的示意图：\n\n![img](assets/805129-20160710103123608-1172715931.jpg)\n\n- 　　图中左侧为工作区，右侧为版本库。在版本库中标记为 \"index\" 的区域是暂存区（stage, index），标记为 \"master\" 的是 master 分支所代表的目录树。 \n\n\n- 　　图中我们可以看出此时 \"HEAD\" 实际是指向 master 分支的一个\"游标\"。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。 \n\n\n- 　　图中的 objects 标识的区域为 Git 的对象库，实际位于 \".git/objects\" 目录下，里面包含了创建的各种对象及内容。 \n\n\n- 　　当对工作区修改（或新增）的文件执行 \"git add\" 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。 \n\n\n- 　　当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。 \n\n\n- 　　当执行 \"git reset HEAD\" 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。 \n\n\n- 　　当执行 \"git rm --cached <file>\" 命令时，会直接从暂存区删除文件，工作区则不做出改变。 \n\n\n- 　　当执行 \"git checkout .\" 或者 \"git checkout -- <file>\" 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。 \n\n\n- 　　当执行 \"git checkout HEAD .\" 或者 \"git checkout HEAD <file>\" 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。\n\n\n## 六、Git 客户端安装使用\n\n### 1、 Git 安装配置\n\n```shell\n[root@qfedu.com ~]# yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n[root@qfedu.com ~]# yum -y install git git-all git-core\n[root@qfedu.com ~]# git --version\ngit version 2.18.4\n```\n\n------\n\n### 2、Git 配置\n\nGit 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。\n\n这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：\n\n- `/etc/gitconfig` 文件：系统中对所有用户都普遍适用的配置。若使用 `git config` 时用 `--system` 选项，读写的就是这个文件。\n- `~/.gitconfig` 文件：用户目录下的配置文件只适用于该用户。若使用 `git config` 时用 `--global` 选项，读写的就是这个文件。\n- 当前项目的 Git 目录中的配置文件（也就是工作目录中的 `.git/config` 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 `.git/config` 里的配置会覆盖 `/etc/gitconfig` 中的同名变量。\n\n#### 1、Git 用户信息\n\n配置个人的用户名称和电子邮件地址：\n\n```shell\n[root@qfedu.com ~]# git config --global user.name \"qfedu\"\n[root@qfedu.com ~]# git config --global user.email test@qq.com\n```\n\n如果用了 **--global** 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。\n\n如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 --global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。\n\n#### 2、文本编辑器\n\n设置Git默认使用的文本编辑器, 一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置\n\n```shell\n[root@qfedu.com ~]# git config --global core.editor emacs\n```\n\n#### 3、差异分析工具\n\n还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：\n\n```shell\n[root@qfedu.com ~]# git config --global merge.tool vimdiff\n```\n\nGit 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。\n\n当然，你也可以指定使用自己开发的工具\n\n#### 4、查看配置信息\n\n要检查已有的配置信息，可以使用 git config --list 命令：\n\n```shell\n[root@qfedu.com ~]# git config --list\nhttp.postbuffer=2M\nuser.name=runoob\nuser.email=test@runoob.com\n```\n\n有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。\n\n这些配置我们也可以在 **~/.gitconfig** 或 **/etc/gitconfig** 看到，如下所示：\n\n```shell\n[root@qfedu.com ~]# vim ~/.gitconfig \n```\n\n显示内容如下所示：\n\n```shell\n[http]\n    postBuffer = 2M\n[user]\n    name = git\n    email = test@qfedu.com.com\n```\n\n也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：\n\n```shell\n[root@qfedu.com ~]# git config user.name\ngit\n```\n\n### 3、Git 使用\n\n#### 1、ssh 链接\n\n客户机上产生公钥上传到gitlab的SSH-Keys里，git clone下载和git push上传都没问题，这种方式很安全\n\n#### 2、http 链接（两种方式实现）\n\n##### 1、修改代码里的 .git/config 文件添加登录用户名密码\n\n```shell\n[root@qfedu.com ~]# cd .git\n[root@qfedu.com ~]# cat config\n[core]\nrepositoryformatversion = 0\nfilemode = true\nbare = false\nlogallrefupdates = true\n[remote \"origin\"]\nfetch = +refs/heads/*:refs/remotes/origin/*\nurl = http://username:password@qfedu.com@172.17.0.39:sauser/ansible.git\n[branch \"master\"]\nremote = origin\nmerge = refs/heads/master\n```\n\n##### 2、 执行命令设置登录用户和密码\n\n```shell\n# cd到根目录，执行\n[root@qfedu.com ~]# git config --global credential.helper store  # 执行之后会在.gitconfig文件中多添加以下选项\n  [credential]         \n  \t\thelper = store\n# cd到项目目录，执行git pull命令，会提示输入账号密码。输完这一次以后就不再需要，并且会在根目录生成一个.git-credentials文件\n[root@qfedu.com ~]# git pull \n  Username for 'http://172.17.0.39:sauser/ansible.git': \n  xxxx@xxxx.com Password for 'https://xxxx@xxxx.com@172.17.0.39:sauser/ansible.git':\n[root@qfedu.com ~]# cat .git-credentials\n  https://Username:Password@qfedu.com.oschina.net\n# 之后pull/push代码都不再需要输入账号密码了\n```\n\n#### 3、设置身份验证\n\n**注意：**设定本机用户名，绑定邮箱，让远程服务器知道机器的身份\n\n```shell\n[root@qfedu.com ~]# git config --global user.name \"user_name\" \n[root@qfedu.com ~]# git config --global user.email \"XXXXX@XX.com\"\n```\n\n#### 4、本地项目与远程服务器项目之间的交互\n\n1、如果你没有最新的代码，希望从头开始\n\n```shell\n[root@qfedu.com ~]# git clone git@XXX.git      # 这里是项目的地址（可从项目主页复制），将远程服务器的内容完全复制过来 \n[root@qfedu.com ~]# cd BGBInspector_V01        # clone 之后进入该项目的文件夹 \n[root@qfedu.com ~]# touch　README.md           # 新建readme文件 \n[root@qfedu.com ~]# git add README.md          # 将新的文件添加到git的暂存区 \n[root@qfedu.com ~]# git commit -m ‘Its note：add a readme file’ # 将暂存区的文件提交到某一个版本保存下来，并加上注释 \n[root@qfedu.com ~]# git push -u origin master  # 将本地的更改提交到远程服务器\n```\n\n2、如果你已经有一个新版代码，希望直接把本地的代码替换到远程服务器\n\n```shell\n[root@qfedu.com ~]# cd existing_folder          #进入代码存在的文件夹，或者直接在该文件夹打开\n[root@qfedu.com ~]# git init           # 初始化 \n[root@qfedu.com ~]# git remote add origin git@master:/git-test/shell.git  #添加远程项目\"shell\"库的地址（可从项目主页复制） ,前提是事先需要先在git远程服务器上创建相应的裸库\"shell\"\n[root@qfedu.com ~]# git add .                   #添加该文件夹中所有的文件到git的暂存区 \n[root@qfedu.com ~]# git commit -m ‘note’        #提交所有代码到本机的版本库 \n[root@qfedu.com ~]# git push -u origin master   #将本地的更改提交到远程服务器\n```\n\n- git 中 clone过来的时候，git 不会对比本地和服务器的文件，也就不会有冲突，\n\n- 建议确定完全覆盖本地的时候用 clone，不确定会不会有冲突的时候用 git pull，将远程服务器的代码download下来\n\n- git pull=git fetch+git merge\n\n    实验如下：\n\n    ```\n    本地代码内容如下：\n    [root@node1 shell]# cat mem.sh \n    free -m | awk 'NR==2{print $4}'\n    echo hello\n    echo ni hao\n    \n    远程Git服务器代码内容如下：\n    [root@node1 shell]# cat mem.sh \n    free -m | awk 'NR==2{print $4}'\n    echo hello\n    echo ni hao\n    echo ha ha\n    \n    本地机器做fetch操作：\n    [root@node1 shell]# git fetch origin master:test\n    remote: Enumerating objects: 5, done.\n    remote: Counting objects: 100% (5/5), done.\n    remote: Compressing objects: 100% (2/2), done.\n    remote: Total 3 (delta 0), reused 0 (delta 0)\n    Unpacking objects: 100% (3/3), done.\n    From master:/git-test/shell\n     * [new branch]      master     -> test\n       b522245..10f9569  master     -> origin/master\n    \n    fetch是把远程代码作为本地的一个其他分支下载到本地，并不更新本地分支，这里的命令是把远程的”master“分支下载到本地作为一个新的分支”test“存在\n    \n    查看本地文件并没有发生变化\n    [root@node1 shell]# ls  \n    mem.sh\n    [root@node1 shell]# cat mem.sh \n    free -m | awk 'NR==2{print $4}'\n    echo hello\n    echo ni hao\n    \n    用diff查看本地master分支和fetch下来的test分支有什么区别：\n    [root@node1 shell]# git diff master test\n    diff --git a/mem.sh b/mem.sh\n    index 7ce0803..c0c8cef 100644\n    --- a/mem.sh\n    +++ b/mem.sh\n    @@ -1,3 +1,4 @@\n     free -m | awk 'NR==2{print $4}'\n     echo hello\n     echo ni hao\n    +echo ha ha\n    \n    如果发现fetch下来的代码没什么问题，可以选择和本地分支进行合并\n    [root@node1 shell]# git merge \n    Updating eb8645c..10f9569\n    Fast-forward\n     mem.sh | 1 +\n     1 file changed, 1 insertion(+)\n    [root@node1 shell]# cat mem.sh \n    free -m | awk 'NR==2{print $4}'\n    echo hello\n    echo ni hao\n    echo ha ha\n    \n    ```\n\n    \n\n#### 5、常用的git 命令 \n\n![img](assets/011500266295799.jpg)\n\n```shell\n[root@qfedu.com ~]# git init                      # 初始化 \n[root@qfedu.com ~]# git add main.cpp              # 将某一个文件添加到暂存区 \n[root@qfedu.com ~]# git add .                     # 将文件夹下的所有的文件添加到暂存区 \n[root@qfedu.com ~]# git commit -m ‘note‘          # 将暂存区中的文件保存成为某一个版本 \n[root@qfedu.com ~]# git log                       # 查看所有的版本日志 \n[root@qfedu.com ~]# git status                    # 查看现在暂存区的状况 \n[root@qfedu.com ~]# git diff                      # 查看现在文件与上一个提交-commit版本的区别 \n[root@qfedu.com ~]# git reset --hard HEAD^        # 回到上一个版本 \n[root@qfedu.com ~]# git reset --hard XXXXX        # XXX为版本编号，回到某一个版本 \n[root@qfedu.com ~]# git pull origin master        # 从主分支pull到本地 \n[root@qfedu.com ~]# git push -u origin master     # 从本地push到主分支 \n[root@qfedu.com ~]# git pull                      # pull默认主分支 \n[root@qfedu.com ~]# git push                      # push默认主分支 ...\n```\n\n#### 6、版本穿梭\n\n##### 1、版本回退\n\n```shell\n# 用 git log 命令查看：\n# 每一个提交的版本都唯一对应一个 commit 版本号，\n# 使用 git reset 命令退到上一个版本：\n[root@qfedu.com ~]# git reset --hard HEAD^\n```\n\n```shell\n[root@qfedu.com ~]# git reflog                    # 查看命令历史，以便确定要回到哪个版本\n[root@qfedu.com ~]# git reset --hard commit_id    # 比如git reset --hard 3628164（不用全部输入，输入前几位即可）\n```\n\n##### 2、分支管理\n\n1、创建分支    \n\n```shell\n[root@qfedu.com ~]# git checkout -b dev     #创建dev分支，然后切换到dev分支\n[root@qfedu.com ~]# git checkout            #命令加上-b参数表示创建并切换，相当于以下两条命令：\n[root@qfedu.com ~]# git branch dev git checkout dev\n[root@qfedu.com ~]# git branch              #命令查看当前分支,\n[root@qfedu.com ~]# git branch              #命令会列出所有分支，当前分支前面会标一个*号\n[root@qfedu.com ~]# git branch * dev   master\n[root@qfedu.com ~]# git add readme.txt git commit -m \"branch test\"  # 在dev分支上正常提交.\n```\n\n2、分支切换\n\n```shell\n[root@qfedu.com ~]# git checkout master     #切换回master分支\n# 查看一个readme.txt文件，刚才添加的内容不见了，因为那个提交是在dev分支上，而master分支此刻的提交点并没有变  \n```\n\n3、合并分支\n\n```shell\n[root@qfedu.com ~]# git merge dev           #把dev分支的工作成果合并到master分支上\n[root@qfedu.com ~]# git merge               #命令用于合并指定分支到当前分支。\n# 合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。\n```\n\n```shell\n注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。\n当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。\n```\n\n```shell\n[root@qfedu.com ~]# git branch -d dev       #删除dev分支了：\n删除后，查看branch，就只剩下master分支了.\n```\n\n##### 3、解决冲突\n\n```shell\n[root@qfedu.com ~]# git checkout -b feature1        # 创建新的feature1分支\n# 修改readme.txt最后一行，改为：\nCreating a new branch is quick AND simple.\n\n[root@qfedu.com ~]# git add readme.txt              # 在feature1分支上提交\n[root@qfedu.com ~]# git commit -m \"AND simple\"\n[root@qfedu.com ~]# git checkout master             #切换到master分支\nSwitched to branch 'master' Your branch is ahead of 'origin/master' by 1 commit.\nGit还会自动提示我们当前master分支比远程的master分支要超前1个提交。\n\n在master分支上把readme.txt文件的最后一行改为：\nCreating a new branch is quick & simple.\n[root@qfedu.com ~]# git add readme.txt \n[root@qfedu.com ~]# git commit -m \"& simple\"\n\n现在，master分支和feature1分支各自都分别有新的提交\n这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：\ngit merge feature1 Auto-merging readme.txt CONFLICT (content): \nMerge conflict in readme.txt Automatic merge failed; \nfix conflicts and then commit the result.\n```\n\n```shell\nreadme.txt文件存在冲突，必须手动解决冲突后再提交。\n[root@qfedu.com ~]# git status 可以显示冲突的文件;\n直接查看readme.txt的内容：\nGit is a distributed version control system.\nGit is free software distributed under the GPL. \nGit has a mutable index called stage. \nGit tracks changes of files. \n<<<<<<< HEAD Creating a new branch is quick & simple. ======= Creating a new branch is quick AND simple. >>>>>>> feature1\nGit用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改后保存再提交：\n[root@qfedu.com ~]# git add readme.txt  \n[root@qfedu.com ~]# git commit -m \"conflict fixed\" \n[master 59bc1cb] conflict fixed\n最后，删除feature1分支：\n[root@qfedu.com ~]# git branch -d feature1 \nDeleted branch feature1 (was 75a857c).\n```\n\n## 七、Github 远程仓库\n\n1、github.com 注册账户\n\n2、github 上创建仓库\n\n3、本地服务器生成 ssh 公钥\n\n```shell\n[root@qfedu.com ~]# ssh-keygen -t rsa -C 'meteor@163.com'  # 邮箱要与github上注册的相同\n[root@qfedu.com ~]# cat .ssh/id_rsa.pub \nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVThfq4brrlsPGtAknVB0TLPx+7Dd3qlxTbSIrUOsGC5Y8JuNqVTlIntZB4oNj8cSQrWvec9CKm0a8o7WwaJIiqpxurz+YpQHP2KbapftKIxsX4hPf/z+p0El1U6arQa35/xmNsq+cJLH/bDdRG+EMDhuCBmjVZOlLj/hEdeIT6s56AnnCkaWoF+sq58KCF7Tk54jRbs/YiyE4SN7FuA70r+07sA/uj0+lmuk4E190KtQUELhjX/E9stivlqiRhxnKvVUqXDywsjfM8Rtvbi4Fg9R8Wt9fpd4QwnWksYUoR5qZJFYXO4hSZrUnSMruPK14xXjDJcFDcP2eHIzKgLD1 meteor@163.com\n```\n4、 github 添加 ssh 公钥 \n\n复制以上的公钥，在 github 中添加ssh key\n\n5、测试连接\n\n```shell\n[root@qfedu.com ~]# yum install git\n........\n[root@qfedu.com ~]# ssh -T git@qfedu.comhub.com\nThe authenticity of host 'github.com (13.250.177.223)' can't be established.\nRSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.\nRSA key fingerprint is MD5:16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added 'github.com,13.250.177.223' (RSA) to the list of known hosts.\nHi meteor! You've successfully authenticated, but GitHub does not provide shell access.\n[root@qfedu.com ~]#\n```\n6、连接远程仓库（创建一个测试存储库）\n\n![it_remote_metho](./assets/git_remote_method.png)\n\n```shell\n# 在 github 网站新建一个仓库，命名为linux\n~~~\n[root@qfedu.com ~]# cd /opt\n[root@qfedu.com ~]# mkdir linux\n[root@qfedu.com ~]# mkdir linux\n[root@qfedu.com ~]# cd linux\n~~~\n# git 初始化，然后做第一个基本的git操作(需要在github上创建存储库)\n[root@qfedu.com ~]# git init\n[root@qfedu.com ~]# touch README\n[root@qfedu.com ~]# git add README\n[root@qfedu.com ~]# git commit -m 'first commit'\n[root@qfedu.com ~]# git remote add origin git@qfedu.comhub.com:userhub/linux.git\n~~~\n# 若出现origin已经存在的错误，删除origin\n[root@qfedu.com linux]# git remote rm origin\n# 现在继续执行push到远端\n~~~\n[root@qfedu.com linux]# git remote add origin git@qfedu.comhub.com:userhub/linux.git\n[root@qfedu.com linux]# git push -u origin master\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 205 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo git@qfedu.comhub.com:fakehydra/linux-.git\n * [new branch]      master -> master\n分支 master 设置为跟踪来自 origin 的远程分支 master。\n# 注意\n# 设置存储库链接\n[root@qfedu.com ~]# git remote set-url origin git@qfedu.comhub.com:userhub/linux.git\n# 如果 push 失败，合并分支到 master 再 push\n[root@qfedu.com ~]# git pull --rebase origin master\n```\n\n## 八、Gitlab Server 部署\n\n### 1、环境配置\n\n关闭防火墙、SELinux\n\n开启邮件服务\n\n```shell\n[root@qfedu.com ~]# systemctl start  postfix\n[root@qfedu.com ~]# systemctl enable postfix\n```\n\n### 2、部署 Gitlab \n\n#### 1、安装 gitlab 依赖包\n\n```shell\ncentos7:\n[root@qfedu.com ~]# yum install -y curl openssh-server openssh-clients postfix cronie policycoreutils-python\n# gitlab-ce 10.x.x以后的版本需要依赖policycoreutils-python\n\ncentos8:\n[root@qfedu.com ~]# yum install -y curl openssh-server openssh-clients postfix cronie  policycoreutils-python-utils\n```\n\n#### 2、添加官方源\n\n```shell\n[root@qfedu.com ~]# curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash\n```\n\n因为官方源太慢，可以使用国内清华yum源，配置如下\n\n```bash\n[root@qfedu.com ~]# vim /etc/yum.repos.d/gitlab-ce.repo\n[gitlab-ce]\nname=Gitlab CE Repository\nbaseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/\ngpgcheck=0\nenabled=1\n```\n\n#### 3、安装 Gitlab\n\n```shell\n[root@qfedu.com ~]# yum -y install gitlab-ce                    # 自动安装最新版\n[root@qfedu.com ~]# yum -y install gitlab-ce-x.x.x\t\t\t\t# 安装指定版本Gitlab\n```\n\n#### 4、配置 Gitlab\n\n##### 1、查看Gitlab版本\n\n```shell\n[root@qfedu.com ~]# head -1 /opt/gitlab/version-manifest.txt\ngitlab-ce 10.1.1\n```\n\n##### 2、Gitlab 配置登录链接\n\n``` shell\n#设置登录链接\n[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\n***\n## GitLab URL\n##! URL on which GitLab will be reachable.\n##! For more details on configuring external_url see:\n##! https://docs.gitlab.com/omnibus/settings/configuration.html#configuring-the-external-url-for-gitlab\n# 没有域名，可以设置为本机IP地址\nexternal_url 'http://172.17.0.61'\n***\n[root@qfedu.com ~]# grep \"^external_url\" /etc/gitlab/gitlab.rb\nexternal_url 'http://172.17.0.61'     #绑定监听的域名或IP\n```\n\n##### 3、初始化 Gitlab\n\n**配置语言环境**\n\ngitlab要求语言环境为英文环境，必须切换，切换方法如下：\n\n```\n注意：可以先尝试以下方案\n\t语言环境问题：如果碰到之后的解决方案如下，需要重新登录\n \t[root@wing ~]# echo \"export LC_ALL=en_US.UTF-8\"  >>  /etc/profile \n\n如果上面的方案不可以，再使用下面的方案： \t\n# yum install langpacks-zh_CN langpacks-en langpacks-en_GB -y\n# cat > /etc/profile.d/locale.sh<<-EOF\n export LANG=en_US.UTF-8\n export LANGUAGE=en_US.UTF-8\n export LC_COLLATE=C\n export LC_CTYPE=en_US.UTF-8\n EOF\n# source /etc/profile.d/locale.sh\n\n退出终端重新登陆\n```\n\n第一次使用配置时间较长\n\n``` shell\n[root@qfedu.com ~]# gitlab-ctl reconfigure   \n.....\n```\n\n##### 4、启动 Gitlab 服务\n\n``` shell\n[root@qfedu.com ~]# gitlab-ctl start\nok: run: gitaly: (pid 22896) 2922s\nok: run: gitlab-monitor: (pid 22914) 2921s\nok: run: gitlab-workhorse: (pid 22882) 2922s\nok: run: logrotate: (pid 22517) 2987s\nok: run: nginx: (pid 22500) 2993s\nok: run: node-exporter: (pid 22584) 2974s\nok: run: postgres-exporter: (pid 22946) 2919s\nok: run: postgresql: (pid 22250) 3047s\nok: run: prometheus: (pid 22931) 2920s\nok: run: redis: (pid 22190) 3053s\nok: run: redis-exporter: (pid 22732) 2962s\nok: run: sidekiq: (pid 22472) 3005s\nok: run: unicorn: (pid 22433) 3011s\n\n[git@qfedu.com ~]# lsof -i:80\nCOMMAND   PID       USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nnginx   22500       root    7u  IPv4  50923      0t0  TCP *:http (LISTEN)\nnginx   22501 gitlab-www    7u  IPv4  50923      0t0  TCP *:http (LISTEN)\n```\n\n##### 5、Gitlab 设置 HTTPS 方式 （缺少配置）\n\n- 如果想要以上的 https 方式正常生效使用，则需要把 letsencrypt 自动生成证书的配置打开，这样在执行重新让配置生效命令 (gitlab-ctl reconfigure) 的时候会自动给域名生成免费的证书并自动在 gitlab 自带的 nginx 中加上相关的跳转配置，都是全自动的，非常方便。\n\n```shell\n[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\nletsencrypt['enable'] = true //如果因为这行报错，改成false即可\nletsencrypt['contact_emails'] = ['276267003@qq.com']     # 添加联系人的电子邮件地址\n```\n\n##### 6、Gitlab 添加smtp邮件功能\n\n``` shell\n[git@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\npostfix 并非必须的；根据具体情况配置，以 SMTP 的为例配置邮件服务器来实现通知；参考配置如下： \n### Email Settings\ngitlab_rails['gitlab_email_enabled'] = true\ngitlab_rails['gitlab_email_from'] = '276267003@qq.com'\ngitlab_rails['gitlab_email_display_name'] = 'gitlab'\ngitlab_rails['gitlab_email_reply_to'] = '276267003@qq.com'\ngitlab_rails['gitlab_email_subject_suffix'] = '[gitlab]'\ngitlab_rails['smtp_enable'] = true\ngitlab_rails['smtp_address'] = \"smtp.qq.com\"\ngitlab_rails['smtp_port'] = 465\ngitlab_rails['smtp_user_name'] = \"276267003@qq.com\"\ngitlab_rails['smtp_password'] = \"kktohrvdryglbjjh\" #这是我的qq邮箱授权码\ngitlab_rails['smtp_domain'] = \"smtp.qq.com\"\ngitlab_rails['smtp_authentication'] = \"login\"\ngitlab_rails['smtp_enable_starttls_auto'] = true\ngitlab_rails['smtp_tls'] = true\n\n#修改配置后需要初始化配置，先关掉服务再重新初始化\n[git@qfedu.com ~]# gitlab-ctl stop\nok: down: gitaly: 0s, normally up\nok: down: gitlab-monitor: 1s, normally up\nok: down: gitlab-workhorse: 0s, normally up\nok: down: logrotate: 1s, normally up\nok: down: nginx: 0s, normally up\nok: down: node-exporter: 1s, normally up\nok: down: postgres-exporter: 0s, normally up\nok: down: postgresql: 0s, normally up\nok: down: prometheus: 0s, normally up\nok: down: redis: 0s, normally up\nok: down: redis-exporter: 1s, normally up\nok: down: sidekiq: 0s, normally up\nok: down: unicorn: 1s, normally up\n\n[git@qfedu.com ~]# gitlab-ctl reconfigure  \n......\n\n[git@qfedu.com ~]# gitlab-ctl start\nok: run: gitaly: (pid 37603) 0s\nok: run: gitlab-monitor: (pid 37613) 0s\nok: run: gitlab-workhorse: (pid 37625) 0s\nok: run: logrotate: (pid 37631) 0s\nok: run: nginx: (pid 37639) 1s\nok: run: node-exporter: (pid 37644) 0s\nok: run: postgres-exporter: (pid 37648) 1s\nok: run: postgresql: (pid 37652) 0s\nok: run: prometheus: (pid 37660) 1s\nok: run: redis: (pid 37668) 0s\nok: run: redis-exporter: (pid 37746) 0s\nok: run: sidekiq: (pid 37750) 1s\nok: run: unicorn: (pid 37757) 0s\n```\n\n##### 7、Gitlab 发送邮件测试\n\n``` shell\n[git@qfedu.com ~]# gitlab-rails console \n[root@wing ~]# gitlab-rails console\n---------------------------------------------------------------------\n GitLab:       12.10.1 (e658772bd63) FOSS\n GitLab Shell: 12.2.0\n PostgreSQL:   11.7\n---------------------------------------------------------------------\nLoading production environment (Rails 6.0.2)\nirb(main):003:0> \nirb(main):004:0> Notify.test_email('276267003@qq.com', 'Message Subject', 'Message Body').deliver_now  //输入测试命令，回车\n\nNotify#test_email: processed outbound mail in 5.2ms\nDelivered mail 5eafceaa250a_1d063fb777add9a08601a@wing.mail (1430.1ms)\nDate: Mon, 04 May 2020 16:13:30 +0800\nFrom: gitlab <276267003@qq.com>\nReply-To: gitlab <276267003@qq.com>\nTo: 276267003@qq.com\nMessage-ID: <5eafceaa250a_1d063fb777add9a08601a@wing.mail>\nSubject: Message Subject\nMime-Version: 1.0\nContent-Type: text/html;\n charset=UTF-8\nContent-Transfer-Encoding: 7bit\nAuto-Submitted: auto-generated\nX-Auto-Response-Suppress: All\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n<html><body><p>Message Body</p></body></html>\n\n=> #<Mail::Message:70056859616080, Multipart: false, Headers: <Date: Mon, 04 May 2020 16:13:30 +0800>, <From: gitlab <276267003@qq.com>>, <Reply-To: gitlab <276267003@qq.com>>, <To: 276267003@qq.com>, <Message-ID: <5eafceaa250a_1d063fb777add9a08601a@wing.mail>>, <Subject: Message Subject>, <Mime-Version: 1.0>, <Content-Type: text/html; charset=UTF-8>, <Content-Transfer-Encoding: 7bit>, <Auto-Submitted: auto-generated>, <X-Auto-Response-Suppress: All>>\nirb(main):005:0> \n```\n\n去qq邮箱web界面查看是否收到邮件\n\n![image-20200504161843613](assets/image-20200504161843613.png)\n\n### 3、Gitlab 的使用\n\n**在浏览器中输入 http://192.168.1.178/ ，然后 change password:  ，并使用root用户登录 即可 (后续动作根据提示操作)**\n\n#### 1、Gitlab 命令行修改密码\n\n```shell\n[root@qfedu.com ~]# gitlab-rails console production\nirb(main):001:0>user = User.where(id: 1).first      # id为1的是超级管理员\nirb(main):002:0>user.password = 'yourpassword'      # 密码必须至少8个字符\nirb(main):003:0>user.save!                          # 如没有问题 返回true\nexit \t\t\t\t\t\t\t\t\t\t\t\t# 退出\n```\n\n#### 2、Gitlab服务管理\n\n```shell\n[root@qfedu.com ~]# gitlab-ctl start                        # 启动所有 gitlab 组件；\n[root@qfedu.com ~]# gitlab-ctl stop                         # 停止所有 gitlab 组件；\n[root@qfedu.com ~]# gitlab-ctl restart                      # 重启所有 gitlab 组件；\n[root@qfedu.com ~]# gitlab-ctl status                       # 查看服务状态；\n[root@qfedu.com ~]# gitlab-ctl reconfigure                  # 初始化服务；\n[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb               # 修改默认的配置文件；\n[root@qfedu.com ~]# gitlab-ctl tail                         # 查看日志；\n```\n\n#### 3、登陆 Gitlab\n\n![1](./assets/1.png)\n\n**如果需要手工修改nginx的port ，可以在gitlab.rb中设置 nginx['listen_port'] = 8000 ，然后再次 gitlab-ctl reconfigure即可**\n\n**登录 gitlab 如下所示(首次登陆设置 root 密码)：**\n![1](./assets/2.1.png)\n\n#### 4、创建项目组 group \n\n组名为plat-sp ,\n![1](./assets/2.2.png)\n\n![1](./assets/3.png)\n\n#### 5、去掉用户的自动注册功能（安全）\n\nadmin are -> settings -> Sign-up Restrictions 去掉钩钩，然后拉到最下面保存，重新登录\n![1](./assets/4.png)\n\n## 九、Gitlab 开发代码提交处理流程\n\n###   1、公司代码提交合并流程\n\n-   PM（项目主管/项目经理）在gitlab创建任务，分配给开发人员\n\n-   开发人员领取任务后，在本地使用git clone拉取代码库\n\n-   开发人员创建开发分支（git checkout -b dev），并进行开发\n\n-   开发人员完成之后，提交到本地仓库（git commit ）\n\n-   开发人员在gitlab界面上申请分支合并请求（Merge request）\n\n-   PM在gitlab上查看提交和代码修改情况，确认无误后，确认将开发人员的分支合并到主分支（master）\n\n-   开发人员在gitlab上Mark done确认开发完成，并关闭issue。这一步在提交合并请求时可以通过描述中填写\"close #1\"等字样，可以直接关闭issue\n\n### 2、创建项目管理用户 Tompson\n\n![1](./assets/5.png)\n同样的方法，再创建 Eric 、Hellen 用户。用户添加完毕后，gitlab 会给用户发一封修改密码的邮件，各用户需要登录自己的邮箱，并点击相关的链接，设置新密码。\n\n### 3、将 Tompson 用户添加到组中，指定T为本组的 owner\n\n![1](./assets/6.png)\n\n### 4、同样的方法将用户Eric、Hellen 添加到组中，并指定为Developer\n\n![1](./assets/7.png)\n\n### 5、使用 Tompson 用户的身份与密码登录到 gitlab 界面中，并创建项目 Project\n\n![1](./assets/10.png)\n\n### 6、指定项目的存储路径和项目名称\n\n![1](./assets/11.png)\n\n把客户端的公钥添加到这里之后才会出现下图的内容\n\n![1](./assets/12.png)\n\n### 7、为项目创建 Dev分支\n\n注意：因为版本的原因，需要先在项目里面添加一个文件，才能显示下图中创建分支的操作\n\n![1](./assets/13.png)\n\n![1](./assets/14.png)\n\n### 8、在 client 上添加 Tompson 的用户\n\n``` shell\n[git@qfedu.com ~]# useradd Tompson\n[git@qfedu.com ~]# useradd Hellen\n[git@qfedu.com ~]# useradd Eric\n[git@qfedu.com ~]# useradd test\n[git@qfedu.com ~]# su - Tompson\n[Tompson@qfedu.com ~]$ ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/Tompson/.ssh/id_rsa): \nCreated directory '/home/Tompson/.ssh'.\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /home/Tompson/.ssh/id_rsa.\nYour public key has been saved in /home/Tompson/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:SAoAH2zSxqEJqVgKKrxM5XMi6tKe61JMRdwMhwBNIrE Tompson@domain.cn\nThe key's randomart image is:\n+---[RSA 2048]----+\n|XX==o=.          |\n|*BOo+.o          |\n|E*=.  .          |\n|*+.= + .         |\n|=oo = . S        |\n|.oo              |\n|.o               |\n|o...             |\n|.+=.             |\n+----[SHA256]-----+\n[Tompson@qfedu.com ~]$ cat .ssh/id_rsa.pub \nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDZ8cRGHej+sZzlmK36W5MUXMLOGdTwFI9Jj44mGuabZCrlYW4GDpL6ppezN+Sur0wHtnKonYJzm8ntqS0S0UHyaPPQPl9Mrs/6Z4VrXZ/4RlqHdWeSrmOwCBQld0l8HvrmP4TyGHrOreO8uZqimd/Z+OiMqnYRZzENX11Pti/Px5g1MtJcoCi9uLtF42QYrt1X/fzAyPU9C5/5ZUq4Jln3EF20bzcA52oAzZIl0jrhI0TeTeW6zYq+KxdHGshL+qG7+Ne+akPOe4Ma5BQjcMZ2dQ2kbGuozXmLT8RDcj9YRKceQsUdTI71lJpwrWKGn8Vhra0EaK3hgoTuvMYaGfOF Tompson@domain.cn\n```\n\n### 9、将 Tompson 的公钥复制到 gitlab 中\n\n使用 Tompson 用户的身份与密码登录到 gitlab界面中，然后在 ssh-key 中添加相关的key \n![1](./assets/8.png)\n\n![1](./assets/9.png)\n\n### 10、为 Tompson 用户配置 git \n\n``` shell\n[Tompson@qfedu.com ~]$ git config --global user.email \"222@qq.com\"\n[Tompson@qfedu.com ~]$ git config --global user.name \"tom\"\n\n[Tompson@qfedu.com ~]$ git clone git@192.168.60.119:plat-sp/chathall.git\nCloning into 'chathall'...\nThe authenticity of host '192.168.60.119 (192.168.60.119)' can't be established.\nECDSA key fingerprint is SHA256:CDxAQmj6gUkIxB6XUofbZ853GuPM5LS2QO4a5dD7jRo.\nECDSA key fingerprint is MD5:4e:20:72:a7:46:c6:d7:5d:bb:9d:ce:c3:f3:da:43:f9.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '192.168.60.119' (ECDSA) to the list of known hosts.\nremote: Counting objects: 3, done.\nremote: Total 3 (delta 0), reused 0 (delta 0)\nReceiving objects: 100% (3/3), done.\n[Tompson@qfedu.com ~]$ \n[Tompson@qfedu.com ~]$ cd chathall/\n[Tompson@qfedu.com chathall]$ ls\nReadme.txt\n[Tompson@qfedu.com chathall]$\n```\n\n### 11、创建新文件，添加内容，并提交到 master 分支\n\n``` shell\n[Tompson@qfedu.com chathall]$ vim test.sh\n[Tompson@qfedu.com chathall]$ cat test.sh \n#!/bin/bash\necho \"gitlab test\"\n[Tompson@qfedu.com chathall]$ git add . \n[Tompson@qfedu.com chathall]$ git commit -m '201805101649'\n[master 80edf6b] 201805101649\n 1 file changed, 2 insertions(+)\n create mode 100644 test.sh\n[Tompson@qfedu.com chathall]$ \n[Tompson@qfedu.com chathall]$ git push -u origin master \nCounting objects: 4, done.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 305 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo git@192.168.60.119:plat-sp/chathall.git\n   4611654..80edf6b  master -> master\nBranch master set up to track remote branch master from origin.\n[Tompson@qfedu.com chathall]$ \n```\n\n### 12、使用 Eric 用户登录，并 clone 项目\n\n``` shell\n[git@qfedu.com ~]# su - Eric\n[Eric@qfedu.com ~]$ ssh-keygen -C Eric@domain.cn\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/Eric/.ssh/id_rsa): \nCreated directory '/home/Eric/.ssh'.\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /home/Eric/.ssh/id_rsa.\nYour public key has been saved in /home/Eric/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:VZaJvjA5SJZEB+yuRpDBNHCECCZ5R8X0DYcNE0f1B6E Eric@domain.cn\nThe key's randomart image is:\n+---[RSA 2048]----+\n|*O=..B*o**+o+oo. |\n|*.+.. *o.*oooo . |\n| . + + ..oo E . .|\n|  o   o =..    . |\n|   . .  S+ .     |\n|    . .   .      |\n|   . .           |\n|    o            |\n|   .             |\n+----[SHA256]-----+\n\n[Eric@qfedu.com ~]$ cat .ssh/id_rsa.pub \nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDxQcn4UjRW/5PT5witeV9+S2w8WK5ouawHxEF7s9wuWsT4pqhcu5BN74NG3CPaq1jJZnkV+aQsTw+60BAd1gOK0FBbKWxmohmE61n9vfpUT5igJ72t2jpXjfKwLIHw+Iq5yM4yUhkwSsoBuZkxYSEltnj8OvXaOlCDYnXuGBa9+xO8f5yVIcOtiwRvv+Y1PRRzSIcazPVZax9FLK26t1R4NPiY4xWkIJyK2OrKMeiaBBzyMfWzHdmsCWa51oSrYSmz3PDBXpzIBs3OdKxcaJs9Lc5u87YCV5RMUjLrPcA7nPK6crOabLXhz3d5GSYggMTOByQkyKOo7WlYpARCHOt/ Eric@domain.cn\n[Eric@qfedu.com ~]$ \n```\n\n### 13、同样需要使用Eric用户登录gitlab web 界面，并添加相应的ssh-key。然后设置git ，并clone项目\n\n``` shell\n[Eric@qfedu.com ~]$ git config --global user.email \"Eric@domain.cn\"\n[Eric@qfedu.com ~]$ git config --global user.name \"Eric\"\n[Eric@qfedu.com ~]$ git clone git@192.168.60.119:plat-sp/chathall.git\nCloning into 'chathall'...\nThe authenticity of host '192.168.60.119 (192.168.60.119)' can't be established.\nECDSA key fingerprint is SHA256:CDxAQmj6gUkIxB6XUofbZ853GuPM5LS2QO4a5dD7jRo.\nECDSA key fingerprint is MD5:4e:20:72:a7:46:c6:d7:5d:bb:9d:ce:c3:f3:da:43:f9.\nAre you sure you want to continue connecting (yes/no)? yes\nremote: Counting objects: 6, done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 6 (delta 0), reused 0 (delta 0)\nReceiving objects: 100% (6/6), done.\n[Eric@qfedu.com ~]$ \n```\n\n### 14、切换到dev分支，修改文件内容，并将新 code 提交到 dev分支 (Developer角色默认并没有提交master的权限)\n\n``` shell\n[Eric@qfedu.com chathall]$ git checkout dev \nBranch dev set up to track remote branch dev from origin.\nSwitched to a new branch 'dev'\n[Eric@qfedu.com chathall]$ ls\nReadme.txt  test.sh\n[Eric@qfedu.com chathall]$ vim eric.sh \n[Eric@qfedu.com chathall]$ cat eric.sh\n#!/bin/bash\necho \"brahch test\"\n[Eric@qfedu.com chathall]$ git add . \n[Eric@qfedu.com chathall]$ git commit -m '201805101658'\n[dev 6687039] 201805101658\n 1 file changed, 1 insertion(+)\n[Eric@qfedu.com chathall]$ git push -u origin dev \nCounting objects: 5, done.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 306 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nremote: \nremote: To create a merge request for dev, visit:\nremote:   http://192.168.60.119/plat-sp/chathall/merge_requests/new?merge_request%5Bsource_branch%5D=dev\nremote: \nTo git@192.168.60.119:plat-sp/chathall.git\n   80edf6b..6687039  dev -> dev\nBranch dev set up to track remote branch dev from origin.\n[Eric@qfedu.com chathall]$\n[Eric@qfedu.com chathall]$ git checkout master \nSwitched to branch 'master'\n[Eric@qfedu.com chathall]$ git branch \n  dev\n* master\n[Eric@qfedu.com chathall]$\n```\n\n### 15、使用Eric 用户登录gitlab web，在界面中 创建一个合并请求\n\n![1](./assets/15.png)\n\n**提交合并请求：**\n![1](./assets/16.png)\n\n### 16、使用Tompson用户登录 gitlab web ，找到“合并请求” ，然后将dev分支合并到master分支\n\n![1](./assets/17.png)\n\n![1](./assets/18.png)\n\n## 十、Gitlab 备份与恢复\n\n### 1、查看系统版本和软件版本\n\n```shell\n[root@qfedu.com gitlab]# cat /etc/redhat-release \nCentOS Linux release 7.3.1611 (Core) \n\n[root@qfedu.com gitlab]# cat /opt/gitlab/embedded/service/gitlab-rails/VERSION\n8.15.4\n```\n\n### 2、数据备份\n\n#### 1、查看备份相关的配置项\n\n```shell\n[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\ngitlab_rails['manage_backup_path'] = true\ngitlab_rails['backup_path'] = \"/data/gitlab/backups\"\n```\n\n该项定义了默认备份出文件的路径，可以通过修改该配置，并执行 **gitlab-ctl reconfigure 或者 gitlab-ctl  restart** 重启服务生效。\n\n#### 2、执行备份命令进行备份\n\n```shell\n[root@qfedu.com ~]# /opt/gitlab/bin/gitlab-rake gitlab:backup:create \n```\n\n#### 3、添加到 crontab 中定时执行\n\n```shell\n[root@qfedu.com ~]# crontab -e\n0 2 * * * bash /opt/gitlab/bin/gitlab-rake gitlab:backup:create\n```\n\n可以到/data/gitlab/backups找到备份包，解压查看，会发现备份的还是比较全面的，数据库、repositories、build、upload等分类还是比较清晰的。\n\n#### 4、设置备份保留时长\n\n防止每天执行备份，有目录被爆满的风险，打开/etc/gitlab/gitlab.rb配置文件，找到如下配置：\n\n```shell\n[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\ngitlab_rails['backup_keep_time'] = 604800\n```\n\n设置备份保留7天（7*3600*24=604800），秒为单位，如果想增大或减小，可以直接在该处配置，并通过gitlab-ctl restart 重启服务生效。\n\n备份完成，会在备份目录中生成一个当天日期的tar包。\n\n### 3、数据恢复\n\n#### 1、安装部署 gitlab server\n\n 具体步骤参见上面：gitlab server 搭建过程\n\n#### 2、恢复 gitlab\n\n##### 1、查看备份相关的配置项\n\n```shell\n[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\ngitlab_rails['backup_path'] = \"/data/gitlab/backups\"\n```\n\n修改该配置，定义了默认备份出文件的路径，并执行 **gitlab-ctl reconfigure 或者 gitlab-ctl  restart** 重启服务生效。\n\n##### 2、恢复前需要先停掉数据连接服务\n\n```shell\n[root@qfedu.com ~]# gitlab-ctl stop unicorn\n[root@qfedu.com ~]# gitlab-ctl stop sidekiq\n```\n\n- 如果是台新搭建的主机，不需要操作，理论上不停这两个服务也可以。停这两个服务是为了保证数据一致性。\n\n##### 3、同步备份文件到新服务器\n\n将老服务器/data/gitlab/backups目录下的备份文件拷贝到新服务器上的/data/gitlab/backups\n\n```shell\n[root@qfedu.com gitlab]# rsync -avz 1530773117_2019_03_05_gitlab_backup.tar 192.168.95.135:/data/gitlab/backups/ \n```\n\n- 注意权限：600权限是无权恢复的。 实验环境可改成了777，生产环境建议修改属主属组\n\n\n```shell\n[root@qfedu.com backups]# pwd\n/data/gitlab/backups\n[root@qfedu.com backups]# chown -R git.git 1530773117_2019_03_05_gitlab_backup.tar \n[root@qfedu.com backups]# ll\ntotal 17328900\n-rwxrwxrwx 1 git git 17744793600 Jul  5 14:47 1530773117_2018_07_05_gitlab_backup.tar\n```\n\n##### 4、执行命令进行恢复\n\n后面再输入两次 yes 就完成恢复了。\n\n```shell\n[root@qfedu.com ~]# gitlab-rake gitlab:backup:restore BACKUP=1530773117_2018_07_05_gitlab_backup.tar\n注意：backups 目录下保留一个备份文件可直接执行\n```\n\n##### 5、恢复完成启动服务\n\n恢复完成后，启动刚刚的两个服务，或者重启所有服务，再打开浏览器进行访问，发现数据和之前的一致：\n\n```shell\n[root@qfedu.com ~]# gitlab-ctl start unicorn\n[root@qfedu.com ~]# gitlab-ctl start sidekiq\n或\n[root@qfedu.com ~]# gitlab-ctl restart\n```\n\n**注意：通过备份文件恢复gitlab必须保证两台主机的gitlab版本一致，否则会提示版本不匹配**\n\n## 十一、利用Gitlab管理k8s集群\n\n### 1、权限设置\n\n![image-20200821174547237](assets/image-20200821174547237.png)\n\n### 2、获取k8s集群API地址\n\n```yaml\n[root@master ~]# kubectl cluster-info | grep 'Kubernetes master' | awk '/http/ {print $NF}'\nhttps://192.168.19.200:6443\n```\n\n### 3、获取k8s集群默认CA证书\n\n```\n[root@master ~]# kubectl get secrets\nNAME                  TYPE                                  DATA   AGE\ndefault-token-cvfqx   kubernetes.io/service-account-token   3      3d21h\n```\n\ndefault-token-cvfqx 为上面获取到的secrets的名称，用以下命令查看证书\n\n```\n[root@master ~]# kubectl get secret default-token-cvfqx  -o jsonpath=\"{['data']['ca\\.crt']}\" | base64 --decode\n-----BEGIN CERTIFICATE-----\nMIICyDCCAbCgAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl\ncm5ldGVzMB4XDTIwMDgxNzA5MjAwMFoXDTMwMDgxNTA5MjAwMFowFTETMBEGA1UE\nAxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANIM\niOGHeolaxkE+kqZtc8kDbGFhwqGxNxg4orbIjrz//Z6vrgqo2COn2NjKrVM11bmz\nVhHPCruc3snfTLIS+/Z6gZqgpw5ruX8OjfH4nhr9npKxdBon3soa10EovPwMz1KW\nlaqbuLKTbtTm+oCtAKYXUlzqrFGR//GW2D3bjl1QGOPbAR0pggdxSpPo6oUgtEQJ\nQAsNOJ40qMjevi3fnrNDrMqmcNKlSlkw8+Gf4TqM1EfAERRHiEcb/W3hOGWV0gdm\nvaq7CE/ENeD1O11NE76BMmk5WO0u6ot4OmP35TTlx8K0N/WPyq76RlH7somiIb8S\n1NpAzg+9K0vv1QmILScCAwEAAaMjMCEwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB\n/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAEVgIlTFDoFhb3KA0RMVjckgsP3O\nOB7vTEws6w9ZDGJsNlbbCa15f8q3VmERSkfjAhfG4I9gb4KI0CM5Xt3JhU76GWsO\nZXHDfK7AzDGpLPUxlygkK7c7XCES/GEJe5agBxQyCo2pAvcj/nb+JIBeSh8JcG05\npzPhL11it9hDqmS5k92+63xGs/SDEzXEbBVMnyZWiv+AOHlO1/IFofUD3VHcSRMY\nwH5j6Irc0p0XTnFg+GHBpqjxwMWxP6IxdVrsOWUALM5oOJYn4aJQy5kSpJFkwNW8\nxDvVgtOWq5P9fVfnE4Am0LI/DevzYtcr3O9hUmCfEOnF0hC0n4ghYOPqiB4=\n-----END CERTIFICATE-----\n```\n\n### 4、设置rbac\n\n```\n[root@master ~]# vim gitlab-admin-service-account.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: gitlab-admin\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: gitlab-admin\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: gitlab-admin\n  namespace: kube-system\n\n[root@master ~]# kubectl apply -f gitlab-admin-service-account.yaml\nserviceaccount/gitlab-admin created\nclusterrolebinding.rbac.authorization.k8s.io/gitlab-admin created\n```\n\n### 5、获取gitlab-admin的token\n\n```yaml\n[root@master ~]# kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep gitlab-admin | awk '{print $1}')\nName:         gitlab-admin-token-pmb2h\nNamespace:    kube-system\nLabels:       <none>\nAnnotations:  kubernetes.io/service-account.name: gitlab-admin\n              kubernetes.io/service-account.uid: bc9e1f94-088d-41f4-8e18-f31f1e9a9369\n\nType:  kubernetes.io/service-account-token\n\nData\n====\nca.crt:     1025 bytes\nnamespace:  11 bytes\ntoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6InluNWZyY3V5T1BjNmFFQlpmRVBmOGFOenRmVkx1U0dCRDFhT0s5dEtGeXMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJnaXRsYWItYWRtaW4tdG9rZW4tcG1iMmgiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZ2l0bGFiLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYmM5ZTFmOTQtMDg4ZC00MWY0LThlMTgtZjMxZjFlOWE5MzY5Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmdpdGxhYi1hZG1pbiJ9.HGNf2_q_NS7ASk2ID6Y658PMpDIruFLr70VGk9I_dAP-rYt81FarjQhIQPn554SrtmiTp-iQ_j7slX_YRsGHlpo74VrBM2SirDToXobuSpe77v6MFx6Ol2UsUrxY0ulm_DAjOhZ16jlohPWlhkP0083KBfywwdpyF2oVdALQnT4sI1aDxgUHs-Pmg6D0NbdN0Ipb--s-Z59QKGr1XH4Pp0Qb9kze6KCJSWOk8-4pwtpQcT7K2MA1ucyEJB283D5ChQSddo9q7pBkEwq94TLy-ZbAhHgO89OqVIjY-3H-rb5Kd3meGrtGJZJscx7xnn6_DEvbBwp8DmCoM4vfFLUUow\n```\n\n6、添加k8s集群\n\n![image-20200821180353378](assets/image-20200821180353378.png)","source":"_posts/分布式版本控制系统.md","raw":"---\ntitle: 分布式版本控制系统\ncategories: CICD自动构建\ntags:\n  - Git\n  - Github\n  - Gitlab\n  - SVN \n---\n\n\n# 第1天-分布式版本控制系统\n\n## 一、Git、Github、Gitlab 的区别\n\nGit是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\n\n是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。\n\nGithub是在线的基于Git的代码托管服务。 GitHub是2008年由Ruby on Rails编写而成。GitHub同时提供付费账户和免费账户。这两种账户都可以创建公开的代码仓库，只有付费账户可以创建私有的代码仓库。 Gitlab解决了这个问题, 可以在上面创建免费的私人repo。 \n\ngit            是一套软件 可以做本地私有仓库\n\ngithub   本身是一个代码托管网站   公有和私有仓库(收费)   不能做本地私有仓库\n\ngitlab     本身也是一个代码托管的网站 功能上和github没有区别   公有和私有仓库（免费）  可以部署本地私有仓库\n\n## 二、Git 与 SVN 区别\n\nGIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。\n\n如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。\n\n**Git 与 SVN 区别**\n\n1. Git是分布式的，svn不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。\n2. GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。\n3. GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。\n4. GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。\n5. GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。\n\ngit   是分布式的版本控制器  没有客户端和服务器端的概念\n\nsvn 它是C/S结构的版本控制器  有客户端和服务器端  服务器如果宕机而且代码没有备份的情况下  完整代码就会丢失\n\n## 三、部署Git 服务\n\n**创建git仓库**\n\ngit-server上的操作：\n\n```\n[root@qfedu.com ~]# yum install git git-core gitweb -y\n[root@qfedu.com ~]# useradd git\n[root@qfedu.com ~]# passwd git\n[root@qfedu.com ~]# mkdir /git-root/\n[root@qfedu.com ~]# cd /git-root/\n[root@qfedu.com git-root]# git init --bare shell.git\nInitialized empty Git repository in /git-root/shell.git/\n注意：\ngit init 和 git init --bare 的区别:\n使用--bare选项时,不再生成.git目录,而是只生成.git目录下面的版本历史记录文件,这些版本历史记录文件也不再存放在.git目录下面,而是直接存放在版本库的根目录下面.\n用\"git init\"初始化的版本库用户也可以在该目录下执行所有git方面的操作。但别的用户在将更新push上来的时候容易出现冲突。\n使用”git init --bare”方法创建一个所谓的裸仓库，之所以叫裸仓库是因为这个仓库只保存git历史提交的版本信息，而不允许用户在上面进行各种git操作，如果你硬要操作的话，只会得到下面的错误（”This operation must be run in a work tree”）这个就是最好把远端仓库初始化成bare仓库的原因\n\n[root@qfedu.com git-root]# chown -R git:git shell.git\n```\n\n**git仓库测试**\n\ngit-client上的操作：\n\n```shell\n[root@qfedu.com ~]# ssh-keygen\n[root@qfedu.com ~]# ssh-copy-id git@192.168.1.178\n\n[root@qfedu.com shell]# git config --global user.email \"you@example.com\"\n[root@qfedu.com shell]# git config --global user.name \"Your Name\"\n\n[root@qfedu.com ~]# git clone git@192.168.1.178:/git-root/shell.git\n[root@qfedu.com ~]# ls\nrh  shell\n[root@qfedu.com ~]# cd shell/\n[root@qfedu.com shell]# vim test.sh\n[root@qfedu.com shell]# git add test.sh\n\n[root@qfedu.com shell]# git commit -m 'first commit'\n[master (root-commit) 33c5fbf] first commit\n 1 file changed, 2 insertions(+)\n create mode 100644 test1.sh\n[root@qfedu.com shell]# git push origin master\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 230 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo git@192.168.1.178:/git-root/shell.git\n * [new branch]      master -> master\n```\n\n## 四、Git工作流程\n\n一般工作流程如下：\n\n- 克隆 Git 资源作为工作目录。\n- 在克隆的资源上添加或修改文件。 \n- 如果其他人修改了，你可以更新资源。\n- 在提交前查看修改。\n- 提交修改。\n- 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。\n\n 　　Git 的工作流程示意图：\n\n![img](assets/805129-20160710102658467-1520443599.png)\n\n## 五、Git基本概念\n\n- **工作区：**就是你在电脑里能看到的目录。\n- **暂存区：**英文叫stage, 或index。一般存放在\"git目录\"下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。\n- **版本库：**工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。\n\n　　工作区、版本库中的暂存区和版本库之间的关系的示意图：\n\n![img](assets/805129-20160710103123608-1172715931.jpg)\n\n- 　　图中左侧为工作区，右侧为版本库。在版本库中标记为 \"index\" 的区域是暂存区（stage, index），标记为 \"master\" 的是 master 分支所代表的目录树。 \n\n\n- 　　图中我们可以看出此时 \"HEAD\" 实际是指向 master 分支的一个\"游标\"。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。 \n\n\n- 　　图中的 objects 标识的区域为 Git 的对象库，实际位于 \".git/objects\" 目录下，里面包含了创建的各种对象及内容。 \n\n\n- 　　当对工作区修改（或新增）的文件执行 \"git add\" 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。 \n\n\n- 　　当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。 \n\n\n- 　　当执行 \"git reset HEAD\" 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。 \n\n\n- 　　当执行 \"git rm --cached <file>\" 命令时，会直接从暂存区删除文件，工作区则不做出改变。 \n\n\n- 　　当执行 \"git checkout .\" 或者 \"git checkout -- <file>\" 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。 \n\n\n- 　　当执行 \"git checkout HEAD .\" 或者 \"git checkout HEAD <file>\" 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。\n\n\n## 六、Git 客户端安装使用\n\n### 1、 Git 安装配置\n\n```shell\n[root@qfedu.com ~]# yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n[root@qfedu.com ~]# yum -y install git git-all git-core\n[root@qfedu.com ~]# git --version\ngit version 2.18.4\n```\n\n------\n\n### 2、Git 配置\n\nGit 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。\n\n这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：\n\n- `/etc/gitconfig` 文件：系统中对所有用户都普遍适用的配置。若使用 `git config` 时用 `--system` 选项，读写的就是这个文件。\n- `~/.gitconfig` 文件：用户目录下的配置文件只适用于该用户。若使用 `git config` 时用 `--global` 选项，读写的就是这个文件。\n- 当前项目的 Git 目录中的配置文件（也就是工作目录中的 `.git/config` 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 `.git/config` 里的配置会覆盖 `/etc/gitconfig` 中的同名变量。\n\n#### 1、Git 用户信息\n\n配置个人的用户名称和电子邮件地址：\n\n```shell\n[root@qfedu.com ~]# git config --global user.name \"qfedu\"\n[root@qfedu.com ~]# git config --global user.email test@qq.com\n```\n\n如果用了 **--global** 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。\n\n如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 --global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。\n\n#### 2、文本编辑器\n\n设置Git默认使用的文本编辑器, 一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置\n\n```shell\n[root@qfedu.com ~]# git config --global core.editor emacs\n```\n\n#### 3、差异分析工具\n\n还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：\n\n```shell\n[root@qfedu.com ~]# git config --global merge.tool vimdiff\n```\n\nGit 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。\n\n当然，你也可以指定使用自己开发的工具\n\n#### 4、查看配置信息\n\n要检查已有的配置信息，可以使用 git config --list 命令：\n\n```shell\n[root@qfedu.com ~]# git config --list\nhttp.postbuffer=2M\nuser.name=runoob\nuser.email=test@runoob.com\n```\n\n有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。\n\n这些配置我们也可以在 **~/.gitconfig** 或 **/etc/gitconfig** 看到，如下所示：\n\n```shell\n[root@qfedu.com ~]# vim ~/.gitconfig \n```\n\n显示内容如下所示：\n\n```shell\n[http]\n    postBuffer = 2M\n[user]\n    name = git\n    email = test@qfedu.com.com\n```\n\n也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：\n\n```shell\n[root@qfedu.com ~]# git config user.name\ngit\n```\n\n### 3、Git 使用\n\n#### 1、ssh 链接\n\n客户机上产生公钥上传到gitlab的SSH-Keys里，git clone下载和git push上传都没问题，这种方式很安全\n\n#### 2、http 链接（两种方式实现）\n\n##### 1、修改代码里的 .git/config 文件添加登录用户名密码\n\n```shell\n[root@qfedu.com ~]# cd .git\n[root@qfedu.com ~]# cat config\n[core]\nrepositoryformatversion = 0\nfilemode = true\nbare = false\nlogallrefupdates = true\n[remote \"origin\"]\nfetch = +refs/heads/*:refs/remotes/origin/*\nurl = http://username:password@qfedu.com@172.17.0.39:sauser/ansible.git\n[branch \"master\"]\nremote = origin\nmerge = refs/heads/master\n```\n\n##### 2、 执行命令设置登录用户和密码\n\n```shell\n# cd到根目录，执行\n[root@qfedu.com ~]# git config --global credential.helper store  # 执行之后会在.gitconfig文件中多添加以下选项\n  [credential]         \n  \t\thelper = store\n# cd到项目目录，执行git pull命令，会提示输入账号密码。输完这一次以后就不再需要，并且会在根目录生成一个.git-credentials文件\n[root@qfedu.com ~]# git pull \n  Username for 'http://172.17.0.39:sauser/ansible.git': \n  xxxx@xxxx.com Password for 'https://xxxx@xxxx.com@172.17.0.39:sauser/ansible.git':\n[root@qfedu.com ~]# cat .git-credentials\n  https://Username:Password@qfedu.com.oschina.net\n# 之后pull/push代码都不再需要输入账号密码了\n```\n\n#### 3、设置身份验证\n\n**注意：**设定本机用户名，绑定邮箱，让远程服务器知道机器的身份\n\n```shell\n[root@qfedu.com ~]# git config --global user.name \"user_name\" \n[root@qfedu.com ~]# git config --global user.email \"XXXXX@XX.com\"\n```\n\n#### 4、本地项目与远程服务器项目之间的交互\n\n1、如果你没有最新的代码，希望从头开始\n\n```shell\n[root@qfedu.com ~]# git clone git@XXX.git      # 这里是项目的地址（可从项目主页复制），将远程服务器的内容完全复制过来 \n[root@qfedu.com ~]# cd BGBInspector_V01        # clone 之后进入该项目的文件夹 \n[root@qfedu.com ~]# touch　README.md           # 新建readme文件 \n[root@qfedu.com ~]# git add README.md          # 将新的文件添加到git的暂存区 \n[root@qfedu.com ~]# git commit -m ‘Its note：add a readme file’ # 将暂存区的文件提交到某一个版本保存下来，并加上注释 \n[root@qfedu.com ~]# git push -u origin master  # 将本地的更改提交到远程服务器\n```\n\n2、如果你已经有一个新版代码，希望直接把本地的代码替换到远程服务器\n\n```shell\n[root@qfedu.com ~]# cd existing_folder          #进入代码存在的文件夹，或者直接在该文件夹打开\n[root@qfedu.com ~]# git init           # 初始化 \n[root@qfedu.com ~]# git remote add origin git@master:/git-test/shell.git  #添加远程项目\"shell\"库的地址（可从项目主页复制） ,前提是事先需要先在git远程服务器上创建相应的裸库\"shell\"\n[root@qfedu.com ~]# git add .                   #添加该文件夹中所有的文件到git的暂存区 \n[root@qfedu.com ~]# git commit -m ‘note’        #提交所有代码到本机的版本库 \n[root@qfedu.com ~]# git push -u origin master   #将本地的更改提交到远程服务器\n```\n\n- git 中 clone过来的时候，git 不会对比本地和服务器的文件，也就不会有冲突，\n\n- 建议确定完全覆盖本地的时候用 clone，不确定会不会有冲突的时候用 git pull，将远程服务器的代码download下来\n\n- git pull=git fetch+git merge\n\n    实验如下：\n\n    ```\n    本地代码内容如下：\n    [root@node1 shell]# cat mem.sh \n    free -m | awk 'NR==2{print $4}'\n    echo hello\n    echo ni hao\n    \n    远程Git服务器代码内容如下：\n    [root@node1 shell]# cat mem.sh \n    free -m | awk 'NR==2{print $4}'\n    echo hello\n    echo ni hao\n    echo ha ha\n    \n    本地机器做fetch操作：\n    [root@node1 shell]# git fetch origin master:test\n    remote: Enumerating objects: 5, done.\n    remote: Counting objects: 100% (5/5), done.\n    remote: Compressing objects: 100% (2/2), done.\n    remote: Total 3 (delta 0), reused 0 (delta 0)\n    Unpacking objects: 100% (3/3), done.\n    From master:/git-test/shell\n     * [new branch]      master     -> test\n       b522245..10f9569  master     -> origin/master\n    \n    fetch是把远程代码作为本地的一个其他分支下载到本地，并不更新本地分支，这里的命令是把远程的”master“分支下载到本地作为一个新的分支”test“存在\n    \n    查看本地文件并没有发生变化\n    [root@node1 shell]# ls  \n    mem.sh\n    [root@node1 shell]# cat mem.sh \n    free -m | awk 'NR==2{print $4}'\n    echo hello\n    echo ni hao\n    \n    用diff查看本地master分支和fetch下来的test分支有什么区别：\n    [root@node1 shell]# git diff master test\n    diff --git a/mem.sh b/mem.sh\n    index 7ce0803..c0c8cef 100644\n    --- a/mem.sh\n    +++ b/mem.sh\n    @@ -1,3 +1,4 @@\n     free -m | awk 'NR==2{print $4}'\n     echo hello\n     echo ni hao\n    +echo ha ha\n    \n    如果发现fetch下来的代码没什么问题，可以选择和本地分支进行合并\n    [root@node1 shell]# git merge \n    Updating eb8645c..10f9569\n    Fast-forward\n     mem.sh | 1 +\n     1 file changed, 1 insertion(+)\n    [root@node1 shell]# cat mem.sh \n    free -m | awk 'NR==2{print $4}'\n    echo hello\n    echo ni hao\n    echo ha ha\n    \n    ```\n\n    \n\n#### 5、常用的git 命令 \n\n![img](assets/011500266295799.jpg)\n\n```shell\n[root@qfedu.com ~]# git init                      # 初始化 \n[root@qfedu.com ~]# git add main.cpp              # 将某一个文件添加到暂存区 \n[root@qfedu.com ~]# git add .                     # 将文件夹下的所有的文件添加到暂存区 \n[root@qfedu.com ~]# git commit -m ‘note‘          # 将暂存区中的文件保存成为某一个版本 \n[root@qfedu.com ~]# git log                       # 查看所有的版本日志 \n[root@qfedu.com ~]# git status                    # 查看现在暂存区的状况 \n[root@qfedu.com ~]# git diff                      # 查看现在文件与上一个提交-commit版本的区别 \n[root@qfedu.com ~]# git reset --hard HEAD^        # 回到上一个版本 \n[root@qfedu.com ~]# git reset --hard XXXXX        # XXX为版本编号，回到某一个版本 \n[root@qfedu.com ~]# git pull origin master        # 从主分支pull到本地 \n[root@qfedu.com ~]# git push -u origin master     # 从本地push到主分支 \n[root@qfedu.com ~]# git pull                      # pull默认主分支 \n[root@qfedu.com ~]# git push                      # push默认主分支 ...\n```\n\n#### 6、版本穿梭\n\n##### 1、版本回退\n\n```shell\n# 用 git log 命令查看：\n# 每一个提交的版本都唯一对应一个 commit 版本号，\n# 使用 git reset 命令退到上一个版本：\n[root@qfedu.com ~]# git reset --hard HEAD^\n```\n\n```shell\n[root@qfedu.com ~]# git reflog                    # 查看命令历史，以便确定要回到哪个版本\n[root@qfedu.com ~]# git reset --hard commit_id    # 比如git reset --hard 3628164（不用全部输入，输入前几位即可）\n```\n\n##### 2、分支管理\n\n1、创建分支    \n\n```shell\n[root@qfedu.com ~]# git checkout -b dev     #创建dev分支，然后切换到dev分支\n[root@qfedu.com ~]# git checkout            #命令加上-b参数表示创建并切换，相当于以下两条命令：\n[root@qfedu.com ~]# git branch dev git checkout dev\n[root@qfedu.com ~]# git branch              #命令查看当前分支,\n[root@qfedu.com ~]# git branch              #命令会列出所有分支，当前分支前面会标一个*号\n[root@qfedu.com ~]# git branch * dev   master\n[root@qfedu.com ~]# git add readme.txt git commit -m \"branch test\"  # 在dev分支上正常提交.\n```\n\n2、分支切换\n\n```shell\n[root@qfedu.com ~]# git checkout master     #切换回master分支\n# 查看一个readme.txt文件，刚才添加的内容不见了，因为那个提交是在dev分支上，而master分支此刻的提交点并没有变  \n```\n\n3、合并分支\n\n```shell\n[root@qfedu.com ~]# git merge dev           #把dev分支的工作成果合并到master分支上\n[root@qfedu.com ~]# git merge               #命令用于合并指定分支到当前分支。\n# 合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。\n```\n\n```shell\n注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。\n当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。\n```\n\n```shell\n[root@qfedu.com ~]# git branch -d dev       #删除dev分支了：\n删除后，查看branch，就只剩下master分支了.\n```\n\n##### 3、解决冲突\n\n```shell\n[root@qfedu.com ~]# git checkout -b feature1        # 创建新的feature1分支\n# 修改readme.txt最后一行，改为：\nCreating a new branch is quick AND simple.\n\n[root@qfedu.com ~]# git add readme.txt              # 在feature1分支上提交\n[root@qfedu.com ~]# git commit -m \"AND simple\"\n[root@qfedu.com ~]# git checkout master             #切换到master分支\nSwitched to branch 'master' Your branch is ahead of 'origin/master' by 1 commit.\nGit还会自动提示我们当前master分支比远程的master分支要超前1个提交。\n\n在master分支上把readme.txt文件的最后一行改为：\nCreating a new branch is quick & simple.\n[root@qfedu.com ~]# git add readme.txt \n[root@qfedu.com ~]# git commit -m \"& simple\"\n\n现在，master分支和feature1分支各自都分别有新的提交\n这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：\ngit merge feature1 Auto-merging readme.txt CONFLICT (content): \nMerge conflict in readme.txt Automatic merge failed; \nfix conflicts and then commit the result.\n```\n\n```shell\nreadme.txt文件存在冲突，必须手动解决冲突后再提交。\n[root@qfedu.com ~]# git status 可以显示冲突的文件;\n直接查看readme.txt的内容：\nGit is a distributed version control system.\nGit is free software distributed under the GPL. \nGit has a mutable index called stage. \nGit tracks changes of files. \n<<<<<<< HEAD Creating a new branch is quick & simple. ======= Creating a new branch is quick AND simple. >>>>>>> feature1\nGit用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改后保存再提交：\n[root@qfedu.com ~]# git add readme.txt  \n[root@qfedu.com ~]# git commit -m \"conflict fixed\" \n[master 59bc1cb] conflict fixed\n最后，删除feature1分支：\n[root@qfedu.com ~]# git branch -d feature1 \nDeleted branch feature1 (was 75a857c).\n```\n\n## 七、Github 远程仓库\n\n1、github.com 注册账户\n\n2、github 上创建仓库\n\n3、本地服务器生成 ssh 公钥\n\n```shell\n[root@qfedu.com ~]# ssh-keygen -t rsa -C 'meteor@163.com'  # 邮箱要与github上注册的相同\n[root@qfedu.com ~]# cat .ssh/id_rsa.pub \nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVThfq4brrlsPGtAknVB0TLPx+7Dd3qlxTbSIrUOsGC5Y8JuNqVTlIntZB4oNj8cSQrWvec9CKm0a8o7WwaJIiqpxurz+YpQHP2KbapftKIxsX4hPf/z+p0El1U6arQa35/xmNsq+cJLH/bDdRG+EMDhuCBmjVZOlLj/hEdeIT6s56AnnCkaWoF+sq58KCF7Tk54jRbs/YiyE4SN7FuA70r+07sA/uj0+lmuk4E190KtQUELhjX/E9stivlqiRhxnKvVUqXDywsjfM8Rtvbi4Fg9R8Wt9fpd4QwnWksYUoR5qZJFYXO4hSZrUnSMruPK14xXjDJcFDcP2eHIzKgLD1 meteor@163.com\n```\n4、 github 添加 ssh 公钥 \n\n复制以上的公钥，在 github 中添加ssh key\n\n5、测试连接\n\n```shell\n[root@qfedu.com ~]# yum install git\n........\n[root@qfedu.com ~]# ssh -T git@qfedu.comhub.com\nThe authenticity of host 'github.com (13.250.177.223)' can't be established.\nRSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.\nRSA key fingerprint is MD5:16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added 'github.com,13.250.177.223' (RSA) to the list of known hosts.\nHi meteor! You've successfully authenticated, but GitHub does not provide shell access.\n[root@qfedu.com ~]#\n```\n6、连接远程仓库（创建一个测试存储库）\n\n![it_remote_metho](./assets/git_remote_method.png)\n\n```shell\n# 在 github 网站新建一个仓库，命名为linux\n~~~\n[root@qfedu.com ~]# cd /opt\n[root@qfedu.com ~]# mkdir linux\n[root@qfedu.com ~]# mkdir linux\n[root@qfedu.com ~]# cd linux\n~~~\n# git 初始化，然后做第一个基本的git操作(需要在github上创建存储库)\n[root@qfedu.com ~]# git init\n[root@qfedu.com ~]# touch README\n[root@qfedu.com ~]# git add README\n[root@qfedu.com ~]# git commit -m 'first commit'\n[root@qfedu.com ~]# git remote add origin git@qfedu.comhub.com:userhub/linux.git\n~~~\n# 若出现origin已经存在的错误，删除origin\n[root@qfedu.com linux]# git remote rm origin\n# 现在继续执行push到远端\n~~~\n[root@qfedu.com linux]# git remote add origin git@qfedu.comhub.com:userhub/linux.git\n[root@qfedu.com linux]# git push -u origin master\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 205 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo git@qfedu.comhub.com:fakehydra/linux-.git\n * [new branch]      master -> master\n分支 master 设置为跟踪来自 origin 的远程分支 master。\n# 注意\n# 设置存储库链接\n[root@qfedu.com ~]# git remote set-url origin git@qfedu.comhub.com:userhub/linux.git\n# 如果 push 失败，合并分支到 master 再 push\n[root@qfedu.com ~]# git pull --rebase origin master\n```\n\n## 八、Gitlab Server 部署\n\n### 1、环境配置\n\n关闭防火墙、SELinux\n\n开启邮件服务\n\n```shell\n[root@qfedu.com ~]# systemctl start  postfix\n[root@qfedu.com ~]# systemctl enable postfix\n```\n\n### 2、部署 Gitlab \n\n#### 1、安装 gitlab 依赖包\n\n```shell\ncentos7:\n[root@qfedu.com ~]# yum install -y curl openssh-server openssh-clients postfix cronie policycoreutils-python\n# gitlab-ce 10.x.x以后的版本需要依赖policycoreutils-python\n\ncentos8:\n[root@qfedu.com ~]# yum install -y curl openssh-server openssh-clients postfix cronie  policycoreutils-python-utils\n```\n\n#### 2、添加官方源\n\n```shell\n[root@qfedu.com ~]# curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash\n```\n\n因为官方源太慢，可以使用国内清华yum源，配置如下\n\n```bash\n[root@qfedu.com ~]# vim /etc/yum.repos.d/gitlab-ce.repo\n[gitlab-ce]\nname=Gitlab CE Repository\nbaseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/\ngpgcheck=0\nenabled=1\n```\n\n#### 3、安装 Gitlab\n\n```shell\n[root@qfedu.com ~]# yum -y install gitlab-ce                    # 自动安装最新版\n[root@qfedu.com ~]# yum -y install gitlab-ce-x.x.x\t\t\t\t# 安装指定版本Gitlab\n```\n\n#### 4、配置 Gitlab\n\n##### 1、查看Gitlab版本\n\n```shell\n[root@qfedu.com ~]# head -1 /opt/gitlab/version-manifest.txt\ngitlab-ce 10.1.1\n```\n\n##### 2、Gitlab 配置登录链接\n\n``` shell\n#设置登录链接\n[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\n***\n## GitLab URL\n##! URL on which GitLab will be reachable.\n##! For more details on configuring external_url see:\n##! https://docs.gitlab.com/omnibus/settings/configuration.html#configuring-the-external-url-for-gitlab\n# 没有域名，可以设置为本机IP地址\nexternal_url 'http://172.17.0.61'\n***\n[root@qfedu.com ~]# grep \"^external_url\" /etc/gitlab/gitlab.rb\nexternal_url 'http://172.17.0.61'     #绑定监听的域名或IP\n```\n\n##### 3、初始化 Gitlab\n\n**配置语言环境**\n\ngitlab要求语言环境为英文环境，必须切换，切换方法如下：\n\n```\n注意：可以先尝试以下方案\n\t语言环境问题：如果碰到之后的解决方案如下，需要重新登录\n \t[root@wing ~]# echo \"export LC_ALL=en_US.UTF-8\"  >>  /etc/profile \n\n如果上面的方案不可以，再使用下面的方案： \t\n# yum install langpacks-zh_CN langpacks-en langpacks-en_GB -y\n# cat > /etc/profile.d/locale.sh<<-EOF\n export LANG=en_US.UTF-8\n export LANGUAGE=en_US.UTF-8\n export LC_COLLATE=C\n export LC_CTYPE=en_US.UTF-8\n EOF\n# source /etc/profile.d/locale.sh\n\n退出终端重新登陆\n```\n\n第一次使用配置时间较长\n\n``` shell\n[root@qfedu.com ~]# gitlab-ctl reconfigure   \n.....\n```\n\n##### 4、启动 Gitlab 服务\n\n``` shell\n[root@qfedu.com ~]# gitlab-ctl start\nok: run: gitaly: (pid 22896) 2922s\nok: run: gitlab-monitor: (pid 22914) 2921s\nok: run: gitlab-workhorse: (pid 22882) 2922s\nok: run: logrotate: (pid 22517) 2987s\nok: run: nginx: (pid 22500) 2993s\nok: run: node-exporter: (pid 22584) 2974s\nok: run: postgres-exporter: (pid 22946) 2919s\nok: run: postgresql: (pid 22250) 3047s\nok: run: prometheus: (pid 22931) 2920s\nok: run: redis: (pid 22190) 3053s\nok: run: redis-exporter: (pid 22732) 2962s\nok: run: sidekiq: (pid 22472) 3005s\nok: run: unicorn: (pid 22433) 3011s\n\n[git@qfedu.com ~]# lsof -i:80\nCOMMAND   PID       USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nnginx   22500       root    7u  IPv4  50923      0t0  TCP *:http (LISTEN)\nnginx   22501 gitlab-www    7u  IPv4  50923      0t0  TCP *:http (LISTEN)\n```\n\n##### 5、Gitlab 设置 HTTPS 方式 （缺少配置）\n\n- 如果想要以上的 https 方式正常生效使用，则需要把 letsencrypt 自动生成证书的配置打开，这样在执行重新让配置生效命令 (gitlab-ctl reconfigure) 的时候会自动给域名生成免费的证书并自动在 gitlab 自带的 nginx 中加上相关的跳转配置，都是全自动的，非常方便。\n\n```shell\n[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\nletsencrypt['enable'] = true //如果因为这行报错，改成false即可\nletsencrypt['contact_emails'] = ['276267003@qq.com']     # 添加联系人的电子邮件地址\n```\n\n##### 6、Gitlab 添加smtp邮件功能\n\n``` shell\n[git@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\npostfix 并非必须的；根据具体情况配置，以 SMTP 的为例配置邮件服务器来实现通知；参考配置如下： \n### Email Settings\ngitlab_rails['gitlab_email_enabled'] = true\ngitlab_rails['gitlab_email_from'] = '276267003@qq.com'\ngitlab_rails['gitlab_email_display_name'] = 'gitlab'\ngitlab_rails['gitlab_email_reply_to'] = '276267003@qq.com'\ngitlab_rails['gitlab_email_subject_suffix'] = '[gitlab]'\ngitlab_rails['smtp_enable'] = true\ngitlab_rails['smtp_address'] = \"smtp.qq.com\"\ngitlab_rails['smtp_port'] = 465\ngitlab_rails['smtp_user_name'] = \"276267003@qq.com\"\ngitlab_rails['smtp_password'] = \"kktohrvdryglbjjh\" #这是我的qq邮箱授权码\ngitlab_rails['smtp_domain'] = \"smtp.qq.com\"\ngitlab_rails['smtp_authentication'] = \"login\"\ngitlab_rails['smtp_enable_starttls_auto'] = true\ngitlab_rails['smtp_tls'] = true\n\n#修改配置后需要初始化配置，先关掉服务再重新初始化\n[git@qfedu.com ~]# gitlab-ctl stop\nok: down: gitaly: 0s, normally up\nok: down: gitlab-monitor: 1s, normally up\nok: down: gitlab-workhorse: 0s, normally up\nok: down: logrotate: 1s, normally up\nok: down: nginx: 0s, normally up\nok: down: node-exporter: 1s, normally up\nok: down: postgres-exporter: 0s, normally up\nok: down: postgresql: 0s, normally up\nok: down: prometheus: 0s, normally up\nok: down: redis: 0s, normally up\nok: down: redis-exporter: 1s, normally up\nok: down: sidekiq: 0s, normally up\nok: down: unicorn: 1s, normally up\n\n[git@qfedu.com ~]# gitlab-ctl reconfigure  \n......\n\n[git@qfedu.com ~]# gitlab-ctl start\nok: run: gitaly: (pid 37603) 0s\nok: run: gitlab-monitor: (pid 37613) 0s\nok: run: gitlab-workhorse: (pid 37625) 0s\nok: run: logrotate: (pid 37631) 0s\nok: run: nginx: (pid 37639) 1s\nok: run: node-exporter: (pid 37644) 0s\nok: run: postgres-exporter: (pid 37648) 1s\nok: run: postgresql: (pid 37652) 0s\nok: run: prometheus: (pid 37660) 1s\nok: run: redis: (pid 37668) 0s\nok: run: redis-exporter: (pid 37746) 0s\nok: run: sidekiq: (pid 37750) 1s\nok: run: unicorn: (pid 37757) 0s\n```\n\n##### 7、Gitlab 发送邮件测试\n\n``` shell\n[git@qfedu.com ~]# gitlab-rails console \n[root@wing ~]# gitlab-rails console\n---------------------------------------------------------------------\n GitLab:       12.10.1 (e658772bd63) FOSS\n GitLab Shell: 12.2.0\n PostgreSQL:   11.7\n---------------------------------------------------------------------\nLoading production environment (Rails 6.0.2)\nirb(main):003:0> \nirb(main):004:0> Notify.test_email('276267003@qq.com', 'Message Subject', 'Message Body').deliver_now  //输入测试命令，回车\n\nNotify#test_email: processed outbound mail in 5.2ms\nDelivered mail 5eafceaa250a_1d063fb777add9a08601a@wing.mail (1430.1ms)\nDate: Mon, 04 May 2020 16:13:30 +0800\nFrom: gitlab <276267003@qq.com>\nReply-To: gitlab <276267003@qq.com>\nTo: 276267003@qq.com\nMessage-ID: <5eafceaa250a_1d063fb777add9a08601a@wing.mail>\nSubject: Message Subject\nMime-Version: 1.0\nContent-Type: text/html;\n charset=UTF-8\nContent-Transfer-Encoding: 7bit\nAuto-Submitted: auto-generated\nX-Auto-Response-Suppress: All\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n<html><body><p>Message Body</p></body></html>\n\n=> #<Mail::Message:70056859616080, Multipart: false, Headers: <Date: Mon, 04 May 2020 16:13:30 +0800>, <From: gitlab <276267003@qq.com>>, <Reply-To: gitlab <276267003@qq.com>>, <To: 276267003@qq.com>, <Message-ID: <5eafceaa250a_1d063fb777add9a08601a@wing.mail>>, <Subject: Message Subject>, <Mime-Version: 1.0>, <Content-Type: text/html; charset=UTF-8>, <Content-Transfer-Encoding: 7bit>, <Auto-Submitted: auto-generated>, <X-Auto-Response-Suppress: All>>\nirb(main):005:0> \n```\n\n去qq邮箱web界面查看是否收到邮件\n\n![image-20200504161843613](assets/image-20200504161843613.png)\n\n### 3、Gitlab 的使用\n\n**在浏览器中输入 http://192.168.1.178/ ，然后 change password:  ，并使用root用户登录 即可 (后续动作根据提示操作)**\n\n#### 1、Gitlab 命令行修改密码\n\n```shell\n[root@qfedu.com ~]# gitlab-rails console production\nirb(main):001:0>user = User.where(id: 1).first      # id为1的是超级管理员\nirb(main):002:0>user.password = 'yourpassword'      # 密码必须至少8个字符\nirb(main):003:0>user.save!                          # 如没有问题 返回true\nexit \t\t\t\t\t\t\t\t\t\t\t\t# 退出\n```\n\n#### 2、Gitlab服务管理\n\n```shell\n[root@qfedu.com ~]# gitlab-ctl start                        # 启动所有 gitlab 组件；\n[root@qfedu.com ~]# gitlab-ctl stop                         # 停止所有 gitlab 组件；\n[root@qfedu.com ~]# gitlab-ctl restart                      # 重启所有 gitlab 组件；\n[root@qfedu.com ~]# gitlab-ctl status                       # 查看服务状态；\n[root@qfedu.com ~]# gitlab-ctl reconfigure                  # 初始化服务；\n[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb               # 修改默认的配置文件；\n[root@qfedu.com ~]# gitlab-ctl tail                         # 查看日志；\n```\n\n#### 3、登陆 Gitlab\n\n![1](./assets/1.png)\n\n**如果需要手工修改nginx的port ，可以在gitlab.rb中设置 nginx['listen_port'] = 8000 ，然后再次 gitlab-ctl reconfigure即可**\n\n**登录 gitlab 如下所示(首次登陆设置 root 密码)：**\n![1](./assets/2.1.png)\n\n#### 4、创建项目组 group \n\n组名为plat-sp ,\n![1](./assets/2.2.png)\n\n![1](./assets/3.png)\n\n#### 5、去掉用户的自动注册功能（安全）\n\nadmin are -> settings -> Sign-up Restrictions 去掉钩钩，然后拉到最下面保存，重新登录\n![1](./assets/4.png)\n\n## 九、Gitlab 开发代码提交处理流程\n\n###   1、公司代码提交合并流程\n\n-   PM（项目主管/项目经理）在gitlab创建任务，分配给开发人员\n\n-   开发人员领取任务后，在本地使用git clone拉取代码库\n\n-   开发人员创建开发分支（git checkout -b dev），并进行开发\n\n-   开发人员完成之后，提交到本地仓库（git commit ）\n\n-   开发人员在gitlab界面上申请分支合并请求（Merge request）\n\n-   PM在gitlab上查看提交和代码修改情况，确认无误后，确认将开发人员的分支合并到主分支（master）\n\n-   开发人员在gitlab上Mark done确认开发完成，并关闭issue。这一步在提交合并请求时可以通过描述中填写\"close #1\"等字样，可以直接关闭issue\n\n### 2、创建项目管理用户 Tompson\n\n![1](./assets/5.png)\n同样的方法，再创建 Eric 、Hellen 用户。用户添加完毕后，gitlab 会给用户发一封修改密码的邮件，各用户需要登录自己的邮箱，并点击相关的链接，设置新密码。\n\n### 3、将 Tompson 用户添加到组中，指定T为本组的 owner\n\n![1](./assets/6.png)\n\n### 4、同样的方法将用户Eric、Hellen 添加到组中，并指定为Developer\n\n![1](./assets/7.png)\n\n### 5、使用 Tompson 用户的身份与密码登录到 gitlab 界面中，并创建项目 Project\n\n![1](./assets/10.png)\n\n### 6、指定项目的存储路径和项目名称\n\n![1](./assets/11.png)\n\n把客户端的公钥添加到这里之后才会出现下图的内容\n\n![1](./assets/12.png)\n\n### 7、为项目创建 Dev分支\n\n注意：因为版本的原因，需要先在项目里面添加一个文件，才能显示下图中创建分支的操作\n\n![1](./assets/13.png)\n\n![1](./assets/14.png)\n\n### 8、在 client 上添加 Tompson 的用户\n\n``` shell\n[git@qfedu.com ~]# useradd Tompson\n[git@qfedu.com ~]# useradd Hellen\n[git@qfedu.com ~]# useradd Eric\n[git@qfedu.com ~]# useradd test\n[git@qfedu.com ~]# su - Tompson\n[Tompson@qfedu.com ~]$ ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/Tompson/.ssh/id_rsa): \nCreated directory '/home/Tompson/.ssh'.\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /home/Tompson/.ssh/id_rsa.\nYour public key has been saved in /home/Tompson/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:SAoAH2zSxqEJqVgKKrxM5XMi6tKe61JMRdwMhwBNIrE Tompson@domain.cn\nThe key's randomart image is:\n+---[RSA 2048]----+\n|XX==o=.          |\n|*BOo+.o          |\n|E*=.  .          |\n|*+.= + .         |\n|=oo = . S        |\n|.oo              |\n|.o               |\n|o...             |\n|.+=.             |\n+----[SHA256]-----+\n[Tompson@qfedu.com ~]$ cat .ssh/id_rsa.pub \nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDZ8cRGHej+sZzlmK36W5MUXMLOGdTwFI9Jj44mGuabZCrlYW4GDpL6ppezN+Sur0wHtnKonYJzm8ntqS0S0UHyaPPQPl9Mrs/6Z4VrXZ/4RlqHdWeSrmOwCBQld0l8HvrmP4TyGHrOreO8uZqimd/Z+OiMqnYRZzENX11Pti/Px5g1MtJcoCi9uLtF42QYrt1X/fzAyPU9C5/5ZUq4Jln3EF20bzcA52oAzZIl0jrhI0TeTeW6zYq+KxdHGshL+qG7+Ne+akPOe4Ma5BQjcMZ2dQ2kbGuozXmLT8RDcj9YRKceQsUdTI71lJpwrWKGn8Vhra0EaK3hgoTuvMYaGfOF Tompson@domain.cn\n```\n\n### 9、将 Tompson 的公钥复制到 gitlab 中\n\n使用 Tompson 用户的身份与密码登录到 gitlab界面中，然后在 ssh-key 中添加相关的key \n![1](./assets/8.png)\n\n![1](./assets/9.png)\n\n### 10、为 Tompson 用户配置 git \n\n``` shell\n[Tompson@qfedu.com ~]$ git config --global user.email \"222@qq.com\"\n[Tompson@qfedu.com ~]$ git config --global user.name \"tom\"\n\n[Tompson@qfedu.com ~]$ git clone git@192.168.60.119:plat-sp/chathall.git\nCloning into 'chathall'...\nThe authenticity of host '192.168.60.119 (192.168.60.119)' can't be established.\nECDSA key fingerprint is SHA256:CDxAQmj6gUkIxB6XUofbZ853GuPM5LS2QO4a5dD7jRo.\nECDSA key fingerprint is MD5:4e:20:72:a7:46:c6:d7:5d:bb:9d:ce:c3:f3:da:43:f9.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '192.168.60.119' (ECDSA) to the list of known hosts.\nremote: Counting objects: 3, done.\nremote: Total 3 (delta 0), reused 0 (delta 0)\nReceiving objects: 100% (3/3), done.\n[Tompson@qfedu.com ~]$ \n[Tompson@qfedu.com ~]$ cd chathall/\n[Tompson@qfedu.com chathall]$ ls\nReadme.txt\n[Tompson@qfedu.com chathall]$\n```\n\n### 11、创建新文件，添加内容，并提交到 master 分支\n\n``` shell\n[Tompson@qfedu.com chathall]$ vim test.sh\n[Tompson@qfedu.com chathall]$ cat test.sh \n#!/bin/bash\necho \"gitlab test\"\n[Tompson@qfedu.com chathall]$ git add . \n[Tompson@qfedu.com chathall]$ git commit -m '201805101649'\n[master 80edf6b] 201805101649\n 1 file changed, 2 insertions(+)\n create mode 100644 test.sh\n[Tompson@qfedu.com chathall]$ \n[Tompson@qfedu.com chathall]$ git push -u origin master \nCounting objects: 4, done.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 305 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo git@192.168.60.119:plat-sp/chathall.git\n   4611654..80edf6b  master -> master\nBranch master set up to track remote branch master from origin.\n[Tompson@qfedu.com chathall]$ \n```\n\n### 12、使用 Eric 用户登录，并 clone 项目\n\n``` shell\n[git@qfedu.com ~]# su - Eric\n[Eric@qfedu.com ~]$ ssh-keygen -C Eric@domain.cn\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/Eric/.ssh/id_rsa): \nCreated directory '/home/Eric/.ssh'.\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /home/Eric/.ssh/id_rsa.\nYour public key has been saved in /home/Eric/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:VZaJvjA5SJZEB+yuRpDBNHCECCZ5R8X0DYcNE0f1B6E Eric@domain.cn\nThe key's randomart image is:\n+---[RSA 2048]----+\n|*O=..B*o**+o+oo. |\n|*.+.. *o.*oooo . |\n| . + + ..oo E . .|\n|  o   o =..    . |\n|   . .  S+ .     |\n|    . .   .      |\n|   . .           |\n|    o            |\n|   .             |\n+----[SHA256]-----+\n\n[Eric@qfedu.com ~]$ cat .ssh/id_rsa.pub \nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDxQcn4UjRW/5PT5witeV9+S2w8WK5ouawHxEF7s9wuWsT4pqhcu5BN74NG3CPaq1jJZnkV+aQsTw+60BAd1gOK0FBbKWxmohmE61n9vfpUT5igJ72t2jpXjfKwLIHw+Iq5yM4yUhkwSsoBuZkxYSEltnj8OvXaOlCDYnXuGBa9+xO8f5yVIcOtiwRvv+Y1PRRzSIcazPVZax9FLK26t1R4NPiY4xWkIJyK2OrKMeiaBBzyMfWzHdmsCWa51oSrYSmz3PDBXpzIBs3OdKxcaJs9Lc5u87YCV5RMUjLrPcA7nPK6crOabLXhz3d5GSYggMTOByQkyKOo7WlYpARCHOt/ Eric@domain.cn\n[Eric@qfedu.com ~]$ \n```\n\n### 13、同样需要使用Eric用户登录gitlab web 界面，并添加相应的ssh-key。然后设置git ，并clone项目\n\n``` shell\n[Eric@qfedu.com ~]$ git config --global user.email \"Eric@domain.cn\"\n[Eric@qfedu.com ~]$ git config --global user.name \"Eric\"\n[Eric@qfedu.com ~]$ git clone git@192.168.60.119:plat-sp/chathall.git\nCloning into 'chathall'...\nThe authenticity of host '192.168.60.119 (192.168.60.119)' can't be established.\nECDSA key fingerprint is SHA256:CDxAQmj6gUkIxB6XUofbZ853GuPM5LS2QO4a5dD7jRo.\nECDSA key fingerprint is MD5:4e:20:72:a7:46:c6:d7:5d:bb:9d:ce:c3:f3:da:43:f9.\nAre you sure you want to continue connecting (yes/no)? yes\nremote: Counting objects: 6, done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 6 (delta 0), reused 0 (delta 0)\nReceiving objects: 100% (6/6), done.\n[Eric@qfedu.com ~]$ \n```\n\n### 14、切换到dev分支，修改文件内容，并将新 code 提交到 dev分支 (Developer角色默认并没有提交master的权限)\n\n``` shell\n[Eric@qfedu.com chathall]$ git checkout dev \nBranch dev set up to track remote branch dev from origin.\nSwitched to a new branch 'dev'\n[Eric@qfedu.com chathall]$ ls\nReadme.txt  test.sh\n[Eric@qfedu.com chathall]$ vim eric.sh \n[Eric@qfedu.com chathall]$ cat eric.sh\n#!/bin/bash\necho \"brahch test\"\n[Eric@qfedu.com chathall]$ git add . \n[Eric@qfedu.com chathall]$ git commit -m '201805101658'\n[dev 6687039] 201805101658\n 1 file changed, 1 insertion(+)\n[Eric@qfedu.com chathall]$ git push -u origin dev \nCounting objects: 5, done.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 306 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nremote: \nremote: To create a merge request for dev, visit:\nremote:   http://192.168.60.119/plat-sp/chathall/merge_requests/new?merge_request%5Bsource_branch%5D=dev\nremote: \nTo git@192.168.60.119:plat-sp/chathall.git\n   80edf6b..6687039  dev -> dev\nBranch dev set up to track remote branch dev from origin.\n[Eric@qfedu.com chathall]$\n[Eric@qfedu.com chathall]$ git checkout master \nSwitched to branch 'master'\n[Eric@qfedu.com chathall]$ git branch \n  dev\n* master\n[Eric@qfedu.com chathall]$\n```\n\n### 15、使用Eric 用户登录gitlab web，在界面中 创建一个合并请求\n\n![1](./assets/15.png)\n\n**提交合并请求：**\n![1](./assets/16.png)\n\n### 16、使用Tompson用户登录 gitlab web ，找到“合并请求” ，然后将dev分支合并到master分支\n\n![1](./assets/17.png)\n\n![1](./assets/18.png)\n\n## 十、Gitlab 备份与恢复\n\n### 1、查看系统版本和软件版本\n\n```shell\n[root@qfedu.com gitlab]# cat /etc/redhat-release \nCentOS Linux release 7.3.1611 (Core) \n\n[root@qfedu.com gitlab]# cat /opt/gitlab/embedded/service/gitlab-rails/VERSION\n8.15.4\n```\n\n### 2、数据备份\n\n#### 1、查看备份相关的配置项\n\n```shell\n[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\ngitlab_rails['manage_backup_path'] = true\ngitlab_rails['backup_path'] = \"/data/gitlab/backups\"\n```\n\n该项定义了默认备份出文件的路径，可以通过修改该配置，并执行 **gitlab-ctl reconfigure 或者 gitlab-ctl  restart** 重启服务生效。\n\n#### 2、执行备份命令进行备份\n\n```shell\n[root@qfedu.com ~]# /opt/gitlab/bin/gitlab-rake gitlab:backup:create \n```\n\n#### 3、添加到 crontab 中定时执行\n\n```shell\n[root@qfedu.com ~]# crontab -e\n0 2 * * * bash /opt/gitlab/bin/gitlab-rake gitlab:backup:create\n```\n\n可以到/data/gitlab/backups找到备份包，解压查看，会发现备份的还是比较全面的，数据库、repositories、build、upload等分类还是比较清晰的。\n\n#### 4、设置备份保留时长\n\n防止每天执行备份，有目录被爆满的风险，打开/etc/gitlab/gitlab.rb配置文件，找到如下配置：\n\n```shell\n[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\ngitlab_rails['backup_keep_time'] = 604800\n```\n\n设置备份保留7天（7*3600*24=604800），秒为单位，如果想增大或减小，可以直接在该处配置，并通过gitlab-ctl restart 重启服务生效。\n\n备份完成，会在备份目录中生成一个当天日期的tar包。\n\n### 3、数据恢复\n\n#### 1、安装部署 gitlab server\n\n 具体步骤参见上面：gitlab server 搭建过程\n\n#### 2、恢复 gitlab\n\n##### 1、查看备份相关的配置项\n\n```shell\n[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\ngitlab_rails['backup_path'] = \"/data/gitlab/backups\"\n```\n\n修改该配置，定义了默认备份出文件的路径，并执行 **gitlab-ctl reconfigure 或者 gitlab-ctl  restart** 重启服务生效。\n\n##### 2、恢复前需要先停掉数据连接服务\n\n```shell\n[root@qfedu.com ~]# gitlab-ctl stop unicorn\n[root@qfedu.com ~]# gitlab-ctl stop sidekiq\n```\n\n- 如果是台新搭建的主机，不需要操作，理论上不停这两个服务也可以。停这两个服务是为了保证数据一致性。\n\n##### 3、同步备份文件到新服务器\n\n将老服务器/data/gitlab/backups目录下的备份文件拷贝到新服务器上的/data/gitlab/backups\n\n```shell\n[root@qfedu.com gitlab]# rsync -avz 1530773117_2019_03_05_gitlab_backup.tar 192.168.95.135:/data/gitlab/backups/ \n```\n\n- 注意权限：600权限是无权恢复的。 实验环境可改成了777，生产环境建议修改属主属组\n\n\n```shell\n[root@qfedu.com backups]# pwd\n/data/gitlab/backups\n[root@qfedu.com backups]# chown -R git.git 1530773117_2019_03_05_gitlab_backup.tar \n[root@qfedu.com backups]# ll\ntotal 17328900\n-rwxrwxrwx 1 git git 17744793600 Jul  5 14:47 1530773117_2018_07_05_gitlab_backup.tar\n```\n\n##### 4、执行命令进行恢复\n\n后面再输入两次 yes 就完成恢复了。\n\n```shell\n[root@qfedu.com ~]# gitlab-rake gitlab:backup:restore BACKUP=1530773117_2018_07_05_gitlab_backup.tar\n注意：backups 目录下保留一个备份文件可直接执行\n```\n\n##### 5、恢复完成启动服务\n\n恢复完成后，启动刚刚的两个服务，或者重启所有服务，再打开浏览器进行访问，发现数据和之前的一致：\n\n```shell\n[root@qfedu.com ~]# gitlab-ctl start unicorn\n[root@qfedu.com ~]# gitlab-ctl start sidekiq\n或\n[root@qfedu.com ~]# gitlab-ctl restart\n```\n\n**注意：通过备份文件恢复gitlab必须保证两台主机的gitlab版本一致，否则会提示版本不匹配**\n\n## 十一、利用Gitlab管理k8s集群\n\n### 1、权限设置\n\n![image-20200821174547237](assets/image-20200821174547237.png)\n\n### 2、获取k8s集群API地址\n\n```yaml\n[root@master ~]# kubectl cluster-info | grep 'Kubernetes master' | awk '/http/ {print $NF}'\nhttps://192.168.19.200:6443\n```\n\n### 3、获取k8s集群默认CA证书\n\n```\n[root@master ~]# kubectl get secrets\nNAME                  TYPE                                  DATA   AGE\ndefault-token-cvfqx   kubernetes.io/service-account-token   3      3d21h\n```\n\ndefault-token-cvfqx 为上面获取到的secrets的名称，用以下命令查看证书\n\n```\n[root@master ~]# kubectl get secret default-token-cvfqx  -o jsonpath=\"{['data']['ca\\.crt']}\" | base64 --decode\n-----BEGIN CERTIFICATE-----\nMIICyDCCAbCgAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl\ncm5ldGVzMB4XDTIwMDgxNzA5MjAwMFoXDTMwMDgxNTA5MjAwMFowFTETMBEGA1UE\nAxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANIM\niOGHeolaxkE+kqZtc8kDbGFhwqGxNxg4orbIjrz//Z6vrgqo2COn2NjKrVM11bmz\nVhHPCruc3snfTLIS+/Z6gZqgpw5ruX8OjfH4nhr9npKxdBon3soa10EovPwMz1KW\nlaqbuLKTbtTm+oCtAKYXUlzqrFGR//GW2D3bjl1QGOPbAR0pggdxSpPo6oUgtEQJ\nQAsNOJ40qMjevi3fnrNDrMqmcNKlSlkw8+Gf4TqM1EfAERRHiEcb/W3hOGWV0gdm\nvaq7CE/ENeD1O11NE76BMmk5WO0u6ot4OmP35TTlx8K0N/WPyq76RlH7somiIb8S\n1NpAzg+9K0vv1QmILScCAwEAAaMjMCEwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB\n/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAEVgIlTFDoFhb3KA0RMVjckgsP3O\nOB7vTEws6w9ZDGJsNlbbCa15f8q3VmERSkfjAhfG4I9gb4KI0CM5Xt3JhU76GWsO\nZXHDfK7AzDGpLPUxlygkK7c7XCES/GEJe5agBxQyCo2pAvcj/nb+JIBeSh8JcG05\npzPhL11it9hDqmS5k92+63xGs/SDEzXEbBVMnyZWiv+AOHlO1/IFofUD3VHcSRMY\nwH5j6Irc0p0XTnFg+GHBpqjxwMWxP6IxdVrsOWUALM5oOJYn4aJQy5kSpJFkwNW8\nxDvVgtOWq5P9fVfnE4Am0LI/DevzYtcr3O9hUmCfEOnF0hC0n4ghYOPqiB4=\n-----END CERTIFICATE-----\n```\n\n### 4、设置rbac\n\n```\n[root@master ~]# vim gitlab-admin-service-account.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: gitlab-admin\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: gitlab-admin\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: gitlab-admin\n  namespace: kube-system\n\n[root@master ~]# kubectl apply -f gitlab-admin-service-account.yaml\nserviceaccount/gitlab-admin created\nclusterrolebinding.rbac.authorization.k8s.io/gitlab-admin created\n```\n\n### 5、获取gitlab-admin的token\n\n```yaml\n[root@master ~]# kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep gitlab-admin | awk '{print $1}')\nName:         gitlab-admin-token-pmb2h\nNamespace:    kube-system\nLabels:       <none>\nAnnotations:  kubernetes.io/service-account.name: gitlab-admin\n              kubernetes.io/service-account.uid: bc9e1f94-088d-41f4-8e18-f31f1e9a9369\n\nType:  kubernetes.io/service-account-token\n\nData\n====\nca.crt:     1025 bytes\nnamespace:  11 bytes\ntoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6InluNWZyY3V5T1BjNmFFQlpmRVBmOGFOenRmVkx1U0dCRDFhT0s5dEtGeXMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJnaXRsYWItYWRtaW4tdG9rZW4tcG1iMmgiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZ2l0bGFiLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYmM5ZTFmOTQtMDg4ZC00MWY0LThlMTgtZjMxZjFlOWE5MzY5Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmdpdGxhYi1hZG1pbiJ9.HGNf2_q_NS7ASk2ID6Y658PMpDIruFLr70VGk9I_dAP-rYt81FarjQhIQPn554SrtmiTp-iQ_j7slX_YRsGHlpo74VrBM2SirDToXobuSpe77v6MFx6Ol2UsUrxY0ulm_DAjOhZ16jlohPWlhkP0083KBfywwdpyF2oVdALQnT4sI1aDxgUHs-Pmg6D0NbdN0Ipb--s-Z59QKGr1XH4Pp0Qb9kze6KCJSWOk8-4pwtpQcT7K2MA1ucyEJB283D5ChQSddo9q7pBkEwq94TLy-ZbAhHgO89OqVIjY-3H-rb5Kd3meGrtGJZJscx7xnn6_DEvbBwp8DmCoM4vfFLUUow\n```\n\n6、添加k8s集群\n\n![image-20200821180353378](assets/image-20200821180353378.png)","slug":"分布式版本控制系统","published":1,"date":"2020-10-20T11:48:32.000Z","updated":"2022-02-11T04:38:26.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckztjmdh40003nb662uc56l48","content":"<h1 id=\"第1天-分布式版本控制系统\"><a href=\"#第1天-分布式版本控制系统\" class=\"headerlink\" title=\"第1天-分布式版本控制系统\"></a>第1天-分布式版本控制系统</h1><h2 id=\"一、Git、Github、Gitlab-的区别\"><a href=\"#一、Git、Github、Gitlab-的区别\" class=\"headerlink\" title=\"一、Git、Github、Gitlab 的区别\"></a>一、Git、Github、Gitlab 的区别</h2><p>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>\n<p>是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p>\n<p>Github是在线的基于Git的代码托管服务。 GitHub是2008年由Ruby on Rails编写而成。GitHub同时提供付费账户和免费账户。这两种账户都可以创建公开的代码仓库，只有付费账户可以创建私有的代码仓库。 Gitlab解决了这个问题, 可以在上面创建免费的私人repo。 </p>\n<p>git            是一套软件 可以做本地私有仓库</p>\n<p>github   本身是一个代码托管网站   公有和私有仓库(收费)   不能做本地私有仓库</p>\n<p>gitlab     本身也是一个代码托管的网站 功能上和github没有区别   公有和私有仓库（免费）  可以部署本地私有仓库</p>\n<h2 id=\"二、Git-与-SVN-区别\"><a href=\"#二、Git-与-SVN-区别\" class=\"headerlink\" title=\"二、Git 与 SVN 区别\"></a>二、Git 与 SVN 区别</h2><p>GIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。</p>\n<p>如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。</p>\n<p><strong>Git 与 SVN 区别</strong></p>\n<ol>\n<li>Git是分布式的，svn不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。</li>\n<li>GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。</li>\n<li>GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。</li>\n<li>GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。</li>\n<li>GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li>\n</ol>\n<p>git   是分布式的版本控制器  没有客户端和服务器端的概念</p>\n<p>svn 它是C/S结构的版本控制器  有客户端和服务器端  服务器如果宕机而且代码没有备份的情况下  完整代码就会丢失</p>\n<h2 id=\"三、部署Git-服务\"><a href=\"#三、部署Git-服务\" class=\"headerlink\" title=\"三、部署Git 服务\"></a>三、部署Git 服务</h2><p><strong>创建git仓库</strong></p>\n<p>git-server上的操作：</p>\n<pre><code>[root@qfedu.com ~]# yum install git git-core gitweb -y\n[root@qfedu.com ~]# useradd git\n[root@qfedu.com ~]# passwd git\n[root@qfedu.com ~]# mkdir /git-root/\n[root@qfedu.com ~]# cd /git-root/\n[root@qfedu.com git-root]# git init --bare shell.git\nInitialized empty Git repository in /git-root/shell.git/\n注意：\ngit init 和 git init --bare 的区别:\n使用--bare选项时,不再生成.git目录,而是只生成.git目录下面的版本历史记录文件,这些版本历史记录文件也不再存放在.git目录下面,而是直接存放在版本库的根目录下面.\n用&quot;git init&quot;初始化的版本库用户也可以在该目录下执行所有git方面的操作。但别的用户在将更新push上来的时候容易出现冲突。\n使用”git init --bare”方法创建一个所谓的裸仓库，之所以叫裸仓库是因为这个仓库只保存git历史提交的版本信息，而不允许用户在上面进行各种git操作，如果你硬要操作的话，只会得到下面的错误（”This operation must be run in a work tree”）这个就是最好把远端仓库初始化成bare仓库的原因\n\n[root@qfedu.com git-root]# chown -R git:git shell.git\n</code></pre>\n<p><strong>git仓库测试</strong></p>\n<p>git-client上的操作：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# ssh-keygen\n[root@qfedu.com ~]# ssh-copy-id git@192.168.1.178\n\n[root@qfedu.com shell]# git config --global user.email \"you@example.com\"\n[root@qfedu.com shell]# git config --global user.name \"Your Name\"\n\n[root@qfedu.com ~]# git clone git@192.168.1.178:/git-root/shell.git\n[root@qfedu.com ~]# ls\nrh  shell\n[root@qfedu.com ~]# cd shell/\n[root@qfedu.com shell]# vim test.sh\n[root@qfedu.com shell]# git add test.sh\n\n[root@qfedu.com shell]# git commit -m 'first commit'\n[master (root-commit) 33c5fbf] first commit\n 1 file changed, 2 insertions(+)\n create mode 100644 test1.sh\n[root@qfedu.com shell]# git push origin master\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 230 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo git@192.168.1.178:/git-root/shell.git\n * [new branch]      master -> master\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"四、Git工作流程\"><a href=\"#四、Git工作流程\" class=\"headerlink\" title=\"四、Git工作流程\"></a>四、Git工作流程</h2><p>一般工作流程如下：</p>\n<ul>\n<li><p>克隆 Git 资源作为工作目录。</p>\n</li>\n<li><p>在克隆的资源上添加或修改文件。 </p>\n</li>\n<li><p>如果其他人修改了，你可以更新资源。</p>\n</li>\n<li><p>在提交前查看修改。</p>\n</li>\n<li><p>提交修改。</p>\n</li>\n<li><p>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</p>\n<p>　　Git 的工作流程示意图：</p>\n</li>\n</ul>\n<p><img src=\"assets/805129-20160710102658467-1520443599.png\" alt=\"img\"></p>\n<h2 id=\"五、Git基本概念\"><a href=\"#五、Git基本概念\" class=\"headerlink\" title=\"五、Git基本概念\"></a>五、Git基本概念</h2><ul>\n<li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li>\n<li><strong>暂存区：</strong>英文叫stage, 或index。一般存放在”git目录”下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li>\n<li><strong>版本库：</strong>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li>\n</ul>\n<p>　　工作区、版本库中的暂存区和版本库之间的关系的示意图：</p>\n<p><img src=\"assets/805129-20160710103123608-1172715931.jpg\" alt=\"img\"></p>\n<ul>\n<li>　　图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage, index），标记为 “master” 的是 master 分支所代表的目录树。 </li>\n</ul>\n<ul>\n<li>　　图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个”游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。 </li>\n</ul>\n<ul>\n<li>　　图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下，里面包含了创建的各种对象及内容。 </li>\n</ul>\n<ul>\n<li>　　当对工作区修改（或新增）的文件执行 “git add” 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。 </li>\n</ul>\n<ul>\n<li>　　当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。 </li>\n</ul>\n<ul>\n<li>　　当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。 </li>\n</ul>\n<ul>\n<li>　　当执行 “git rm –cached <file>“ 命令时，会直接从暂存区删除文件，工作区则不做出改变。 </li>\n</ul>\n<ul>\n<li>　　当执行 “git checkout .” 或者 “git checkout – <file>“ 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。 </li>\n</ul>\n<ul>\n<li>　　当执行 “git checkout HEAD .” 或者 “git checkout HEAD <file>“ 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</li>\n</ul>\n<h2 id=\"六、Git-客户端安装使用\"><a href=\"#六、Git-客户端安装使用\" class=\"headerlink\" title=\"六、Git 客户端安装使用\"></a>六、Git 客户端安装使用</h2><h3 id=\"1、-Git-安装配置\"><a href=\"#1、-Git-安装配置\" class=\"headerlink\" title=\"1、 Git 安装配置\"></a>1、 Git 安装配置</h3><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n[root@qfedu.com ~]# yum -y install git git-all git-core\n[root@qfedu.com ~]# git --version\ngit version 2.18.4\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"2、Git-配置\"><a href=\"#2、Git-配置\" class=\"headerlink\" title=\"2、Git 配置\"></a>2、Git 配置</h3><p>Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。</p>\n<p>这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</p>\n<ul>\n<li><code>/etc/gitconfig</code> 文件：系统中对所有用户都普遍适用的配置。若使用 <code>git config</code> 时用 <code>--system</code> 选项，读写的就是这个文件。</li>\n<li><code>~/.gitconfig</code> 文件：用户目录下的配置文件只适用于该用户。若使用 <code>git config</code> 时用 <code>--global</code> 选项，读写的就是这个文件。</li>\n<li>当前项目的 Git 目录中的配置文件（也就是工作目录中的 <code>.git/config</code> 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 <code>.git/config</code> 里的配置会覆盖 <code>/etc/gitconfig</code> 中的同名变量。</li>\n</ul>\n<h4 id=\"1、Git-用户信息\"><a href=\"#1、Git-用户信息\" class=\"headerlink\" title=\"1、Git 用户信息\"></a>1、Git 用户信息</h4><p>配置个人的用户名称和电子邮件地址：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# git config --global user.name \"qfedu\"\n[root@qfedu.com ~]# git config --global user.email test@qq.com\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>如果用了 <strong>–global</strong> 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。</p>\n<p>如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p>\n<h4 id=\"2、文本编辑器\"><a href=\"#2、文本编辑器\" class=\"headerlink\" title=\"2、文本编辑器\"></a>2、文本编辑器</h4><p>设置Git默认使用的文本编辑器, 一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# git config --global core.editor emacs\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"3、差异分析工具\"><a href=\"#3、差异分析工具\" class=\"headerlink\" title=\"3、差异分析工具\"></a>3、差异分析工具</h4><p>还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# git config --global merge.tool vimdiff\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Git 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。</p>\n<p>当然，你也可以指定使用自己开发的工具</p>\n<h4 id=\"4、查看配置信息\"><a href=\"#4、查看配置信息\" class=\"headerlink\" title=\"4、查看配置信息\"></a>4、查看配置信息</h4><p>要检查已有的配置信息，可以使用 git config –list 命令：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# git config --list\nhttp.postbuffer=2M\nuser.name=runoob\nuser.email=test@runoob.com\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。</p>\n<p>这些配置我们也可以在 <strong>~/.gitconfig</strong> 或 <strong>/etc/gitconfig</strong> 看到，如下所示：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# vim ~/.gitconfig \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>显示内容如下所示：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[http]\n    postBuffer = 2M\n[user]\n    name = git\n    email = test@qfedu.com.com\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# git config user.name\ngit\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"3、Git-使用\"><a href=\"#3、Git-使用\" class=\"headerlink\" title=\"3、Git 使用\"></a>3、Git 使用</h3><h4 id=\"1、ssh-链接\"><a href=\"#1、ssh-链接\" class=\"headerlink\" title=\"1、ssh 链接\"></a>1、ssh 链接</h4><p>客户机上产生公钥上传到gitlab的SSH-Keys里，git clone下载和git push上传都没问题，这种方式很安全</p>\n<h4 id=\"2、http-链接（两种方式实现）\"><a href=\"#2、http-链接（两种方式实现）\" class=\"headerlink\" title=\"2、http 链接（两种方式实现）\"></a>2、http 链接（两种方式实现）</h4><h5 id=\"1、修改代码里的-git-config-文件添加登录用户名密码\"><a href=\"#1、修改代码里的-git-config-文件添加登录用户名密码\" class=\"headerlink\" title=\"1、修改代码里的 .git/config 文件添加登录用户名密码\"></a>1、修改代码里的 .git/config 文件添加登录用户名密码</h5><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# cd .git\n[root@qfedu.com ~]# cat config\n[core]\nrepositoryformatversion = 0\nfilemode = true\nbare = false\nlogallrefupdates = true\n[remote \"origin\"]\nfetch = +refs/heads/*:refs/remotes/origin/*\nurl = http://username:password@qfedu.com@172.17.0.39:sauser/ansible.git\n[branch \"master\"]\nremote = origin\nmerge = refs/heads/master\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"2、-执行命令设置登录用户和密码\"><a href=\"#2、-执行命令设置登录用户和密码\" class=\"headerlink\" title=\"2、 执行命令设置登录用户和密码\"></a>2、 执行命令设置登录用户和密码</h5><pre class=\"line-numbers language-shell\"><code class=\"language-shell\"># cd到根目录，执行\n[root@qfedu.com ~]# git config --global credential.helper store  # 执行之后会在.gitconfig文件中多添加以下选项\n  [credential]         \n          helper = store\n# cd到项目目录，执行git pull命令，会提示输入账号密码。输完这一次以后就不再需要，并且会在根目录生成一个.git-credentials文件\n[root@qfedu.com ~]# git pull \n  Username for 'http://172.17.0.39:sauser/ansible.git': \n  xxxx@xxxx.com Password for 'https://xxxx@xxxx.com@172.17.0.39:sauser/ansible.git':\n[root@qfedu.com ~]# cat .git-credentials\n  https://Username:Password@qfedu.com.oschina.net\n# 之后pull/push代码都不再需要输入账号密码了\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3、设置身份验证\"><a href=\"#3、设置身份验证\" class=\"headerlink\" title=\"3、设置身份验证\"></a>3、设置身份验证</h4><p><strong>注意：</strong>设定本机用户名，绑定邮箱，让远程服务器知道机器的身份</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# git config --global user.name \"user_name\" \n[root@qfedu.com ~]# git config --global user.email \"XXXXX@XX.com\"\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"4、本地项目与远程服务器项目之间的交互\"><a href=\"#4、本地项目与远程服务器项目之间的交互\" class=\"headerlink\" title=\"4、本地项目与远程服务器项目之间的交互\"></a>4、本地项目与远程服务器项目之间的交互</h4><p>1、如果你没有最新的代码，希望从头开始</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# git clone git@XXX.git      # 这里是项目的地址（可从项目主页复制），将远程服务器的内容完全复制过来 \n[root@qfedu.com ~]# cd BGBInspector_V01        # clone 之后进入该项目的文件夹 \n[root@qfedu.com ~]# touch　README.md           # 新建readme文件 \n[root@qfedu.com ~]# git add README.md          # 将新的文件添加到git的暂存区 \n[root@qfedu.com ~]# git commit -m ‘Its note：add a readme file’ # 将暂存区的文件提交到某一个版本保存下来，并加上注释 \n[root@qfedu.com ~]# git push -u origin master  # 将本地的更改提交到远程服务器\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2、如果你已经有一个新版代码，希望直接把本地的代码替换到远程服务器</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# cd existing_folder          #进入代码存在的文件夹，或者直接在该文件夹打开\n[root@qfedu.com ~]# git init           # 初始化 \n[root@qfedu.com ~]# git remote add origin git@master:/git-test/shell.git  #添加远程项目\"shell\"库的地址（可从项目主页复制） ,前提是事先需要先在git远程服务器上创建相应的裸库\"shell\"\n[root@qfedu.com ~]# git add .                   #添加该文件夹中所有的文件到git的暂存区 \n[root@qfedu.com ~]# git commit -m ‘note’        #提交所有代码到本机的版本库 \n[root@qfedu.com ~]# git push -u origin master   #将本地的更改提交到远程服务器\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><p>git 中 clone过来的时候，git 不会对比本地和服务器的文件，也就不会有冲突，</p>\n</li>\n<li><p>建议确定完全覆盖本地的时候用 clone，不确定会不会有冲突的时候用 git pull，将远程服务器的代码download下来</p>\n</li>\n<li><p>git pull=git fetch+git merge</p>\n<p>  实验如下：</p>\n<pre><code>本地代码内容如下：\n[root@node1 shell]# cat mem.sh \nfree -m | awk &#39;NR==2&#123;print $4&#125;&#39;\necho hello\necho ni hao\n\n远程Git服务器代码内容如下：\n[root@node1 shell]# cat mem.sh \nfree -m | awk &#39;NR==2&#123;print $4&#125;&#39;\necho hello\necho ni hao\necho ha ha\n\n本地机器做fetch操作：\n[root@node1 shell]# git fetch origin master:test\nremote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 0 (delta 0)\nUnpacking objects: 100% (3/3), done.\nFrom master:/git-test/shell\n * [new branch]      master     -&gt; test\n   b522245..10f9569  master     -&gt; origin/master\n\nfetch是把远程代码作为本地的一个其他分支下载到本地，并不更新本地分支，这里的命令是把远程的”master“分支下载到本地作为一个新的分支”test“存在\n\n查看本地文件并没有发生变化\n[root@node1 shell]# ls  \nmem.sh\n[root@node1 shell]# cat mem.sh \nfree -m | awk &#39;NR==2&#123;print $4&#125;&#39;\necho hello\necho ni hao\n\n用diff查看本地master分支和fetch下来的test分支有什么区别：\n[root@node1 shell]# git diff master test\ndiff --git a/mem.sh b/mem.sh\nindex 7ce0803..c0c8cef 100644\n--- a/mem.sh\n+++ b/mem.sh\n@@ -1,3 +1,4 @@\n free -m | awk &#39;NR==2&#123;print $4&#125;&#39;\n echo hello\n echo ni hao\n+echo ha ha\n\n如果发现fetch下来的代码没什么问题，可以选择和本地分支进行合并\n[root@node1 shell]# git merge \nUpdating eb8645c..10f9569\nFast-forward\n mem.sh | 1 +\n 1 file changed, 1 insertion(+)\n[root@node1 shell]# cat mem.sh \nfree -m | awk &#39;NR==2&#123;print $4&#125;&#39;\necho hello\necho ni hao\necho ha ha\n</code></pre>\n</li>\n</ul>\n<h4 id=\"5、常用的git-命令\"><a href=\"#5、常用的git-命令\" class=\"headerlink\" title=\"5、常用的git 命令\"></a>5、常用的git 命令</h4><p><img src=\"assets/011500266295799.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# git init                      # 初始化 \n[root@qfedu.com ~]# git add main.cpp              # 将某一个文件添加到暂存区 \n[root@qfedu.com ~]# git add .                     # 将文件夹下的所有的文件添加到暂存区 \n[root@qfedu.com ~]# git commit -m ‘note‘          # 将暂存区中的文件保存成为某一个版本 \n[root@qfedu.com ~]# git log                       # 查看所有的版本日志 \n[root@qfedu.com ~]# git status                    # 查看现在暂存区的状况 \n[root@qfedu.com ~]# git diff                      # 查看现在文件与上一个提交-commit版本的区别 \n[root@qfedu.com ~]# git reset --hard HEAD^        # 回到上一个版本 \n[root@qfedu.com ~]# git reset --hard XXXXX        # XXX为版本编号，回到某一个版本 \n[root@qfedu.com ~]# git pull origin master        # 从主分支pull到本地 \n[root@qfedu.com ~]# git push -u origin master     # 从本地push到主分支 \n[root@qfedu.com ~]# git pull                      # pull默认主分支 \n[root@qfedu.com ~]# git push                      # push默认主分支 ...\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"6、版本穿梭\"><a href=\"#6、版本穿梭\" class=\"headerlink\" title=\"6、版本穿梭\"></a>6、版本穿梭</h4><h5 id=\"1、版本回退\"><a href=\"#1、版本回退\" class=\"headerlink\" title=\"1、版本回退\"></a>1、版本回退</h5><pre class=\"line-numbers language-shell\"><code class=\"language-shell\"># 用 git log 命令查看：\n# 每一个提交的版本都唯一对应一个 commit 版本号，\n# 使用 git reset 命令退到上一个版本：\n[root@qfedu.com ~]# git reset --hard HEAD^\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# git reflog                    # 查看命令历史，以便确定要回到哪个版本\n[root@qfedu.com ~]# git reset --hard commit_id    # 比如git reset --hard 3628164（不用全部输入，输入前几位即可）\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"2、分支管理\"><a href=\"#2、分支管理\" class=\"headerlink\" title=\"2、分支管理\"></a>2、分支管理</h5><p>1、创建分支    </p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# git checkout -b dev     #创建dev分支，然后切换到dev分支\n[root@qfedu.com ~]# git checkout            #命令加上-b参数表示创建并切换，相当于以下两条命令：\n[root@qfedu.com ~]# git branch dev git checkout dev\n[root@qfedu.com ~]# git branch              #命令查看当前分支,\n[root@qfedu.com ~]# git branch              #命令会列出所有分支，当前分支前面会标一个*号\n[root@qfedu.com ~]# git branch * dev   master\n[root@qfedu.com ~]# git add readme.txt git commit -m \"branch test\"  # 在dev分支上正常提交.\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2、分支切换</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# git checkout master     #切换回master分支\n# 查看一个readme.txt文件，刚才添加的内容不见了，因为那个提交是在dev分支上，而master分支此刻的提交点并没有变  \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>3、合并分支</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# git merge dev           #把dev分支的工作成果合并到master分支上\n[root@qfedu.com ~]# git merge               #命令用于合并指定分支到当前分支。\n# 合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。\n当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# git branch -d dev       #删除dev分支了：\n删除后，查看branch，就只剩下master分支了.\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"3、解决冲突\"><a href=\"#3、解决冲突\" class=\"headerlink\" title=\"3、解决冲突\"></a>3、解决冲突</h5><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# git checkout -b feature1        # 创建新的feature1分支\n# 修改readme.txt最后一行，改为：\nCreating a new branch is quick AND simple.\n\n[root@qfedu.com ~]# git add readme.txt              # 在feature1分支上提交\n[root@qfedu.com ~]# git commit -m \"AND simple\"\n[root@qfedu.com ~]# git checkout master             #切换到master分支\nSwitched to branch 'master' Your branch is ahead of 'origin/master' by 1 commit.\nGit还会自动提示我们当前master分支比远程的master分支要超前1个提交。\n\n在master分支上把readme.txt文件的最后一行改为：\nCreating a new branch is quick & simple.\n[root@qfedu.com ~]# git add readme.txt \n[root@qfedu.com ~]# git commit -m \"& simple\"\n\n现在，master分支和feature1分支各自都分别有新的提交\n这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：\ngit merge feature1 Auto-merging readme.txt CONFLICT (content): \nMerge conflict in readme.txt Automatic merge failed; \nfix conflicts and then commit the result.\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">readme.txt文件存在冲突，必须手动解决冲突后再提交。\n[root@qfedu.com ~]# git status 可以显示冲突的文件;\n直接查看readme.txt的内容：\nGit is a distributed version control system.\nGit is free software distributed under the GPL. \nGit has a mutable index called stage. \nGit tracks changes of files. \n<<<<<<< HEAD Creating a new branch is quick & simple. ======= Creating a new branch is quick AND simple. >>>>>>> feature1\nGit用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改后保存再提交：\n[root@qfedu.com ~]# git add readme.txt  \n[root@qfedu.com ~]# git commit -m \"conflict fixed\" \n[master 59bc1cb] conflict fixed\n最后，删除feature1分支：\n[root@qfedu.com ~]# git branch -d feature1 \nDeleted branch feature1 (was 75a857c).\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"七、Github-远程仓库\"><a href=\"#七、Github-远程仓库\" class=\"headerlink\" title=\"七、Github 远程仓库\"></a>七、Github 远程仓库</h2><p>1、github.com 注册账户</p>\n<p>2、github 上创建仓库</p>\n<p>3、本地服务器生成 ssh 公钥</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# ssh-keygen -t rsa -C 'meteor@163.com'  # 邮箱要与github上注册的相同\n[root@qfedu.com ~]# cat .ssh/id_rsa.pub \nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVThfq4brrlsPGtAknVB0TLPx+7Dd3qlxTbSIrUOsGC5Y8JuNqVTlIntZB4oNj8cSQrWvec9CKm0a8o7WwaJIiqpxurz+YpQHP2KbapftKIxsX4hPf/z+p0El1U6arQa35/xmNsq+cJLH/bDdRG+EMDhuCBmjVZOlLj/hEdeIT6s56AnnCkaWoF+sq58KCF7Tk54jRbs/YiyE4SN7FuA70r+07sA/uj0+lmuk4E190KtQUELhjX/E9stivlqiRhxnKvVUqXDywsjfM8Rtvbi4Fg9R8Wt9fpd4QwnWksYUoR5qZJFYXO4hSZrUnSMruPK14xXjDJcFDcP2eHIzKgLD1 meteor@163.com\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>4、 github 添加 ssh 公钥 </p>\n<p>复制以上的公钥，在 github 中添加ssh key</p>\n<p>5、测试连接</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# yum install git\n........\n[root@qfedu.com ~]# ssh -T git@qfedu.comhub.com\nThe authenticity of host 'github.com (13.250.177.223)' can't be established.\nRSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.\nRSA key fingerprint is MD5:16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added 'github.com,13.250.177.223' (RSA) to the list of known hosts.\nHi meteor! You've successfully authenticated, but GitHub does not provide shell access.\n[root@qfedu.com ~]#\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>6、连接远程仓库（创建一个测试存储库）</p>\n<p><img src=\"./assets/git_remote_method.png\" alt=\"it_remote_metho\"></p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"># 在 github 网站新建一个仓库，命名为linux\n~~~\n[root@qfedu.com ~]# cd /opt\n[root@qfedu.com ~]# mkdir linux\n[root@qfedu.com ~]# mkdir linux\n[root@qfedu.com ~]# cd linux\n~~~\n# git 初始化，然后做第一个基本的git操作(需要在github上创建存储库)\n[root@qfedu.com ~]# git init\n[root@qfedu.com ~]# touch README\n[root@qfedu.com ~]# git add README\n[root@qfedu.com ~]# git commit -m 'first commit'\n[root@qfedu.com ~]# git remote add origin git@qfedu.comhub.com:userhub/linux.git\n~~~\n# 若出现origin已经存在的错误，删除origin\n[root@qfedu.com linux]# git remote rm origin\n# 现在继续执行push到远端\n~~~\n[root@qfedu.com linux]# git remote add origin git@qfedu.comhub.com:userhub/linux.git\n[root@qfedu.com linux]# git push -u origin master\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 205 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo git@qfedu.comhub.com:fakehydra/linux-.git\n * [new branch]      master -> master\n分支 master 设置为跟踪来自 origin 的远程分支 master。\n# 注意\n# 设置存储库链接\n[root@qfedu.com ~]# git remote set-url origin git@qfedu.comhub.com:userhub/linux.git\n# 如果 push 失败，合并分支到 master 再 push\n[root@qfedu.com ~]# git pull --rebase origin master\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"八、Gitlab-Server-部署\"><a href=\"#八、Gitlab-Server-部署\" class=\"headerlink\" title=\"八、Gitlab Server 部署\"></a>八、Gitlab Server 部署</h2><h3 id=\"1、环境配置\"><a href=\"#1、环境配置\" class=\"headerlink\" title=\"1、环境配置\"></a>1、环境配置</h3><p>关闭防火墙、SELinux</p>\n<p>开启邮件服务</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# systemctl start  postfix\n[root@qfedu.com ~]# systemctl enable postfix\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"2、部署-Gitlab\"><a href=\"#2、部署-Gitlab\" class=\"headerlink\" title=\"2、部署 Gitlab\"></a>2、部署 Gitlab</h3><h4 id=\"1、安装-gitlab-依赖包\"><a href=\"#1、安装-gitlab-依赖包\" class=\"headerlink\" title=\"1、安装 gitlab 依赖包\"></a>1、安装 gitlab 依赖包</h4><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">centos7:\n[root@qfedu.com ~]# yum install -y curl openssh-server openssh-clients postfix cronie policycoreutils-python\n# gitlab-ce 10.x.x以后的版本需要依赖policycoreutils-python\n\ncentos8:\n[root@qfedu.com ~]# yum install -y curl openssh-server openssh-clients postfix cronie  policycoreutils-python-utils\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2、添加官方源\"><a href=\"#2、添加官方源\" class=\"headerlink\" title=\"2、添加官方源\"></a>2、添加官方源</h4><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>因为官方源太慢，可以使用国内清华yum源，配置如下</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@qfedu.com ~<span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\"># vim /etc/yum.repos.d/gitlab-ce.repo</span>\n<span class=\"token punctuation\">[</span>gitlab-ce<span class=\"token punctuation\">]</span>\nname<span class=\"token operator\">=</span>Gitlab CE Repository\nbaseurl<span class=\"token operator\">=</span>https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el<span class=\"token variable\">$releasever</span>/\ngpgcheck<span class=\"token operator\">=</span>0\nenabled<span class=\"token operator\">=</span>1\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3、安装-Gitlab\"><a href=\"#3、安装-Gitlab\" class=\"headerlink\" title=\"3、安装 Gitlab\"></a>3、安装 Gitlab</h4><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# yum -y install gitlab-ce                    # 自动安装最新版\n[root@qfedu.com ~]# yum -y install gitlab-ce-x.x.x                # 安装指定版本Gitlab\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"4、配置-Gitlab\"><a href=\"#4、配置-Gitlab\" class=\"headerlink\" title=\"4、配置 Gitlab\"></a>4、配置 Gitlab</h4><h5 id=\"1、查看Gitlab版本\"><a href=\"#1、查看Gitlab版本\" class=\"headerlink\" title=\"1、查看Gitlab版本\"></a>1、查看Gitlab版本</h5><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# head -1 /opt/gitlab/version-manifest.txt\ngitlab-ce 10.1.1\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"2、Gitlab-配置登录链接\"><a href=\"#2、Gitlab-配置登录链接\" class=\"headerlink\" title=\"2、Gitlab 配置登录链接\"></a>2、Gitlab 配置登录链接</h5><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">#设置登录链接\n[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\n***\n## GitLab URL\n##! URL on which GitLab will be reachable.\n##! For more details on configuring external_url see:\n##! https://docs.gitlab.com/omnibus/settings/configuration.html#configuring-the-external-url-for-gitlab\n# 没有域名，可以设置为本机IP地址\nexternal_url 'http://172.17.0.61'\n***\n[root@qfedu.com ~]# grep \"^external_url\" /etc/gitlab/gitlab.rb\nexternal_url 'http://172.17.0.61'     #绑定监听的域名或IP\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"3、初始化-Gitlab\"><a href=\"#3、初始化-Gitlab\" class=\"headerlink\" title=\"3、初始化 Gitlab\"></a>3、初始化 Gitlab</h5><p><strong>配置语言环境</strong></p>\n<p>gitlab要求语言环境为英文环境，必须切换，切换方法如下：</p>\n<pre><code>注意：可以先尝试以下方案\n    语言环境问题：如果碰到之后的解决方案如下，需要重新登录\n     [root@wing ~]# echo &quot;export LC_ALL=en_US.UTF-8&quot;  &gt;&gt;  /etc/profile \n\n如果上面的方案不可以，再使用下面的方案：     \n# yum install langpacks-zh_CN langpacks-en langpacks-en_GB -y\n# cat &gt; /etc/profile.d/locale.sh&lt;&lt;-EOF\n export LANG=en_US.UTF-8\n export LANGUAGE=en_US.UTF-8\n export LC_COLLATE=C\n export LC_CTYPE=en_US.UTF-8\n EOF\n# source /etc/profile.d/locale.sh\n\n退出终端重新登陆\n</code></pre>\n<p>第一次使用配置时间较长</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# gitlab-ctl reconfigure   \n.....\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"4、启动-Gitlab-服务\"><a href=\"#4、启动-Gitlab-服务\" class=\"headerlink\" title=\"4、启动 Gitlab 服务\"></a>4、启动 Gitlab 服务</h5><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# gitlab-ctl start\nok: run: gitaly: (pid 22896) 2922s\nok: run: gitlab-monitor: (pid 22914) 2921s\nok: run: gitlab-workhorse: (pid 22882) 2922s\nok: run: logrotate: (pid 22517) 2987s\nok: run: nginx: (pid 22500) 2993s\nok: run: node-exporter: (pid 22584) 2974s\nok: run: postgres-exporter: (pid 22946) 2919s\nok: run: postgresql: (pid 22250) 3047s\nok: run: prometheus: (pid 22931) 2920s\nok: run: redis: (pid 22190) 3053s\nok: run: redis-exporter: (pid 22732) 2962s\nok: run: sidekiq: (pid 22472) 3005s\nok: run: unicorn: (pid 22433) 3011s\n\n[git@qfedu.com ~]# lsof -i:80\nCOMMAND   PID       USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nnginx   22500       root    7u  IPv4  50923      0t0  TCP *:http (LISTEN)\nnginx   22501 gitlab-www    7u  IPv4  50923      0t0  TCP *:http (LISTEN)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"5、Gitlab-设置-HTTPS-方式-（缺少配置）\"><a href=\"#5、Gitlab-设置-HTTPS-方式-（缺少配置）\" class=\"headerlink\" title=\"5、Gitlab 设置 HTTPS 方式 （缺少配置）\"></a>5、Gitlab 设置 HTTPS 方式 （缺少配置）</h5><ul>\n<li>如果想要以上的 https 方式正常生效使用，则需要把 letsencrypt 自动生成证书的配置打开，这样在执行重新让配置生效命令 (gitlab-ctl reconfigure) 的时候会自动给域名生成免费的证书并自动在 gitlab 自带的 nginx 中加上相关的跳转配置，都是全自动的，非常方便。</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\nletsencrypt['enable'] = true //如果因为这行报错，改成false即可\nletsencrypt['contact_emails'] = ['276267003@qq.com']     # 添加联系人的电子邮件地址\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"6、Gitlab-添加smtp邮件功能\"><a href=\"#6、Gitlab-添加smtp邮件功能\" class=\"headerlink\" title=\"6、Gitlab 添加smtp邮件功能\"></a>6、Gitlab 添加smtp邮件功能</h5><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[git@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\npostfix 并非必须的；根据具体情况配置，以 SMTP 的为例配置邮件服务器来实现通知；参考配置如下： \n### Email Settings\ngitlab_rails['gitlab_email_enabled'] = true\ngitlab_rails['gitlab_email_from'] = '276267003@qq.com'\ngitlab_rails['gitlab_email_display_name'] = 'gitlab'\ngitlab_rails['gitlab_email_reply_to'] = '276267003@qq.com'\ngitlab_rails['gitlab_email_subject_suffix'] = '[gitlab]'\ngitlab_rails['smtp_enable'] = true\ngitlab_rails['smtp_address'] = \"smtp.qq.com\"\ngitlab_rails['smtp_port'] = 465\ngitlab_rails['smtp_user_name'] = \"276267003@qq.com\"\ngitlab_rails['smtp_password'] = \"kktohrvdryglbjjh\" #这是我的qq邮箱授权码\ngitlab_rails['smtp_domain'] = \"smtp.qq.com\"\ngitlab_rails['smtp_authentication'] = \"login\"\ngitlab_rails['smtp_enable_starttls_auto'] = true\ngitlab_rails['smtp_tls'] = true\n\n#修改配置后需要初始化配置，先关掉服务再重新初始化\n[git@qfedu.com ~]# gitlab-ctl stop\nok: down: gitaly: 0s, normally up\nok: down: gitlab-monitor: 1s, normally up\nok: down: gitlab-workhorse: 0s, normally up\nok: down: logrotate: 1s, normally up\nok: down: nginx: 0s, normally up\nok: down: node-exporter: 1s, normally up\nok: down: postgres-exporter: 0s, normally up\nok: down: postgresql: 0s, normally up\nok: down: prometheus: 0s, normally up\nok: down: redis: 0s, normally up\nok: down: redis-exporter: 1s, normally up\nok: down: sidekiq: 0s, normally up\nok: down: unicorn: 1s, normally up\n\n[git@qfedu.com ~]# gitlab-ctl reconfigure  \n......\n\n[git@qfedu.com ~]# gitlab-ctl start\nok: run: gitaly: (pid 37603) 0s\nok: run: gitlab-monitor: (pid 37613) 0s\nok: run: gitlab-workhorse: (pid 37625) 0s\nok: run: logrotate: (pid 37631) 0s\nok: run: nginx: (pid 37639) 1s\nok: run: node-exporter: (pid 37644) 0s\nok: run: postgres-exporter: (pid 37648) 1s\nok: run: postgresql: (pid 37652) 0s\nok: run: prometheus: (pid 37660) 1s\nok: run: redis: (pid 37668) 0s\nok: run: redis-exporter: (pid 37746) 0s\nok: run: sidekiq: (pid 37750) 1s\nok: run: unicorn: (pid 37757) 0s\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"7、Gitlab-发送邮件测试\"><a href=\"#7、Gitlab-发送邮件测试\" class=\"headerlink\" title=\"7、Gitlab 发送邮件测试\"></a>7、Gitlab 发送邮件测试</h5><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[git@qfedu.com ~]# gitlab-rails console \n[root@wing ~]# gitlab-rails console\n---------------------------------------------------------------------\n GitLab:       12.10.1 (e658772bd63) FOSS\n GitLab Shell: 12.2.0\n PostgreSQL:   11.7\n---------------------------------------------------------------------\nLoading production environment (Rails 6.0.2)\nirb(main):003:0> \nirb(main):004:0> Notify.test_email('276267003@qq.com', 'Message Subject', 'Message Body').deliver_now  //输入测试命令，回车\n\nNotify#test_email: processed outbound mail in 5.2ms\nDelivered mail 5eafceaa250a_1d063fb777add9a08601a@wing.mail (1430.1ms)\nDate: Mon, 04 May 2020 16:13:30 +0800\nFrom: gitlab <276267003@qq.com>\nReply-To: gitlab <276267003@qq.com>\nTo: 276267003@qq.com\nMessage-ID: <5eafceaa250a_1d063fb777add9a08601a@wing.mail>\nSubject: Message Subject\nMime-Version: 1.0\nContent-Type: text/html;\n charset=UTF-8\nContent-Transfer-Encoding: 7bit\nAuto-Submitted: auto-generated\nX-Auto-Response-Suppress: All\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n<html><body><p>Message Body</p></body></html>\n\n=> #<Mail::Message:70056859616080, Multipart: false, Headers: <Date: Mon, 04 May 2020 16:13:30 +0800>, <From: gitlab <276267003@qq.com>>, <Reply-To: gitlab <276267003@qq.com>>, <To: 276267003@qq.com>, <Message-ID: <5eafceaa250a_1d063fb777add9a08601a@wing.mail>>, <Subject: Message Subject>, <Mime-Version: 1.0>, <Content-Type: text/html; charset=UTF-8>, <Content-Transfer-Encoding: 7bit>, <Auto-Submitted: auto-generated>, <X-Auto-Response-Suppress: All>>\nirb(main):005:0> \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>去qq邮箱web界面查看是否收到邮件</p>\n<p><img src=\"assets/image-20200504161843613.png\" alt=\"image-20200504161843613\"></p>\n<h3 id=\"3、Gitlab-的使用\"><a href=\"#3、Gitlab-的使用\" class=\"headerlink\" title=\"3、Gitlab 的使用\"></a>3、Gitlab 的使用</h3><p><strong>在浏览器中输入 <a href=\"http://192.168.1.178/\">http://192.168.1.178/</a> ，然后 change password:  ，并使用root用户登录 即可 (后续动作根据提示操作)</strong></p>\n<h4 id=\"1、Gitlab-命令行修改密码\"><a href=\"#1、Gitlab-命令行修改密码\" class=\"headerlink\" title=\"1、Gitlab 命令行修改密码\"></a>1、Gitlab 命令行修改密码</h4><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# gitlab-rails console production\nirb(main):001:0>user = User.where(id: 1).first      # id为1的是超级管理员\nirb(main):002:0>user.password = 'yourpassword'      # 密码必须至少8个字符\nirb(main):003:0>user.save!                          # 如没有问题 返回true\nexit                                                 # 退出\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2、Gitlab服务管理\"><a href=\"#2、Gitlab服务管理\" class=\"headerlink\" title=\"2、Gitlab服务管理\"></a>2、Gitlab服务管理</h4><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# gitlab-ctl start                        # 启动所有 gitlab 组件；\n[root@qfedu.com ~]# gitlab-ctl stop                         # 停止所有 gitlab 组件；\n[root@qfedu.com ~]# gitlab-ctl restart                      # 重启所有 gitlab 组件；\n[root@qfedu.com ~]# gitlab-ctl status                       # 查看服务状态；\n[root@qfedu.com ~]# gitlab-ctl reconfigure                  # 初始化服务；\n[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb               # 修改默认的配置文件；\n[root@qfedu.com ~]# gitlab-ctl tail                         # 查看日志；\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3、登陆-Gitlab\"><a href=\"#3、登陆-Gitlab\" class=\"headerlink\" title=\"3、登陆 Gitlab\"></a>3、登陆 Gitlab</h4><p><img src=\"./assets/1.png\" alt=\"1\"></p>\n<p><strong>如果需要手工修改nginx的port ，可以在gitlab.rb中设置 nginx[‘listen_port’] = 8000 ，然后再次 gitlab-ctl reconfigure即可</strong></p>\n<p><strong>登录 gitlab 如下所示(首次登陆设置 root 密码)：</strong><br><img src=\"./assets/2.1.png\" alt=\"1\"></p>\n<h4 id=\"4、创建项目组-group\"><a href=\"#4、创建项目组-group\" class=\"headerlink\" title=\"4、创建项目组 group\"></a>4、创建项目组 group</h4><p>组名为plat-sp ,<br><img src=\"./assets/2.2.png\" alt=\"1\"></p>\n<p><img src=\"./assets/3.png\" alt=\"1\"></p>\n<h4 id=\"5、去掉用户的自动注册功能（安全）\"><a href=\"#5、去掉用户的自动注册功能（安全）\" class=\"headerlink\" title=\"5、去掉用户的自动注册功能（安全）\"></a>5、去掉用户的自动注册功能（安全）</h4><p>admin are -&gt; settings -&gt; Sign-up Restrictions 去掉钩钩，然后拉到最下面保存，重新登录<br><img src=\"./assets/4.png\" alt=\"1\"></p>\n<h2 id=\"九、Gitlab-开发代码提交处理流程\"><a href=\"#九、Gitlab-开发代码提交处理流程\" class=\"headerlink\" title=\"九、Gitlab 开发代码提交处理流程\"></a>九、Gitlab 开发代码提交处理流程</h2><h3 id=\"1、公司代码提交合并流程\"><a href=\"#1、公司代码提交合并流程\" class=\"headerlink\" title=\"1、公司代码提交合并流程\"></a>1、公司代码提交合并流程</h3><ul>\n<li><p>  PM（项目主管/项目经理）在gitlab创建任务，分配给开发人员</p>\n</li>\n<li><p>  开发人员领取任务后，在本地使用git clone拉取代码库</p>\n</li>\n<li><p>  开发人员创建开发分支（git checkout -b dev），并进行开发</p>\n</li>\n<li><p>  开发人员完成之后，提交到本地仓库（git commit ）</p>\n</li>\n<li><p>  开发人员在gitlab界面上申请分支合并请求（Merge request）</p>\n</li>\n<li><p>  PM在gitlab上查看提交和代码修改情况，确认无误后，确认将开发人员的分支合并到主分支（master）</p>\n</li>\n<li><p>  开发人员在gitlab上Mark done确认开发完成，并关闭issue。这一步在提交合并请求时可以通过描述中填写”close #1”等字样，可以直接关闭issue</p>\n</li>\n</ul>\n<h3 id=\"2、创建项目管理用户-Tompson\"><a href=\"#2、创建项目管理用户-Tompson\" class=\"headerlink\" title=\"2、创建项目管理用户 Tompson\"></a>2、创建项目管理用户 Tompson</h3><p><img src=\"./assets/5.png\" alt=\"1\"><br>同样的方法，再创建 Eric 、Hellen 用户。用户添加完毕后，gitlab 会给用户发一封修改密码的邮件，各用户需要登录自己的邮箱，并点击相关的链接，设置新密码。</p>\n<h3 id=\"3、将-Tompson-用户添加到组中，指定T为本组的-owner\"><a href=\"#3、将-Tompson-用户添加到组中，指定T为本组的-owner\" class=\"headerlink\" title=\"3、将 Tompson 用户添加到组中，指定T为本组的 owner\"></a>3、将 Tompson 用户添加到组中，指定T为本组的 owner</h3><p><img src=\"./assets/6.png\" alt=\"1\"></p>\n<h3 id=\"4、同样的方法将用户Eric、Hellen-添加到组中，并指定为Developer\"><a href=\"#4、同样的方法将用户Eric、Hellen-添加到组中，并指定为Developer\" class=\"headerlink\" title=\"4、同样的方法将用户Eric、Hellen 添加到组中，并指定为Developer\"></a>4、同样的方法将用户Eric、Hellen 添加到组中，并指定为Developer</h3><p><img src=\"./assets/7.png\" alt=\"1\"></p>\n<h3 id=\"5、使用-Tompson-用户的身份与密码登录到-gitlab-界面中，并创建项目-Project\"><a href=\"#5、使用-Tompson-用户的身份与密码登录到-gitlab-界面中，并创建项目-Project\" class=\"headerlink\" title=\"5、使用 Tompson 用户的身份与密码登录到 gitlab 界面中，并创建项目 Project\"></a>5、使用 Tompson 用户的身份与密码登录到 gitlab 界面中，并创建项目 Project</h3><p><img src=\"./assets/10.png\" alt=\"1\"></p>\n<h3 id=\"6、指定项目的存储路径和项目名称\"><a href=\"#6、指定项目的存储路径和项目名称\" class=\"headerlink\" title=\"6、指定项目的存储路径和项目名称\"></a>6、指定项目的存储路径和项目名称</h3><p><img src=\"./assets/11.png\" alt=\"1\"></p>\n<p>把客户端的公钥添加到这里之后才会出现下图的内容</p>\n<p><img src=\"./assets/12.png\" alt=\"1\"></p>\n<h3 id=\"7、为项目创建-Dev分支\"><a href=\"#7、为项目创建-Dev分支\" class=\"headerlink\" title=\"7、为项目创建 Dev分支\"></a>7、为项目创建 Dev分支</h3><p>注意：因为版本的原因，需要先在项目里面添加一个文件，才能显示下图中创建分支的操作</p>\n<p><img src=\"./assets/13.png\" alt=\"1\"></p>\n<p><img src=\"./assets/14.png\" alt=\"1\"></p>\n<h3 id=\"8、在-client-上添加-Tompson-的用户\"><a href=\"#8、在-client-上添加-Tompson-的用户\" class=\"headerlink\" title=\"8、在 client 上添加 Tompson 的用户\"></a>8、在 client 上添加 Tompson 的用户</h3><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[git@qfedu.com ~]# useradd Tompson\n[git@qfedu.com ~]# useradd Hellen\n[git@qfedu.com ~]# useradd Eric\n[git@qfedu.com ~]# useradd test\n[git@qfedu.com ~]# su - Tompson\n[Tompson@qfedu.com ~]$ ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/Tompson/.ssh/id_rsa): \nCreated directory '/home/Tompson/.ssh'.\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /home/Tompson/.ssh/id_rsa.\nYour public key has been saved in /home/Tompson/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:SAoAH2zSxqEJqVgKKrxM5XMi6tKe61JMRdwMhwBNIrE Tompson@domain.cn\nThe key's randomart image is:\n+---[RSA 2048]----+\n|XX==o=.          |\n|*BOo+.o          |\n|E*=.  .          |\n|*+.= + .         |\n|=oo = . S        |\n|.oo              |\n|.o               |\n|o...             |\n|.+=.             |\n+----[SHA256]-----+\n[Tompson@qfedu.com ~]$ cat .ssh/id_rsa.pub \nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDZ8cRGHej+sZzlmK36W5MUXMLOGdTwFI9Jj44mGuabZCrlYW4GDpL6ppezN+Sur0wHtnKonYJzm8ntqS0S0UHyaPPQPl9Mrs/6Z4VrXZ/4RlqHdWeSrmOwCBQld0l8HvrmP4TyGHrOreO8uZqimd/Z+OiMqnYRZzENX11Pti/Px5g1MtJcoCi9uLtF42QYrt1X/fzAyPU9C5/5ZUq4Jln3EF20bzcA52oAzZIl0jrhI0TeTeW6zYq+KxdHGshL+qG7+Ne+akPOe4Ma5BQjcMZ2dQ2kbGuozXmLT8RDcj9YRKceQsUdTI71lJpwrWKGn8Vhra0EaK3hgoTuvMYaGfOF Tompson@domain.cn\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"9、将-Tompson-的公钥复制到-gitlab-中\"><a href=\"#9、将-Tompson-的公钥复制到-gitlab-中\" class=\"headerlink\" title=\"9、将 Tompson 的公钥复制到 gitlab 中\"></a>9、将 Tompson 的公钥复制到 gitlab 中</h3><p>使用 Tompson 用户的身份与密码登录到 gitlab界面中，然后在 ssh-key 中添加相关的key<br><img src=\"./assets/8.png\" alt=\"1\"></p>\n<p><img src=\"./assets/9.png\" alt=\"1\"></p>\n<h3 id=\"10、为-Tompson-用户配置-git\"><a href=\"#10、为-Tompson-用户配置-git\" class=\"headerlink\" title=\"10、为 Tompson 用户配置 git\"></a>10、为 Tompson 用户配置 git</h3><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[Tompson@qfedu.com ~]$ git config --global user.email \"222@qq.com\"\n[Tompson@qfedu.com ~]$ git config --global user.name \"tom\"\n\n[Tompson@qfedu.com ~]$ git clone git@192.168.60.119:plat-sp/chathall.git\nCloning into 'chathall'...\nThe authenticity of host '192.168.60.119 (192.168.60.119)' can't be established.\nECDSA key fingerprint is SHA256:CDxAQmj6gUkIxB6XUofbZ853GuPM5LS2QO4a5dD7jRo.\nECDSA key fingerprint is MD5:4e:20:72:a7:46:c6:d7:5d:bb:9d:ce:c3:f3:da:43:f9.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '192.168.60.119' (ECDSA) to the list of known hosts.\nremote: Counting objects: 3, done.\nremote: Total 3 (delta 0), reused 0 (delta 0)\nReceiving objects: 100% (3/3), done.\n[Tompson@qfedu.com ~]$ \n[Tompson@qfedu.com ~]$ cd chathall/\n[Tompson@qfedu.com chathall]$ ls\nReadme.txt\n[Tompson@qfedu.com chathall]$\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"11、创建新文件，添加内容，并提交到-master-分支\"><a href=\"#11、创建新文件，添加内容，并提交到-master-分支\" class=\"headerlink\" title=\"11、创建新文件，添加内容，并提交到 master 分支\"></a>11、创建新文件，添加内容，并提交到 master 分支</h3><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[Tompson@qfedu.com chathall]$ vim test.sh\n[Tompson@qfedu.com chathall]$ cat test.sh \n#!/bin/bash\necho \"gitlab test\"\n[Tompson@qfedu.com chathall]$ git add . \n[Tompson@qfedu.com chathall]$ git commit -m '201805101649'\n[master 80edf6b] 201805101649\n 1 file changed, 2 insertions(+)\n create mode 100644 test.sh\n[Tompson@qfedu.com chathall]$ \n[Tompson@qfedu.com chathall]$ git push -u origin master \nCounting objects: 4, done.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 305 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo git@192.168.60.119:plat-sp/chathall.git\n   4611654..80edf6b  master -> master\nBranch master set up to track remote branch master from origin.\n[Tompson@qfedu.com chathall]$ \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"12、使用-Eric-用户登录，并-clone-项目\"><a href=\"#12、使用-Eric-用户登录，并-clone-项目\" class=\"headerlink\" title=\"12、使用 Eric 用户登录，并 clone 项目\"></a>12、使用 Eric 用户登录，并 clone 项目</h3><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[git@qfedu.com ~]# su - Eric\n[Eric@qfedu.com ~]$ ssh-keygen -C Eric@domain.cn\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/Eric/.ssh/id_rsa): \nCreated directory '/home/Eric/.ssh'.\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /home/Eric/.ssh/id_rsa.\nYour public key has been saved in /home/Eric/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:VZaJvjA5SJZEB+yuRpDBNHCECCZ5R8X0DYcNE0f1B6E Eric@domain.cn\nThe key's randomart image is:\n+---[RSA 2048]----+\n|*O=..B*o**+o+oo. |\n|*.+.. *o.*oooo . |\n| . + + ..oo E . .|\n|  o   o =..    . |\n|   . .  S+ .     |\n|    . .   .      |\n|   . .           |\n|    o            |\n|   .             |\n+----[SHA256]-----+\n\n[Eric@qfedu.com ~]$ cat .ssh/id_rsa.pub \nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDxQcn4UjRW/5PT5witeV9+S2w8WK5ouawHxEF7s9wuWsT4pqhcu5BN74NG3CPaq1jJZnkV+aQsTw+60BAd1gOK0FBbKWxmohmE61n9vfpUT5igJ72t2jpXjfKwLIHw+Iq5yM4yUhkwSsoBuZkxYSEltnj8OvXaOlCDYnXuGBa9+xO8f5yVIcOtiwRvv+Y1PRRzSIcazPVZax9FLK26t1R4NPiY4xWkIJyK2OrKMeiaBBzyMfWzHdmsCWa51oSrYSmz3PDBXpzIBs3OdKxcaJs9Lc5u87YCV5RMUjLrPcA7nPK6crOabLXhz3d5GSYggMTOByQkyKOo7WlYpARCHOt/ Eric@domain.cn\n[Eric@qfedu.com ~]$ \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"13、同样需要使用Eric用户登录gitlab-web-界面，并添加相应的ssh-key。然后设置git-，并clone项目\"><a href=\"#13、同样需要使用Eric用户登录gitlab-web-界面，并添加相应的ssh-key。然后设置git-，并clone项目\" class=\"headerlink\" title=\"13、同样需要使用Eric用户登录gitlab web 界面，并添加相应的ssh-key。然后设置git ，并clone项目\"></a>13、同样需要使用Eric用户登录gitlab web 界面，并添加相应的ssh-key。然后设置git ，并clone项目</h3><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[Eric@qfedu.com ~]$ git config --global user.email \"Eric@domain.cn\"\n[Eric@qfedu.com ~]$ git config --global user.name \"Eric\"\n[Eric@qfedu.com ~]$ git clone git@192.168.60.119:plat-sp/chathall.git\nCloning into 'chathall'...\nThe authenticity of host '192.168.60.119 (192.168.60.119)' can't be established.\nECDSA key fingerprint is SHA256:CDxAQmj6gUkIxB6XUofbZ853GuPM5LS2QO4a5dD7jRo.\nECDSA key fingerprint is MD5:4e:20:72:a7:46:c6:d7:5d:bb:9d:ce:c3:f3:da:43:f9.\nAre you sure you want to continue connecting (yes/no)? yes\nremote: Counting objects: 6, done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 6 (delta 0), reused 0 (delta 0)\nReceiving objects: 100% (6/6), done.\n[Eric@qfedu.com ~]$ \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"14、切换到dev分支，修改文件内容，并将新-code-提交到-dev分支-Developer角色默认并没有提交master的权限\"><a href=\"#14、切换到dev分支，修改文件内容，并将新-code-提交到-dev分支-Developer角色默认并没有提交master的权限\" class=\"headerlink\" title=\"14、切换到dev分支，修改文件内容，并将新 code 提交到 dev分支 (Developer角色默认并没有提交master的权限)\"></a>14、切换到dev分支，修改文件内容，并将新 code 提交到 dev分支 (Developer角色默认并没有提交master的权限)</h3><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[Eric@qfedu.com chathall]$ git checkout dev \nBranch dev set up to track remote branch dev from origin.\nSwitched to a new branch 'dev'\n[Eric@qfedu.com chathall]$ ls\nReadme.txt  test.sh\n[Eric@qfedu.com chathall]$ vim eric.sh \n[Eric@qfedu.com chathall]$ cat eric.sh\n#!/bin/bash\necho \"brahch test\"\n[Eric@qfedu.com chathall]$ git add . \n[Eric@qfedu.com chathall]$ git commit -m '201805101658'\n[dev 6687039] 201805101658\n 1 file changed, 1 insertion(+)\n[Eric@qfedu.com chathall]$ git push -u origin dev \nCounting objects: 5, done.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 306 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nremote: \nremote: To create a merge request for dev, visit:\nremote:   http://192.168.60.119/plat-sp/chathall/merge_requests/new?merge_request%5Bsource_branch%5D=dev\nremote: \nTo git@192.168.60.119:plat-sp/chathall.git\n   80edf6b..6687039  dev -> dev\nBranch dev set up to track remote branch dev from origin.\n[Eric@qfedu.com chathall]$\n[Eric@qfedu.com chathall]$ git checkout master \nSwitched to branch 'master'\n[Eric@qfedu.com chathall]$ git branch \n  dev\n* master\n[Eric@qfedu.com chathall]$\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"15、使用Eric-用户登录gitlab-web，在界面中-创建一个合并请求\"><a href=\"#15、使用Eric-用户登录gitlab-web，在界面中-创建一个合并请求\" class=\"headerlink\" title=\"15、使用Eric 用户登录gitlab web，在界面中 创建一个合并请求\"></a>15、使用Eric 用户登录gitlab web，在界面中 创建一个合并请求</h3><p><img src=\"./assets/15.png\" alt=\"1\"></p>\n<p><strong>提交合并请求：</strong><br><img src=\"./assets/16.png\" alt=\"1\"></p>\n<h3 id=\"16、使用Tompson用户登录-gitlab-web-，找到“合并请求”-，然后将dev分支合并到master分支\"><a href=\"#16、使用Tompson用户登录-gitlab-web-，找到“合并请求”-，然后将dev分支合并到master分支\" class=\"headerlink\" title=\"16、使用Tompson用户登录 gitlab web ，找到“合并请求” ，然后将dev分支合并到master分支\"></a>16、使用Tompson用户登录 gitlab web ，找到“合并请求” ，然后将dev分支合并到master分支</h3><p><img src=\"./assets/17.png\" alt=\"1\"></p>\n<p><img src=\"./assets/18.png\" alt=\"1\"></p>\n<h2 id=\"十、Gitlab-备份与恢复\"><a href=\"#十、Gitlab-备份与恢复\" class=\"headerlink\" title=\"十、Gitlab 备份与恢复\"></a>十、Gitlab 备份与恢复</h2><h3 id=\"1、查看系统版本和软件版本\"><a href=\"#1、查看系统版本和软件版本\" class=\"headerlink\" title=\"1、查看系统版本和软件版本\"></a>1、查看系统版本和软件版本</h3><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com gitlab]# cat /etc/redhat-release \nCentOS Linux release 7.3.1611 (Core) \n\n[root@qfedu.com gitlab]# cat /opt/gitlab/embedded/service/gitlab-rails/VERSION\n8.15.4\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2、数据备份\"><a href=\"#2、数据备份\" class=\"headerlink\" title=\"2、数据备份\"></a>2、数据备份</h3><h4 id=\"1、查看备份相关的配置项\"><a href=\"#1、查看备份相关的配置项\" class=\"headerlink\" title=\"1、查看备份相关的配置项\"></a>1、查看备份相关的配置项</h4><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\ngitlab_rails['manage_backup_path'] = true\ngitlab_rails['backup_path'] = \"/data/gitlab/backups\"\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>该项定义了默认备份出文件的路径，可以通过修改该配置，并执行 <strong>gitlab-ctl reconfigure 或者 gitlab-ctl  restart</strong> 重启服务生效。</p>\n<h4 id=\"2、执行备份命令进行备份\"><a href=\"#2、执行备份命令进行备份\" class=\"headerlink\" title=\"2、执行备份命令进行备份\"></a>2、执行备份命令进行备份</h4><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# /opt/gitlab/bin/gitlab-rake gitlab:backup:create \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"3、添加到-crontab-中定时执行\"><a href=\"#3、添加到-crontab-中定时执行\" class=\"headerlink\" title=\"3、添加到 crontab 中定时执行\"></a>3、添加到 crontab 中定时执行</h4><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# crontab -e\n0 2 * * * bash /opt/gitlab/bin/gitlab-rake gitlab:backup:create\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>可以到/data/gitlab/backups找到备份包，解压查看，会发现备份的还是比较全面的，数据库、repositories、build、upload等分类还是比较清晰的。</p>\n<h4 id=\"4、设置备份保留时长\"><a href=\"#4、设置备份保留时长\" class=\"headerlink\" title=\"4、设置备份保留时长\"></a>4、设置备份保留时长</h4><p>防止每天执行备份，有目录被爆满的风险，打开/etc/gitlab/gitlab.rb配置文件，找到如下配置：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\ngitlab_rails['backup_keep_time'] = 604800\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>设置备份保留7天（7<em>3600</em>24=604800），秒为单位，如果想增大或减小，可以直接在该处配置，并通过gitlab-ctl restart 重启服务生效。</p>\n<p>备份完成，会在备份目录中生成一个当天日期的tar包。</p>\n<h3 id=\"3、数据恢复\"><a href=\"#3、数据恢复\" class=\"headerlink\" title=\"3、数据恢复\"></a>3、数据恢复</h3><h4 id=\"1、安装部署-gitlab-server\"><a href=\"#1、安装部署-gitlab-server\" class=\"headerlink\" title=\"1、安装部署 gitlab server\"></a>1、安装部署 gitlab server</h4><p> 具体步骤参见上面：gitlab server 搭建过程</p>\n<h4 id=\"2、恢复-gitlab\"><a href=\"#2、恢复-gitlab\" class=\"headerlink\" title=\"2、恢复 gitlab\"></a>2、恢复 gitlab</h4><h5 id=\"1、查看备份相关的配置项-1\"><a href=\"#1、查看备份相关的配置项-1\" class=\"headerlink\" title=\"1、查看备份相关的配置项\"></a>1、查看备份相关的配置项</h5><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\ngitlab_rails['backup_path'] = \"/data/gitlab/backups\"\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>修改该配置，定义了默认备份出文件的路径，并执行 <strong>gitlab-ctl reconfigure 或者 gitlab-ctl  restart</strong> 重启服务生效。</p>\n<h5 id=\"2、恢复前需要先停掉数据连接服务\"><a href=\"#2、恢复前需要先停掉数据连接服务\" class=\"headerlink\" title=\"2、恢复前需要先停掉数据连接服务\"></a>2、恢复前需要先停掉数据连接服务</h5><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# gitlab-ctl stop unicorn\n[root@qfedu.com ~]# gitlab-ctl stop sidekiq\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>如果是台新搭建的主机，不需要操作，理论上不停这两个服务也可以。停这两个服务是为了保证数据一致性。</li>\n</ul>\n<h5 id=\"3、同步备份文件到新服务器\"><a href=\"#3、同步备份文件到新服务器\" class=\"headerlink\" title=\"3、同步备份文件到新服务器\"></a>3、同步备份文件到新服务器</h5><p>将老服务器/data/gitlab/backups目录下的备份文件拷贝到新服务器上的/data/gitlab/backups</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com gitlab]# rsync -avz 1530773117_2019_03_05_gitlab_backup.tar 192.168.95.135:/data/gitlab/backups/ \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>注意权限：600权限是无权恢复的。 实验环境可改成了777，生产环境建议修改属主属组</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com backups]# pwd\n/data/gitlab/backups\n[root@qfedu.com backups]# chown -R git.git 1530773117_2019_03_05_gitlab_backup.tar \n[root@qfedu.com backups]# ll\ntotal 17328900\n-rwxrwxrwx 1 git git 17744793600 Jul  5 14:47 1530773117_2018_07_05_gitlab_backup.tar\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"4、执行命令进行恢复\"><a href=\"#4、执行命令进行恢复\" class=\"headerlink\" title=\"4、执行命令进行恢复\"></a>4、执行命令进行恢复</h5><p>后面再输入两次 yes 就完成恢复了。</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# gitlab-rake gitlab:backup:restore BACKUP=1530773117_2018_07_05_gitlab_backup.tar\n注意：backups 目录下保留一个备份文件可直接执行\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"5、恢复完成启动服务\"><a href=\"#5、恢复完成启动服务\" class=\"headerlink\" title=\"5、恢复完成启动服务\"></a>5、恢复完成启动服务</h5><p>恢复完成后，启动刚刚的两个服务，或者重启所有服务，再打开浏览器进行访问，发现数据和之前的一致：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@qfedu.com ~]# gitlab-ctl start unicorn\n[root@qfedu.com ~]# gitlab-ctl start sidekiq\n或\n[root@qfedu.com ~]# gitlab-ctl restart\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意：通过备份文件恢复gitlab必须保证两台主机的gitlab版本一致，否则会提示版本不匹配</strong></p>\n<h2 id=\"十一、利用Gitlab管理k8s集群\"><a href=\"#十一、利用Gitlab管理k8s集群\" class=\"headerlink\" title=\"十一、利用Gitlab管理k8s集群\"></a>十一、利用Gitlab管理k8s集群</h2><h3 id=\"1、权限设置\"><a href=\"#1、权限设置\" class=\"headerlink\" title=\"1、权限设置\"></a>1、权限设置</h3><p><img src=\"assets/image-20200821174547237.png\" alt=\"image-20200821174547237\"></p>\n<h3 id=\"2、获取k8s集群API地址\"><a href=\"#2、获取k8s集群API地址\" class=\"headerlink\" title=\"2、获取k8s集群API地址\"></a>2、获取k8s集群API地址</h3><pre class=\"line-numbers language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\"># kubectl cluster-info | grep 'Kubernetes master' | awk '/http/ &amp;#123;print $NF&amp;#125;'</span>\nhttps<span class=\"token punctuation\">:</span>//192.168.19.200<span class=\"token punctuation\">:</span><span class=\"token number\">6443</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"3、获取k8s集群默认CA证书\"><a href=\"#3、获取k8s集群默认CA证书\" class=\"headerlink\" title=\"3、获取k8s集群默认CA证书\"></a>3、获取k8s集群默认CA证书</h3><pre><code>[root@master ~]# kubectl get secrets\nNAME                  TYPE                                  DATA   AGE\ndefault-token-cvfqx   kubernetes.io/service-account-token   3      3d21h\n</code></pre>\n<p>default-token-cvfqx 为上面获取到的secrets的名称，用以下命令查看证书</p>\n<pre><code>[root@master ~]# kubectl get secret default-token-cvfqx  -o jsonpath=&quot;&#123;[&#39;data&#39;][&#39;ca\\.crt&#39;]&#125;&quot; | base64 --decode\n-----BEGIN CERTIFICATE-----\nMIICyDCCAbCgAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl\ncm5ldGVzMB4XDTIwMDgxNzA5MjAwMFoXDTMwMDgxNTA5MjAwMFowFTETMBEGA1UE\nAxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANIM\niOGHeolaxkE+kqZtc8kDbGFhwqGxNxg4orbIjrz//Z6vrgqo2COn2NjKrVM11bmz\nVhHPCruc3snfTLIS+/Z6gZqgpw5ruX8OjfH4nhr9npKxdBon3soa10EovPwMz1KW\nlaqbuLKTbtTm+oCtAKYXUlzqrFGR//GW2D3bjl1QGOPbAR0pggdxSpPo6oUgtEQJ\nQAsNOJ40qMjevi3fnrNDrMqmcNKlSlkw8+Gf4TqM1EfAERRHiEcb/W3hOGWV0gdm\nvaq7CE/ENeD1O11NE76BMmk5WO0u6ot4OmP35TTlx8K0N/WPyq76RlH7somiIb8S\n1NpAzg+9K0vv1QmILScCAwEAAaMjMCEwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB\n/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAEVgIlTFDoFhb3KA0RMVjckgsP3O\nOB7vTEws6w9ZDGJsNlbbCa15f8q3VmERSkfjAhfG4I9gb4KI0CM5Xt3JhU76GWsO\nZXHDfK7AzDGpLPUxlygkK7c7XCES/GEJe5agBxQyCo2pAvcj/nb+JIBeSh8JcG05\npzPhL11it9hDqmS5k92+63xGs/SDEzXEbBVMnyZWiv+AOHlO1/IFofUD3VHcSRMY\nwH5j6Irc0p0XTnFg+GHBpqjxwMWxP6IxdVrsOWUALM5oOJYn4aJQy5kSpJFkwNW8\nxDvVgtOWq5P9fVfnE4Am0LI/DevzYtcr3O9hUmCfEOnF0hC0n4ghYOPqiB4=\n-----END CERTIFICATE-----\n</code></pre>\n<h3 id=\"4、设置rbac\"><a href=\"#4、设置rbac\" class=\"headerlink\" title=\"4、设置rbac\"></a>4、设置rbac</h3><pre><code>[root@master ~]# vim gitlab-admin-service-account.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: gitlab-admin\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: gitlab-admin\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: gitlab-admin\n  namespace: kube-system\n\n[root@master ~]# kubectl apply -f gitlab-admin-service-account.yaml\nserviceaccount/gitlab-admin created\nclusterrolebinding.rbac.authorization.k8s.io/gitlab-admin created\n</code></pre>\n<h3 id=\"5、获取gitlab-admin的token\"><a href=\"#5、获取gitlab-admin的token\" class=\"headerlink\" title=\"5、获取gitlab-admin的token\"></a>5、获取gitlab-admin的token</h3><pre class=\"line-numbers language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\"># kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep gitlab-admin | awk '&amp;#123;print $1&amp;#125;')</span>\n<span class=\"token key atrule\">Name</span><span class=\"token punctuation\">:</span>         gitlab<span class=\"token punctuation\">-</span>admin<span class=\"token punctuation\">-</span>token<span class=\"token punctuation\">-</span>pmb2h\n<span class=\"token key atrule\">Namespace</span><span class=\"token punctuation\">:</span>    kube<span class=\"token punctuation\">-</span>system\n<span class=\"token key atrule\">Labels</span><span class=\"token punctuation\">:</span>       &lt;none<span class=\"token punctuation\">></span>\n<span class=\"token key atrule\">Annotations</span><span class=\"token punctuation\">:</span>  <span class=\"token key atrule\">kubernetes.io/service-account.name</span><span class=\"token punctuation\">:</span> gitlab<span class=\"token punctuation\">-</span>admin\n              <span class=\"token key atrule\">kubernetes.io/service-account.uid</span><span class=\"token punctuation\">:</span> bc9e1f94<span class=\"token punctuation\">-</span>088d<span class=\"token punctuation\">-</span>41f4<span class=\"token punctuation\">-</span>8e18<span class=\"token punctuation\">-</span>f31f1e9a9369\n\n<span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span>  kubernetes.io/service<span class=\"token punctuation\">-</span>account<span class=\"token punctuation\">-</span>token\n\nData\n====\n<span class=\"token key atrule\">ca.crt</span><span class=\"token punctuation\">:</span>     1025 bytes\n<span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span>  11 bytes\n<span class=\"token key atrule\">token</span><span class=\"token punctuation\">:</span>      eyJhbGciOiJSUzI1NiIsImtpZCI6InluNWZyY3V5T1BjNmFFQlpmRVBmOGFOenRmVkx1U0dCRDFhT0s5dEtGeXMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJnaXRsYWItYWRtaW4tdG9rZW4tcG1iMmgiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZ2l0bGFiLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYmM5ZTFmOTQtMDg4ZC00MWY0LThlMTgtZjMxZjFlOWE5MzY5Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmdpdGxhYi1hZG1pbiJ9.HGNf2_q_NS7ASk2ID6Y658PMpDIruFLr70VGk9I_dAP<span class=\"token punctuation\">-</span>rYt81FarjQhIQPn554SrtmiTp<span class=\"token punctuation\">-</span>iQ_j7slX_YRsGHlpo74VrBM2SirDToXobuSpe77v6MFx6Ol2UsUrxY0ulm_DAjOhZ16jlohPWlhkP0083KBfywwdpyF2oVdALQnT4sI1aDxgUHs<span class=\"token punctuation\">-</span>Pmg6D0NbdN0Ipb<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>s<span class=\"token punctuation\">-</span>Z59QKGr1XH4Pp0Qb9kze6KCJSWOk8<span class=\"token punctuation\">-</span>4pwtpQcT7K2MA1ucyEJB283D5ChQSddo9q7pBkEwq94TLy<span class=\"token punctuation\">-</span>ZbAhHgO89OqVIjY<span class=\"token punctuation\">-</span>3H<span class=\"token punctuation\">-</span>rb5Kd3meGrtGJZJscx7xnn6_DEvbBwp8DmCoM4vfFLUUow\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>6、添加k8s集群</p>\n<p><img src=\"assets/image-20200821180353378.png\" alt=\"image-20200821180353378\"></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://testcabana.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://testcabana.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://testcabana.github.io/","title":"前去学习"}],"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}]}},"excerpt":"","more":"<h1 id=\"第1天-分布式版本控制系统\"><a href=\"#第1天-分布式版本控制系统\" class=\"headerlink\" title=\"第1天-分布式版本控制系统\"></a>第1天-分布式版本控制系统</h1><h2 id=\"一、Git、Github、Gitlab-的区别\"><a href=\"#一、Git、Github、Gitlab-的区别\" class=\"headerlink\" title=\"一、Git、Github、Gitlab 的区别\"></a>一、Git、Github、Gitlab 的区别</h2><p>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>\n<p>是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p>\n<p>Github是在线的基于Git的代码托管服务。 GitHub是2008年由Ruby on Rails编写而成。GitHub同时提供付费账户和免费账户。这两种账户都可以创建公开的代码仓库，只有付费账户可以创建私有的代码仓库。 Gitlab解决了这个问题, 可以在上面创建免费的私人repo。 </p>\n<p>git            是一套软件 可以做本地私有仓库</p>\n<p>github   本身是一个代码托管网站   公有和私有仓库(收费)   不能做本地私有仓库</p>\n<p>gitlab     本身也是一个代码托管的网站 功能上和github没有区别   公有和私有仓库（免费）  可以部署本地私有仓库</p>\n<h2 id=\"二、Git-与-SVN-区别\"><a href=\"#二、Git-与-SVN-区别\" class=\"headerlink\" title=\"二、Git 与 SVN 区别\"></a>二、Git 与 SVN 区别</h2><p>GIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。</p>\n<p>如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。</p>\n<p><strong>Git 与 SVN 区别</strong></p>\n<ol>\n<li>Git是分布式的，svn不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。</li>\n<li>GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。</li>\n<li>GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。</li>\n<li>GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。</li>\n<li>GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li>\n</ol>\n<p>git   是分布式的版本控制器  没有客户端和服务器端的概念</p>\n<p>svn 它是C/S结构的版本控制器  有客户端和服务器端  服务器如果宕机而且代码没有备份的情况下  完整代码就会丢失</p>\n<h2 id=\"三、部署Git-服务\"><a href=\"#三、部署Git-服务\" class=\"headerlink\" title=\"三、部署Git 服务\"></a>三、部署Git 服务</h2><p><strong>创建git仓库</strong></p>\n<p>git-server上的操作：</p>\n<pre><code>[root@qfedu.com ~]# yum install git git-core gitweb -y\n[root@qfedu.com ~]# useradd git\n[root@qfedu.com ~]# passwd git\n[root@qfedu.com ~]# mkdir /git-root/\n[root@qfedu.com ~]# cd /git-root/\n[root@qfedu.com git-root]# git init --bare shell.git\nInitialized empty Git repository in /git-root/shell.git/\n注意：\ngit init 和 git init --bare 的区别:\n使用--bare选项时,不再生成.git目录,而是只生成.git目录下面的版本历史记录文件,这些版本历史记录文件也不再存放在.git目录下面,而是直接存放在版本库的根目录下面.\n用&quot;git init&quot;初始化的版本库用户也可以在该目录下执行所有git方面的操作。但别的用户在将更新push上来的时候容易出现冲突。\n使用”git init --bare”方法创建一个所谓的裸仓库，之所以叫裸仓库是因为这个仓库只保存git历史提交的版本信息，而不允许用户在上面进行各种git操作，如果你硬要操作的话，只会得到下面的错误（”This operation must be run in a work tree”）这个就是最好把远端仓库初始化成bare仓库的原因\n\n[root@qfedu.com git-root]# chown -R git:git shell.git\n</code></pre>\n<p><strong>git仓库测试</strong></p>\n<p>git-client上的操作：</p>\n<pre><code class=\"shell\">[root@qfedu.com ~]# ssh-keygen\n[root@qfedu.com ~]# ssh-copy-id git@192.168.1.178\n\n[root@qfedu.com shell]# git config --global user.email &quot;you@example.com&quot;\n[root@qfedu.com shell]# git config --global user.name &quot;Your Name&quot;\n\n[root@qfedu.com ~]# git clone git@192.168.1.178:/git-root/shell.git\n[root@qfedu.com ~]# ls\nrh  shell\n[root@qfedu.com ~]# cd shell/\n[root@qfedu.com shell]# vim test.sh\n[root@qfedu.com shell]# git add test.sh\n\n[root@qfedu.com shell]# git commit -m &#39;first commit&#39;\n[master (root-commit) 33c5fbf] first commit\n 1 file changed, 2 insertions(+)\n create mode 100644 test1.sh\n[root@qfedu.com shell]# git push origin master\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 230 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo git@192.168.1.178:/git-root/shell.git\n * [new branch]      master -&gt; master\n</code></pre>\n<h2 id=\"四、Git工作流程\"><a href=\"#四、Git工作流程\" class=\"headerlink\" title=\"四、Git工作流程\"></a>四、Git工作流程</h2><p>一般工作流程如下：</p>\n<ul>\n<li><p>克隆 Git 资源作为工作目录。</p>\n</li>\n<li><p>在克隆的资源上添加或修改文件。 </p>\n</li>\n<li><p>如果其他人修改了，你可以更新资源。</p>\n</li>\n<li><p>在提交前查看修改。</p>\n</li>\n<li><p>提交修改。</p>\n</li>\n<li><p>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</p>\n<p>　　Git 的工作流程示意图：</p>\n</li>\n</ul>\n<p><img src=\"assets/805129-20160710102658467-1520443599.png\" alt=\"img\"></p>\n<h2 id=\"五、Git基本概念\"><a href=\"#五、Git基本概念\" class=\"headerlink\" title=\"五、Git基本概念\"></a>五、Git基本概念</h2><ul>\n<li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li>\n<li><strong>暂存区：</strong>英文叫stage, 或index。一般存放在”git目录”下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li>\n<li><strong>版本库：</strong>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li>\n</ul>\n<p>　　工作区、版本库中的暂存区和版本库之间的关系的示意图：</p>\n<p><img src=\"assets/805129-20160710103123608-1172715931.jpg\" alt=\"img\"></p>\n<ul>\n<li>　　图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage, index），标记为 “master” 的是 master 分支所代表的目录树。 </li>\n</ul>\n<ul>\n<li>　　图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个”游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。 </li>\n</ul>\n<ul>\n<li>　　图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下，里面包含了创建的各种对象及内容。 </li>\n</ul>\n<ul>\n<li>　　当对工作区修改（或新增）的文件执行 “git add” 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。 </li>\n</ul>\n<ul>\n<li>　　当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。 </li>\n</ul>\n<ul>\n<li>　　当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。 </li>\n</ul>\n<ul>\n<li>　　当执行 “git rm –cached <file>“ 命令时，会直接从暂存区删除文件，工作区则不做出改变。 </li>\n</ul>\n<ul>\n<li>　　当执行 “git checkout .” 或者 “git checkout – <file>“ 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。 </li>\n</ul>\n<ul>\n<li>　　当执行 “git checkout HEAD .” 或者 “git checkout HEAD <file>“ 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</li>\n</ul>\n<h2 id=\"六、Git-客户端安装使用\"><a href=\"#六、Git-客户端安装使用\" class=\"headerlink\" title=\"六、Git 客户端安装使用\"></a>六、Git 客户端安装使用</h2><h3 id=\"1、-Git-安装配置\"><a href=\"#1、-Git-安装配置\" class=\"headerlink\" title=\"1、 Git 安装配置\"></a>1、 Git 安装配置</h3><pre><code class=\"shell\">[root@qfedu.com ~]# yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n[root@qfedu.com ~]# yum -y install git git-all git-core\n[root@qfedu.com ~]# git --version\ngit version 2.18.4\n</code></pre>\n<hr>\n<h3 id=\"2、Git-配置\"><a href=\"#2、Git-配置\" class=\"headerlink\" title=\"2、Git 配置\"></a>2、Git 配置</h3><p>Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。</p>\n<p>这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</p>\n<ul>\n<li><code>/etc/gitconfig</code> 文件：系统中对所有用户都普遍适用的配置。若使用 <code>git config</code> 时用 <code>--system</code> 选项，读写的就是这个文件。</li>\n<li><code>~/.gitconfig</code> 文件：用户目录下的配置文件只适用于该用户。若使用 <code>git config</code> 时用 <code>--global</code> 选项，读写的就是这个文件。</li>\n<li>当前项目的 Git 目录中的配置文件（也就是工作目录中的 <code>.git/config</code> 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 <code>.git/config</code> 里的配置会覆盖 <code>/etc/gitconfig</code> 中的同名变量。</li>\n</ul>\n<h4 id=\"1、Git-用户信息\"><a href=\"#1、Git-用户信息\" class=\"headerlink\" title=\"1、Git 用户信息\"></a>1、Git 用户信息</h4><p>配置个人的用户名称和电子邮件地址：</p>\n<pre><code class=\"shell\">[root@qfedu.com ~]# git config --global user.name &quot;qfedu&quot;\n[root@qfedu.com ~]# git config --global user.email test@qq.com\n</code></pre>\n<p>如果用了 <strong>–global</strong> 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。</p>\n<p>如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p>\n<h4 id=\"2、文本编辑器\"><a href=\"#2、文本编辑器\" class=\"headerlink\" title=\"2、文本编辑器\"></a>2、文本编辑器</h4><p>设置Git默认使用的文本编辑器, 一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置</p>\n<pre><code class=\"shell\">[root@qfedu.com ~]# git config --global core.editor emacs\n</code></pre>\n<h4 id=\"3、差异分析工具\"><a href=\"#3、差异分析工具\" class=\"headerlink\" title=\"3、差异分析工具\"></a>3、差异分析工具</h4><p>还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：</p>\n<pre><code class=\"shell\">[root@qfedu.com ~]# git config --global merge.tool vimdiff\n</code></pre>\n<p>Git 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。</p>\n<p>当然，你也可以指定使用自己开发的工具</p>\n<h4 id=\"4、查看配置信息\"><a href=\"#4、查看配置信息\" class=\"headerlink\" title=\"4、查看配置信息\"></a>4、查看配置信息</h4><p>要检查已有的配置信息，可以使用 git config –list 命令：</p>\n<pre><code class=\"shell\">[root@qfedu.com ~]# git config --list\nhttp.postbuffer=2M\nuser.name=runoob\nuser.email=test@runoob.com\n</code></pre>\n<p>有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。</p>\n<p>这些配置我们也可以在 <strong>~/.gitconfig</strong> 或 <strong>/etc/gitconfig</strong> 看到，如下所示：</p>\n<pre><code class=\"shell\">[root@qfedu.com ~]# vim ~/.gitconfig \n</code></pre>\n<p>显示内容如下所示：</p>\n<pre><code class=\"shell\">[http]\n    postBuffer = 2M\n[user]\n    name = git\n    email = test@qfedu.com.com\n</code></pre>\n<p>也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：</p>\n<pre><code class=\"shell\">[root@qfedu.com ~]# git config user.name\ngit\n</code></pre>\n<h3 id=\"3、Git-使用\"><a href=\"#3、Git-使用\" class=\"headerlink\" title=\"3、Git 使用\"></a>3、Git 使用</h3><h4 id=\"1、ssh-链接\"><a href=\"#1、ssh-链接\" class=\"headerlink\" title=\"1、ssh 链接\"></a>1、ssh 链接</h4><p>客户机上产生公钥上传到gitlab的SSH-Keys里，git clone下载和git push上传都没问题，这种方式很安全</p>\n<h4 id=\"2、http-链接（两种方式实现）\"><a href=\"#2、http-链接（两种方式实现）\" class=\"headerlink\" title=\"2、http 链接（两种方式实现）\"></a>2、http 链接（两种方式实现）</h4><h5 id=\"1、修改代码里的-git-config-文件添加登录用户名密码\"><a href=\"#1、修改代码里的-git-config-文件添加登录用户名密码\" class=\"headerlink\" title=\"1、修改代码里的 .git/config 文件添加登录用户名密码\"></a>1、修改代码里的 .git/config 文件添加登录用户名密码</h5><pre><code class=\"shell\">[root@qfedu.com ~]# cd .git\n[root@qfedu.com ~]# cat config\n[core]\nrepositoryformatversion = 0\nfilemode = true\nbare = false\nlogallrefupdates = true\n[remote &quot;origin&quot;]\nfetch = +refs/heads/*:refs/remotes/origin/*\nurl = http://username:password@qfedu.com@172.17.0.39:sauser/ansible.git\n[branch &quot;master&quot;]\nremote = origin\nmerge = refs/heads/master\n</code></pre>\n<h5 id=\"2、-执行命令设置登录用户和密码\"><a href=\"#2、-执行命令设置登录用户和密码\" class=\"headerlink\" title=\"2、 执行命令设置登录用户和密码\"></a>2、 执行命令设置登录用户和密码</h5><pre><code class=\"shell\"># cd到根目录，执行\n[root@qfedu.com ~]# git config --global credential.helper store  # 执行之后会在.gitconfig文件中多添加以下选项\n  [credential]         \n          helper = store\n# cd到项目目录，执行git pull命令，会提示输入账号密码。输完这一次以后就不再需要，并且会在根目录生成一个.git-credentials文件\n[root@qfedu.com ~]# git pull \n  Username for &#39;http://172.17.0.39:sauser/ansible.git&#39;: \n  xxxx@xxxx.com Password for &#39;https://xxxx@xxxx.com@172.17.0.39:sauser/ansible.git&#39;:\n[root@qfedu.com ~]# cat .git-credentials\n  https://Username:Password@qfedu.com.oschina.net\n# 之后pull/push代码都不再需要输入账号密码了\n</code></pre>\n<h4 id=\"3、设置身份验证\"><a href=\"#3、设置身份验证\" class=\"headerlink\" title=\"3、设置身份验证\"></a>3、设置身份验证</h4><p><strong>注意：</strong>设定本机用户名，绑定邮箱，让远程服务器知道机器的身份</p>\n<pre><code class=\"shell\">[root@qfedu.com ~]# git config --global user.name &quot;user_name&quot; \n[root@qfedu.com ~]# git config --global user.email &quot;XXXXX@XX.com&quot;\n</code></pre>\n<h4 id=\"4、本地项目与远程服务器项目之间的交互\"><a href=\"#4、本地项目与远程服务器项目之间的交互\" class=\"headerlink\" title=\"4、本地项目与远程服务器项目之间的交互\"></a>4、本地项目与远程服务器项目之间的交互</h4><p>1、如果你没有最新的代码，希望从头开始</p>\n<pre><code class=\"shell\">[root@qfedu.com ~]# git clone git@XXX.git      # 这里是项目的地址（可从项目主页复制），将远程服务器的内容完全复制过来 \n[root@qfedu.com ~]# cd BGBInspector_V01        # clone 之后进入该项目的文件夹 \n[root@qfedu.com ~]# touch　README.md           # 新建readme文件 \n[root@qfedu.com ~]# git add README.md          # 将新的文件添加到git的暂存区 \n[root@qfedu.com ~]# git commit -m ‘Its note：add a readme file’ # 将暂存区的文件提交到某一个版本保存下来，并加上注释 \n[root@qfedu.com ~]# git push -u origin master  # 将本地的更改提交到远程服务器\n</code></pre>\n<p>2、如果你已经有一个新版代码，希望直接把本地的代码替换到远程服务器</p>\n<pre><code class=\"shell\">[root@qfedu.com ~]# cd existing_folder          #进入代码存在的文件夹，或者直接在该文件夹打开\n[root@qfedu.com ~]# git init           # 初始化 \n[root@qfedu.com ~]# git remote add origin git@master:/git-test/shell.git  #添加远程项目&quot;shell&quot;库的地址（可从项目主页复制） ,前提是事先需要先在git远程服务器上创建相应的裸库&quot;shell&quot;\n[root@qfedu.com ~]# git add .                   #添加该文件夹中所有的文件到git的暂存区 \n[root@qfedu.com ~]# git commit -m ‘note’        #提交所有代码到本机的版本库 \n[root@qfedu.com ~]# git push -u origin master   #将本地的更改提交到远程服务器\n</code></pre>\n<ul>\n<li><p>git 中 clone过来的时候，git 不会对比本地和服务器的文件，也就不会有冲突，</p>\n</li>\n<li><p>建议确定完全覆盖本地的时候用 clone，不确定会不会有冲突的时候用 git pull，将远程服务器的代码download下来</p>\n</li>\n<li><p>git pull=git fetch+git merge</p>\n<p>  实验如下：</p>\n<pre><code>本地代码内容如下：\n[root@node1 shell]# cat mem.sh \nfree -m | awk &#39;NR==2&#123;print $4&#125;&#39;\necho hello\necho ni hao\n\n远程Git服务器代码内容如下：\n[root@node1 shell]# cat mem.sh \nfree -m | awk &#39;NR==2&#123;print $4&#125;&#39;\necho hello\necho ni hao\necho ha ha\n\n本地机器做fetch操作：\n[root@node1 shell]# git fetch origin master:test\nremote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 0 (delta 0)\nUnpacking objects: 100% (3/3), done.\nFrom master:/git-test/shell\n * [new branch]      master     -&gt; test\n   b522245..10f9569  master     -&gt; origin/master\n\nfetch是把远程代码作为本地的一个其他分支下载到本地，并不更新本地分支，这里的命令是把远程的”master“分支下载到本地作为一个新的分支”test“存在\n\n查看本地文件并没有发生变化\n[root@node1 shell]# ls  \nmem.sh\n[root@node1 shell]# cat mem.sh \nfree -m | awk &#39;NR==2&#123;print $4&#125;&#39;\necho hello\necho ni hao\n\n用diff查看本地master分支和fetch下来的test分支有什么区别：\n[root@node1 shell]# git diff master test\ndiff --git a/mem.sh b/mem.sh\nindex 7ce0803..c0c8cef 100644\n--- a/mem.sh\n+++ b/mem.sh\n@@ -1,3 +1,4 @@\n free -m | awk &#39;NR==2&#123;print $4&#125;&#39;\n echo hello\n echo ni hao\n+echo ha ha\n\n如果发现fetch下来的代码没什么问题，可以选择和本地分支进行合并\n[root@node1 shell]# git merge \nUpdating eb8645c..10f9569\nFast-forward\n mem.sh | 1 +\n 1 file changed, 1 insertion(+)\n[root@node1 shell]# cat mem.sh \nfree -m | awk &#39;NR==2&#123;print $4&#125;&#39;\necho hello\necho ni hao\necho ha ha\n</code></pre>\n</li>\n</ul>\n<h4 id=\"5、常用的git-命令\"><a href=\"#5、常用的git-命令\" class=\"headerlink\" title=\"5、常用的git 命令\"></a>5、常用的git 命令</h4><p><img src=\"assets/011500266295799.jpg\" alt=\"img\"></p>\n<pre><code class=\"shell\">[root@qfedu.com ~]# git init                      # 初始化 \n[root@qfedu.com ~]# git add main.cpp              # 将某一个文件添加到暂存区 \n[root@qfedu.com ~]# git add .                     # 将文件夹下的所有的文件添加到暂存区 \n[root@qfedu.com ~]# git commit -m ‘note‘          # 将暂存区中的文件保存成为某一个版本 \n[root@qfedu.com ~]# git log                       # 查看所有的版本日志 \n[root@qfedu.com ~]# git status                    # 查看现在暂存区的状况 \n[root@qfedu.com ~]# git diff                      # 查看现在文件与上一个提交-commit版本的区别 \n[root@qfedu.com ~]# git reset --hard HEAD^        # 回到上一个版本 \n[root@qfedu.com ~]# git reset --hard XXXXX        # XXX为版本编号，回到某一个版本 \n[root@qfedu.com ~]# git pull origin master        # 从主分支pull到本地 \n[root@qfedu.com ~]# git push -u origin master     # 从本地push到主分支 \n[root@qfedu.com ~]# git pull                      # pull默认主分支 \n[root@qfedu.com ~]# git push                      # push默认主分支 ...\n</code></pre>\n<h4 id=\"6、版本穿梭\"><a href=\"#6、版本穿梭\" class=\"headerlink\" title=\"6、版本穿梭\"></a>6、版本穿梭</h4><h5 id=\"1、版本回退\"><a href=\"#1、版本回退\" class=\"headerlink\" title=\"1、版本回退\"></a>1、版本回退</h5><pre><code class=\"shell\"># 用 git log 命令查看：\n# 每一个提交的版本都唯一对应一个 commit 版本号，\n# 使用 git reset 命令退到上一个版本：\n[root@qfedu.com ~]# git reset --hard HEAD^\n</code></pre>\n<pre><code class=\"shell\">[root@qfedu.com ~]# git reflog                    # 查看命令历史，以便确定要回到哪个版本\n[root@qfedu.com ~]# git reset --hard commit_id    # 比如git reset --hard 3628164（不用全部输入，输入前几位即可）\n</code></pre>\n<h5 id=\"2、分支管理\"><a href=\"#2、分支管理\" class=\"headerlink\" title=\"2、分支管理\"></a>2、分支管理</h5><p>1、创建分支    </p>\n<pre><code class=\"shell\">[root@qfedu.com ~]# git checkout -b dev     #创建dev分支，然后切换到dev分支\n[root@qfedu.com ~]# git checkout            #命令加上-b参数表示创建并切换，相当于以下两条命令：\n[root@qfedu.com ~]# git branch dev git checkout dev\n[root@qfedu.com ~]# git branch              #命令查看当前分支,\n[root@qfedu.com ~]# git branch              #命令会列出所有分支，当前分支前面会标一个*号\n[root@qfedu.com ~]# git branch * dev   master\n[root@qfedu.com ~]# git add readme.txt git commit -m &quot;branch test&quot;  # 在dev分支上正常提交.\n</code></pre>\n<p>2、分支切换</p>\n<pre><code class=\"shell\">[root@qfedu.com ~]# git checkout master     #切换回master分支\n# 查看一个readme.txt文件，刚才添加的内容不见了，因为那个提交是在dev分支上，而master分支此刻的提交点并没有变  \n</code></pre>\n<p>3、合并分支</p>\n<pre><code class=\"shell\">[root@qfedu.com ~]# git merge dev           #把dev分支的工作成果合并到master分支上\n[root@qfedu.com ~]# git merge               #命令用于合并指定分支到当前分支。\n# 合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。\n</code></pre>\n<pre><code class=\"shell\">注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。\n当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。\n</code></pre>\n<pre><code class=\"shell\">[root@qfedu.com ~]# git branch -d dev       #删除dev分支了：\n删除后，查看branch，就只剩下master分支了.\n</code></pre>\n<h5 id=\"3、解决冲突\"><a href=\"#3、解决冲突\" class=\"headerlink\" title=\"3、解决冲突\"></a>3、解决冲突</h5><pre><code class=\"shell\">[root@qfedu.com ~]# git checkout -b feature1        # 创建新的feature1分支\n# 修改readme.txt最后一行，改为：\nCreating a new branch is quick AND simple.\n\n[root@qfedu.com ~]# git add readme.txt              # 在feature1分支上提交\n[root@qfedu.com ~]# git commit -m &quot;AND simple&quot;\n[root@qfedu.com ~]# git checkout master             #切换到master分支\nSwitched to branch &#39;master&#39; Your branch is ahead of &#39;origin/master&#39; by 1 commit.\nGit还会自动提示我们当前master分支比远程的master分支要超前1个提交。\n\n在master分支上把readme.txt文件的最后一行改为：\nCreating a new branch is quick &amp; simple.\n[root@qfedu.com ~]# git add readme.txt \n[root@qfedu.com ~]# git commit -m &quot;&amp; simple&quot;\n\n现在，master分支和feature1分支各自都分别有新的提交\n这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：\ngit merge feature1 Auto-merging readme.txt CONFLICT (content): \nMerge conflict in readme.txt Automatic merge failed; \nfix conflicts and then commit the result.\n</code></pre>\n<pre><code class=\"shell\">readme.txt文件存在冲突，必须手动解决冲突后再提交。\n[root@qfedu.com ~]# git status 可以显示冲突的文件;\n直接查看readme.txt的内容：\nGit is a distributed version control system.\nGit is free software distributed under the GPL. \nGit has a mutable index called stage. \nGit tracks changes of files. \n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD Creating a new branch is quick &amp; simple. ======= Creating a new branch is quick AND simple. &gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1\nGit用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，我们修改后保存再提交：\n[root@qfedu.com ~]# git add readme.txt  \n[root@qfedu.com ~]# git commit -m &quot;conflict fixed&quot; \n[master 59bc1cb] conflict fixed\n最后，删除feature1分支：\n[root@qfedu.com ~]# git branch -d feature1 \nDeleted branch feature1 (was 75a857c).\n</code></pre>\n<h2 id=\"七、Github-远程仓库\"><a href=\"#七、Github-远程仓库\" class=\"headerlink\" title=\"七、Github 远程仓库\"></a>七、Github 远程仓库</h2><p>1、github.com 注册账户</p>\n<p>2、github 上创建仓库</p>\n<p>3、本地服务器生成 ssh 公钥</p>\n<pre><code class=\"shell\">[root@qfedu.com ~]# ssh-keygen -t rsa -C &#39;meteor@163.com&#39;  # 邮箱要与github上注册的相同\n[root@qfedu.com ~]# cat .ssh/id_rsa.pub \nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVThfq4brrlsPGtAknVB0TLPx+7Dd3qlxTbSIrUOsGC5Y8JuNqVTlIntZB4oNj8cSQrWvec9CKm0a8o7WwaJIiqpxurz+YpQHP2KbapftKIxsX4hPf/z+p0El1U6arQa35/xmNsq+cJLH/bDdRG+EMDhuCBmjVZOlLj/hEdeIT6s56AnnCkaWoF+sq58KCF7Tk54jRbs/YiyE4SN7FuA70r+07sA/uj0+lmuk4E190KtQUELhjX/E9stivlqiRhxnKvVUqXDywsjfM8Rtvbi4Fg9R8Wt9fpd4QwnWksYUoR5qZJFYXO4hSZrUnSMruPK14xXjDJcFDcP2eHIzKgLD1 meteor@163.com\n</code></pre>\n<p>4、 github 添加 ssh 公钥 </p>\n<p>复制以上的公钥，在 github 中添加ssh key</p>\n<p>5、测试连接</p>\n<pre><code class=\"shell\">[root@qfedu.com ~]# yum install git\n........\n[root@qfedu.com ~]# ssh -T git@qfedu.comhub.com\nThe authenticity of host &#39;github.com (13.250.177.223)&#39; can&#39;t be established.\nRSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.\nRSA key fingerprint is MD5:16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added &#39;github.com,13.250.177.223&#39; (RSA) to the list of known hosts.\nHi meteor! You&#39;ve successfully authenticated, but GitHub does not provide shell access.\n[root@qfedu.com ~]#\n</code></pre>\n<p>6、连接远程仓库（创建一个测试存储库）</p>\n<p><img src=\"./assets/git_remote_method.png\" alt=\"it_remote_metho\"></p>\n<pre><code class=\"shell\"># 在 github 网站新建一个仓库，命名为linux\n~~~\n[root@qfedu.com ~]# cd /opt\n[root@qfedu.com ~]# mkdir linux\n[root@qfedu.com ~]# mkdir linux\n[root@qfedu.com ~]# cd linux\n~~~\n# git 初始化，然后做第一个基本的git操作(需要在github上创建存储库)\n[root@qfedu.com ~]# git init\n[root@qfedu.com ~]# touch README\n[root@qfedu.com ~]# git add README\n[root@qfedu.com ~]# git commit -m &#39;first commit&#39;\n[root@qfedu.com ~]# git remote add origin git@qfedu.comhub.com:userhub/linux.git\n~~~\n# 若出现origin已经存在的错误，删除origin\n[root@qfedu.com linux]# git remote rm origin\n# 现在继续执行push到远端\n~~~\n[root@qfedu.com linux]# git remote add origin git@qfedu.comhub.com:userhub/linux.git\n[root@qfedu.com linux]# git push -u origin master\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 205 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo git@qfedu.comhub.com:fakehydra/linux-.git\n * [new branch]      master -&gt; master\n分支 master 设置为跟踪来自 origin 的远程分支 master。\n# 注意\n# 设置存储库链接\n[root@qfedu.com ~]# git remote set-url origin git@qfedu.comhub.com:userhub/linux.git\n# 如果 push 失败，合并分支到 master 再 push\n[root@qfedu.com ~]# git pull --rebase origin master\n</code></pre>\n<h2 id=\"八、Gitlab-Server-部署\"><a href=\"#八、Gitlab-Server-部署\" class=\"headerlink\" title=\"八、Gitlab Server 部署\"></a>八、Gitlab Server 部署</h2><h3 id=\"1、环境配置\"><a href=\"#1、环境配置\" class=\"headerlink\" title=\"1、环境配置\"></a>1、环境配置</h3><p>关闭防火墙、SELinux</p>\n<p>开启邮件服务</p>\n<pre><code class=\"shell\">[root@qfedu.com ~]# systemctl start  postfix\n[root@qfedu.com ~]# systemctl enable postfix\n</code></pre>\n<h3 id=\"2、部署-Gitlab\"><a href=\"#2、部署-Gitlab\" class=\"headerlink\" title=\"2、部署 Gitlab\"></a>2、部署 Gitlab</h3><h4 id=\"1、安装-gitlab-依赖包\"><a href=\"#1、安装-gitlab-依赖包\" class=\"headerlink\" title=\"1、安装 gitlab 依赖包\"></a>1、安装 gitlab 依赖包</h4><pre><code class=\"shell\">centos7:\n[root@qfedu.com ~]# yum install -y curl openssh-server openssh-clients postfix cronie policycoreutils-python\n# gitlab-ce 10.x.x以后的版本需要依赖policycoreutils-python\n\ncentos8:\n[root@qfedu.com ~]# yum install -y curl openssh-server openssh-clients postfix cronie  policycoreutils-python-utils\n</code></pre>\n<h4 id=\"2、添加官方源\"><a href=\"#2、添加官方源\" class=\"headerlink\" title=\"2、添加官方源\"></a>2、添加官方源</h4><pre><code class=\"shell\">[root@qfedu.com ~]# curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash\n</code></pre>\n<p>因为官方源太慢，可以使用国内清华yum源，配置如下</p>\n<pre><code class=\"bash\">[root@qfedu.com ~]# vim /etc/yum.repos.d/gitlab-ce.repo\n[gitlab-ce]\nname=Gitlab CE Repository\nbaseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/\ngpgcheck=0\nenabled=1\n</code></pre>\n<h4 id=\"3、安装-Gitlab\"><a href=\"#3、安装-Gitlab\" class=\"headerlink\" title=\"3、安装 Gitlab\"></a>3、安装 Gitlab</h4><pre><code class=\"shell\">[root@qfedu.com ~]# yum -y install gitlab-ce                    # 自动安装最新版\n[root@qfedu.com ~]# yum -y install gitlab-ce-x.x.x                # 安装指定版本Gitlab\n</code></pre>\n<h4 id=\"4、配置-Gitlab\"><a href=\"#4、配置-Gitlab\" class=\"headerlink\" title=\"4、配置 Gitlab\"></a>4、配置 Gitlab</h4><h5 id=\"1、查看Gitlab版本\"><a href=\"#1、查看Gitlab版本\" class=\"headerlink\" title=\"1、查看Gitlab版本\"></a>1、查看Gitlab版本</h5><pre><code class=\"shell\">[root@qfedu.com ~]# head -1 /opt/gitlab/version-manifest.txt\ngitlab-ce 10.1.1\n</code></pre>\n<h5 id=\"2、Gitlab-配置登录链接\"><a href=\"#2、Gitlab-配置登录链接\" class=\"headerlink\" title=\"2、Gitlab 配置登录链接\"></a>2、Gitlab 配置登录链接</h5><pre><code class=\"shell\">#设置登录链接\n[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\n***\n## GitLab URL\n##! URL on which GitLab will be reachable.\n##! For more details on configuring external_url see:\n##! https://docs.gitlab.com/omnibus/settings/configuration.html#configuring-the-external-url-for-gitlab\n# 没有域名，可以设置为本机IP地址\nexternal_url &#39;http://172.17.0.61&#39;\n***\n[root@qfedu.com ~]# grep &quot;^external_url&quot; /etc/gitlab/gitlab.rb\nexternal_url &#39;http://172.17.0.61&#39;     #绑定监听的域名或IP\n</code></pre>\n<h5 id=\"3、初始化-Gitlab\"><a href=\"#3、初始化-Gitlab\" class=\"headerlink\" title=\"3、初始化 Gitlab\"></a>3、初始化 Gitlab</h5><p><strong>配置语言环境</strong></p>\n<p>gitlab要求语言环境为英文环境，必须切换，切换方法如下：</p>\n<pre><code>注意：可以先尝试以下方案\n    语言环境问题：如果碰到之后的解决方案如下，需要重新登录\n     [root@wing ~]# echo &quot;export LC_ALL=en_US.UTF-8&quot;  &gt;&gt;  /etc/profile \n\n如果上面的方案不可以，再使用下面的方案：     \n# yum install langpacks-zh_CN langpacks-en langpacks-en_GB -y\n# cat &gt; /etc/profile.d/locale.sh&lt;&lt;-EOF\n export LANG=en_US.UTF-8\n export LANGUAGE=en_US.UTF-8\n export LC_COLLATE=C\n export LC_CTYPE=en_US.UTF-8\n EOF\n# source /etc/profile.d/locale.sh\n\n退出终端重新登陆\n</code></pre>\n<p>第一次使用配置时间较长</p>\n<pre><code class=\"shell\">[root@qfedu.com ~]# gitlab-ctl reconfigure   \n.....\n</code></pre>\n<h5 id=\"4、启动-Gitlab-服务\"><a href=\"#4、启动-Gitlab-服务\" class=\"headerlink\" title=\"4、启动 Gitlab 服务\"></a>4、启动 Gitlab 服务</h5><pre><code class=\"shell\">[root@qfedu.com ~]# gitlab-ctl start\nok: run: gitaly: (pid 22896) 2922s\nok: run: gitlab-monitor: (pid 22914) 2921s\nok: run: gitlab-workhorse: (pid 22882) 2922s\nok: run: logrotate: (pid 22517) 2987s\nok: run: nginx: (pid 22500) 2993s\nok: run: node-exporter: (pid 22584) 2974s\nok: run: postgres-exporter: (pid 22946) 2919s\nok: run: postgresql: (pid 22250) 3047s\nok: run: prometheus: (pid 22931) 2920s\nok: run: redis: (pid 22190) 3053s\nok: run: redis-exporter: (pid 22732) 2962s\nok: run: sidekiq: (pid 22472) 3005s\nok: run: unicorn: (pid 22433) 3011s\n\n[git@qfedu.com ~]# lsof -i:80\nCOMMAND   PID       USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nnginx   22500       root    7u  IPv4  50923      0t0  TCP *:http (LISTEN)\nnginx   22501 gitlab-www    7u  IPv4  50923      0t0  TCP *:http (LISTEN)\n</code></pre>\n<h5 id=\"5、Gitlab-设置-HTTPS-方式-（缺少配置）\"><a href=\"#5、Gitlab-设置-HTTPS-方式-（缺少配置）\" class=\"headerlink\" title=\"5、Gitlab 设置 HTTPS 方式 （缺少配置）\"></a>5、Gitlab 设置 HTTPS 方式 （缺少配置）</h5><ul>\n<li>如果想要以上的 https 方式正常生效使用，则需要把 letsencrypt 自动生成证书的配置打开，这样在执行重新让配置生效命令 (gitlab-ctl reconfigure) 的时候会自动给域名生成免费的证书并自动在 gitlab 自带的 nginx 中加上相关的跳转配置，都是全自动的，非常方便。</li>\n</ul>\n<pre><code class=\"shell\">[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\nletsencrypt[&#39;enable&#39;] = true //如果因为这行报错，改成false即可\nletsencrypt[&#39;contact_emails&#39;] = [&#39;276267003@qq.com&#39;]     # 添加联系人的电子邮件地址\n</code></pre>\n<h5 id=\"6、Gitlab-添加smtp邮件功能\"><a href=\"#6、Gitlab-添加smtp邮件功能\" class=\"headerlink\" title=\"6、Gitlab 添加smtp邮件功能\"></a>6、Gitlab 添加smtp邮件功能</h5><pre><code class=\"shell\">[git@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\npostfix 并非必须的；根据具体情况配置，以 SMTP 的为例配置邮件服务器来实现通知；参考配置如下： \n### Email Settings\ngitlab_rails[&#39;gitlab_email_enabled&#39;] = true\ngitlab_rails[&#39;gitlab_email_from&#39;] = &#39;276267003@qq.com&#39;\ngitlab_rails[&#39;gitlab_email_display_name&#39;] = &#39;gitlab&#39;\ngitlab_rails[&#39;gitlab_email_reply_to&#39;] = &#39;276267003@qq.com&#39;\ngitlab_rails[&#39;gitlab_email_subject_suffix&#39;] = &#39;[gitlab]&#39;\ngitlab_rails[&#39;smtp_enable&#39;] = true\ngitlab_rails[&#39;smtp_address&#39;] = &quot;smtp.qq.com&quot;\ngitlab_rails[&#39;smtp_port&#39;] = 465\ngitlab_rails[&#39;smtp_user_name&#39;] = &quot;276267003@qq.com&quot;\ngitlab_rails[&#39;smtp_password&#39;] = &quot;kktohrvdryglbjjh&quot; #这是我的qq邮箱授权码\ngitlab_rails[&#39;smtp_domain&#39;] = &quot;smtp.qq.com&quot;\ngitlab_rails[&#39;smtp_authentication&#39;] = &quot;login&quot;\ngitlab_rails[&#39;smtp_enable_starttls_auto&#39;] = true\ngitlab_rails[&#39;smtp_tls&#39;] = true\n\n#修改配置后需要初始化配置，先关掉服务再重新初始化\n[git@qfedu.com ~]# gitlab-ctl stop\nok: down: gitaly: 0s, normally up\nok: down: gitlab-monitor: 1s, normally up\nok: down: gitlab-workhorse: 0s, normally up\nok: down: logrotate: 1s, normally up\nok: down: nginx: 0s, normally up\nok: down: node-exporter: 1s, normally up\nok: down: postgres-exporter: 0s, normally up\nok: down: postgresql: 0s, normally up\nok: down: prometheus: 0s, normally up\nok: down: redis: 0s, normally up\nok: down: redis-exporter: 1s, normally up\nok: down: sidekiq: 0s, normally up\nok: down: unicorn: 1s, normally up\n\n[git@qfedu.com ~]# gitlab-ctl reconfigure  \n......\n\n[git@qfedu.com ~]# gitlab-ctl start\nok: run: gitaly: (pid 37603) 0s\nok: run: gitlab-monitor: (pid 37613) 0s\nok: run: gitlab-workhorse: (pid 37625) 0s\nok: run: logrotate: (pid 37631) 0s\nok: run: nginx: (pid 37639) 1s\nok: run: node-exporter: (pid 37644) 0s\nok: run: postgres-exporter: (pid 37648) 1s\nok: run: postgresql: (pid 37652) 0s\nok: run: prometheus: (pid 37660) 1s\nok: run: redis: (pid 37668) 0s\nok: run: redis-exporter: (pid 37746) 0s\nok: run: sidekiq: (pid 37750) 1s\nok: run: unicorn: (pid 37757) 0s\n</code></pre>\n<h5 id=\"7、Gitlab-发送邮件测试\"><a href=\"#7、Gitlab-发送邮件测试\" class=\"headerlink\" title=\"7、Gitlab 发送邮件测试\"></a>7、Gitlab 发送邮件测试</h5><pre><code class=\"shell\">[git@qfedu.com ~]# gitlab-rails console \n[root@wing ~]# gitlab-rails console\n---------------------------------------------------------------------\n GitLab:       12.10.1 (e658772bd63) FOSS\n GitLab Shell: 12.2.0\n PostgreSQL:   11.7\n---------------------------------------------------------------------\nLoading production environment (Rails 6.0.2)\nirb(main):003:0&gt; \nirb(main):004:0&gt; Notify.test_email(&#39;276267003@qq.com&#39;, &#39;Message Subject&#39;, &#39;Message Body&#39;).deliver_now  //输入测试命令，回车\n\nNotify#test_email: processed outbound mail in 5.2ms\nDelivered mail 5eafceaa250a_1d063fb777add9a08601a@wing.mail (1430.1ms)\nDate: Mon, 04 May 2020 16:13:30 +0800\nFrom: gitlab &lt;276267003@qq.com&gt;\nReply-To: gitlab &lt;276267003@qq.com&gt;\nTo: 276267003@qq.com\nMessage-ID: &lt;5eafceaa250a_1d063fb777add9a08601a@wing.mail&gt;\nSubject: Message Subject\nMime-Version: 1.0\nContent-Type: text/html;\n charset=UTF-8\nContent-Transfer-Encoding: 7bit\nAuto-Submitted: auto-generated\nX-Auto-Response-Suppress: All\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;\n&lt;html&gt;&lt;body&gt;&lt;p&gt;Message Body&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\n\n=&gt; #&lt;Mail::Message:70056859616080, Multipart: false, Headers: &lt;Date: Mon, 04 May 2020 16:13:30 +0800&gt;, &lt;From: gitlab &lt;276267003@qq.com&gt;&gt;, &lt;Reply-To: gitlab &lt;276267003@qq.com&gt;&gt;, &lt;To: 276267003@qq.com&gt;, &lt;Message-ID: &lt;5eafceaa250a_1d063fb777add9a08601a@wing.mail&gt;&gt;, &lt;Subject: Message Subject&gt;, &lt;Mime-Version: 1.0&gt;, &lt;Content-Type: text/html; charset=UTF-8&gt;, &lt;Content-Transfer-Encoding: 7bit&gt;, &lt;Auto-Submitted: auto-generated&gt;, &lt;X-Auto-Response-Suppress: All&gt;&gt;\nirb(main):005:0&gt; \n</code></pre>\n<p>去qq邮箱web界面查看是否收到邮件</p>\n<p><img src=\"assets/image-20200504161843613.png\" alt=\"image-20200504161843613\"></p>\n<h3 id=\"3、Gitlab-的使用\"><a href=\"#3、Gitlab-的使用\" class=\"headerlink\" title=\"3、Gitlab 的使用\"></a>3、Gitlab 的使用</h3><p><strong>在浏览器中输入 <a href=\"http://192.168.1.178/\">http://192.168.1.178/</a> ，然后 change password:  ，并使用root用户登录 即可 (后续动作根据提示操作)</strong></p>\n<h4 id=\"1、Gitlab-命令行修改密码\"><a href=\"#1、Gitlab-命令行修改密码\" class=\"headerlink\" title=\"1、Gitlab 命令行修改密码\"></a>1、Gitlab 命令行修改密码</h4><pre><code class=\"shell\">[root@qfedu.com ~]# gitlab-rails console production\nirb(main):001:0&gt;user = User.where(id: 1).first      # id为1的是超级管理员\nirb(main):002:0&gt;user.password = &#39;yourpassword&#39;      # 密码必须至少8个字符\nirb(main):003:0&gt;user.save!                          # 如没有问题 返回true\nexit                                                 # 退出\n</code></pre>\n<h4 id=\"2、Gitlab服务管理\"><a href=\"#2、Gitlab服务管理\" class=\"headerlink\" title=\"2、Gitlab服务管理\"></a>2、Gitlab服务管理</h4><pre><code class=\"shell\">[root@qfedu.com ~]# gitlab-ctl start                        # 启动所有 gitlab 组件；\n[root@qfedu.com ~]# gitlab-ctl stop                         # 停止所有 gitlab 组件；\n[root@qfedu.com ~]# gitlab-ctl restart                      # 重启所有 gitlab 组件；\n[root@qfedu.com ~]# gitlab-ctl status                       # 查看服务状态；\n[root@qfedu.com ~]# gitlab-ctl reconfigure                  # 初始化服务；\n[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb               # 修改默认的配置文件；\n[root@qfedu.com ~]# gitlab-ctl tail                         # 查看日志；\n</code></pre>\n<h4 id=\"3、登陆-Gitlab\"><a href=\"#3、登陆-Gitlab\" class=\"headerlink\" title=\"3、登陆 Gitlab\"></a>3、登陆 Gitlab</h4><p><img src=\"./assets/1.png\" alt=\"1\"></p>\n<p><strong>如果需要手工修改nginx的port ，可以在gitlab.rb中设置 nginx[‘listen_port’] = 8000 ，然后再次 gitlab-ctl reconfigure即可</strong></p>\n<p><strong>登录 gitlab 如下所示(首次登陆设置 root 密码)：</strong><br><img src=\"./assets/2.1.png\" alt=\"1\"></p>\n<h4 id=\"4、创建项目组-group\"><a href=\"#4、创建项目组-group\" class=\"headerlink\" title=\"4、创建项目组 group\"></a>4、创建项目组 group</h4><p>组名为plat-sp ,<br><img src=\"./assets/2.2.png\" alt=\"1\"></p>\n<p><img src=\"./assets/3.png\" alt=\"1\"></p>\n<h4 id=\"5、去掉用户的自动注册功能（安全）\"><a href=\"#5、去掉用户的自动注册功能（安全）\" class=\"headerlink\" title=\"5、去掉用户的自动注册功能（安全）\"></a>5、去掉用户的自动注册功能（安全）</h4><p>admin are -&gt; settings -&gt; Sign-up Restrictions 去掉钩钩，然后拉到最下面保存，重新登录<br><img src=\"./assets/4.png\" alt=\"1\"></p>\n<h2 id=\"九、Gitlab-开发代码提交处理流程\"><a href=\"#九、Gitlab-开发代码提交处理流程\" class=\"headerlink\" title=\"九、Gitlab 开发代码提交处理流程\"></a>九、Gitlab 开发代码提交处理流程</h2><h3 id=\"1、公司代码提交合并流程\"><a href=\"#1、公司代码提交合并流程\" class=\"headerlink\" title=\"1、公司代码提交合并流程\"></a>1、公司代码提交合并流程</h3><ul>\n<li><p>  PM（项目主管/项目经理）在gitlab创建任务，分配给开发人员</p>\n</li>\n<li><p>  开发人员领取任务后，在本地使用git clone拉取代码库</p>\n</li>\n<li><p>  开发人员创建开发分支（git checkout -b dev），并进行开发</p>\n</li>\n<li><p>  开发人员完成之后，提交到本地仓库（git commit ）</p>\n</li>\n<li><p>  开发人员在gitlab界面上申请分支合并请求（Merge request）</p>\n</li>\n<li><p>  PM在gitlab上查看提交和代码修改情况，确认无误后，确认将开发人员的分支合并到主分支（master）</p>\n</li>\n<li><p>  开发人员在gitlab上Mark done确认开发完成，并关闭issue。这一步在提交合并请求时可以通过描述中填写”close #1”等字样，可以直接关闭issue</p>\n</li>\n</ul>\n<h3 id=\"2、创建项目管理用户-Tompson\"><a href=\"#2、创建项目管理用户-Tompson\" class=\"headerlink\" title=\"2、创建项目管理用户 Tompson\"></a>2、创建项目管理用户 Tompson</h3><p><img src=\"./assets/5.png\" alt=\"1\"><br>同样的方法，再创建 Eric 、Hellen 用户。用户添加完毕后，gitlab 会给用户发一封修改密码的邮件，各用户需要登录自己的邮箱，并点击相关的链接，设置新密码。</p>\n<h3 id=\"3、将-Tompson-用户添加到组中，指定T为本组的-owner\"><a href=\"#3、将-Tompson-用户添加到组中，指定T为本组的-owner\" class=\"headerlink\" title=\"3、将 Tompson 用户添加到组中，指定T为本组的 owner\"></a>3、将 Tompson 用户添加到组中，指定T为本组的 owner</h3><p><img src=\"./assets/6.png\" alt=\"1\"></p>\n<h3 id=\"4、同样的方法将用户Eric、Hellen-添加到组中，并指定为Developer\"><a href=\"#4、同样的方法将用户Eric、Hellen-添加到组中，并指定为Developer\" class=\"headerlink\" title=\"4、同样的方法将用户Eric、Hellen 添加到组中，并指定为Developer\"></a>4、同样的方法将用户Eric、Hellen 添加到组中，并指定为Developer</h3><p><img src=\"./assets/7.png\" alt=\"1\"></p>\n<h3 id=\"5、使用-Tompson-用户的身份与密码登录到-gitlab-界面中，并创建项目-Project\"><a href=\"#5、使用-Tompson-用户的身份与密码登录到-gitlab-界面中，并创建项目-Project\" class=\"headerlink\" title=\"5、使用 Tompson 用户的身份与密码登录到 gitlab 界面中，并创建项目 Project\"></a>5、使用 Tompson 用户的身份与密码登录到 gitlab 界面中，并创建项目 Project</h3><p><img src=\"./assets/10.png\" alt=\"1\"></p>\n<h3 id=\"6、指定项目的存储路径和项目名称\"><a href=\"#6、指定项目的存储路径和项目名称\" class=\"headerlink\" title=\"6、指定项目的存储路径和项目名称\"></a>6、指定项目的存储路径和项目名称</h3><p><img src=\"./assets/11.png\" alt=\"1\"></p>\n<p>把客户端的公钥添加到这里之后才会出现下图的内容</p>\n<p><img src=\"./assets/12.png\" alt=\"1\"></p>\n<h3 id=\"7、为项目创建-Dev分支\"><a href=\"#7、为项目创建-Dev分支\" class=\"headerlink\" title=\"7、为项目创建 Dev分支\"></a>7、为项目创建 Dev分支</h3><p>注意：因为版本的原因，需要先在项目里面添加一个文件，才能显示下图中创建分支的操作</p>\n<p><img src=\"./assets/13.png\" alt=\"1\"></p>\n<p><img src=\"./assets/14.png\" alt=\"1\"></p>\n<h3 id=\"8、在-client-上添加-Tompson-的用户\"><a href=\"#8、在-client-上添加-Tompson-的用户\" class=\"headerlink\" title=\"8、在 client 上添加 Tompson 的用户\"></a>8、在 client 上添加 Tompson 的用户</h3><pre><code class=\"shell\">[git@qfedu.com ~]# useradd Tompson\n[git@qfedu.com ~]# useradd Hellen\n[git@qfedu.com ~]# useradd Eric\n[git@qfedu.com ~]# useradd test\n[git@qfedu.com ~]# su - Tompson\n[Tompson@qfedu.com ~]$ ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/Tompson/.ssh/id_rsa): \nCreated directory &#39;/home/Tompson/.ssh&#39;.\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /home/Tompson/.ssh/id_rsa.\nYour public key has been saved in /home/Tompson/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:SAoAH2zSxqEJqVgKKrxM5XMi6tKe61JMRdwMhwBNIrE Tompson@domain.cn\nThe key&#39;s randomart image is:\n+---[RSA 2048]----+\n|XX==o=.          |\n|*BOo+.o          |\n|E*=.  .          |\n|*+.= + .         |\n|=oo = . S        |\n|.oo              |\n|.o               |\n|o...             |\n|.+=.             |\n+----[SHA256]-----+\n[Tompson@qfedu.com ~]$ cat .ssh/id_rsa.pub \nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDZ8cRGHej+sZzlmK36W5MUXMLOGdTwFI9Jj44mGuabZCrlYW4GDpL6ppezN+Sur0wHtnKonYJzm8ntqS0S0UHyaPPQPl9Mrs/6Z4VrXZ/4RlqHdWeSrmOwCBQld0l8HvrmP4TyGHrOreO8uZqimd/Z+OiMqnYRZzENX11Pti/Px5g1MtJcoCi9uLtF42QYrt1X/fzAyPU9C5/5ZUq4Jln3EF20bzcA52oAzZIl0jrhI0TeTeW6zYq+KxdHGshL+qG7+Ne+akPOe4Ma5BQjcMZ2dQ2kbGuozXmLT8RDcj9YRKceQsUdTI71lJpwrWKGn8Vhra0EaK3hgoTuvMYaGfOF Tompson@domain.cn\n</code></pre>\n<h3 id=\"9、将-Tompson-的公钥复制到-gitlab-中\"><a href=\"#9、将-Tompson-的公钥复制到-gitlab-中\" class=\"headerlink\" title=\"9、将 Tompson 的公钥复制到 gitlab 中\"></a>9、将 Tompson 的公钥复制到 gitlab 中</h3><p>使用 Tompson 用户的身份与密码登录到 gitlab界面中，然后在 ssh-key 中添加相关的key<br><img src=\"./assets/8.png\" alt=\"1\"></p>\n<p><img src=\"./assets/9.png\" alt=\"1\"></p>\n<h3 id=\"10、为-Tompson-用户配置-git\"><a href=\"#10、为-Tompson-用户配置-git\" class=\"headerlink\" title=\"10、为 Tompson 用户配置 git\"></a>10、为 Tompson 用户配置 git</h3><pre><code class=\"shell\">[Tompson@qfedu.com ~]$ git config --global user.email &quot;222@qq.com&quot;\n[Tompson@qfedu.com ~]$ git config --global user.name &quot;tom&quot;\n\n[Tompson@qfedu.com ~]$ git clone git@192.168.60.119:plat-sp/chathall.git\nCloning into &#39;chathall&#39;...\nThe authenticity of host &#39;192.168.60.119 (192.168.60.119)&#39; can&#39;t be established.\nECDSA key fingerprint is SHA256:CDxAQmj6gUkIxB6XUofbZ853GuPM5LS2QO4a5dD7jRo.\nECDSA key fingerprint is MD5:4e:20:72:a7:46:c6:d7:5d:bb:9d:ce:c3:f3:da:43:f9.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added &#39;192.168.60.119&#39; (ECDSA) to the list of known hosts.\nremote: Counting objects: 3, done.\nremote: Total 3 (delta 0), reused 0 (delta 0)\nReceiving objects: 100% (3/3), done.\n[Tompson@qfedu.com ~]$ \n[Tompson@qfedu.com ~]$ cd chathall/\n[Tompson@qfedu.com chathall]$ ls\nReadme.txt\n[Tompson@qfedu.com chathall]$\n</code></pre>\n<h3 id=\"11、创建新文件，添加内容，并提交到-master-分支\"><a href=\"#11、创建新文件，添加内容，并提交到-master-分支\" class=\"headerlink\" title=\"11、创建新文件，添加内容，并提交到 master 分支\"></a>11、创建新文件，添加内容，并提交到 master 分支</h3><pre><code class=\"shell\">[Tompson@qfedu.com chathall]$ vim test.sh\n[Tompson@qfedu.com chathall]$ cat test.sh \n#!/bin/bash\necho &quot;gitlab test&quot;\n[Tompson@qfedu.com chathall]$ git add . \n[Tompson@qfedu.com chathall]$ git commit -m &#39;201805101649&#39;\n[master 80edf6b] 201805101649\n 1 file changed, 2 insertions(+)\n create mode 100644 test.sh\n[Tompson@qfedu.com chathall]$ \n[Tompson@qfedu.com chathall]$ git push -u origin master \nCounting objects: 4, done.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 305 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo git@192.168.60.119:plat-sp/chathall.git\n   4611654..80edf6b  master -&gt; master\nBranch master set up to track remote branch master from origin.\n[Tompson@qfedu.com chathall]$ \n</code></pre>\n<h3 id=\"12、使用-Eric-用户登录，并-clone-项目\"><a href=\"#12、使用-Eric-用户登录，并-clone-项目\" class=\"headerlink\" title=\"12、使用 Eric 用户登录，并 clone 项目\"></a>12、使用 Eric 用户登录，并 clone 项目</h3><pre><code class=\"shell\">[git@qfedu.com ~]# su - Eric\n[Eric@qfedu.com ~]$ ssh-keygen -C Eric@domain.cn\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/Eric/.ssh/id_rsa): \nCreated directory &#39;/home/Eric/.ssh&#39;.\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /home/Eric/.ssh/id_rsa.\nYour public key has been saved in /home/Eric/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:VZaJvjA5SJZEB+yuRpDBNHCECCZ5R8X0DYcNE0f1B6E Eric@domain.cn\nThe key&#39;s randomart image is:\n+---[RSA 2048]----+\n|*O=..B*o**+o+oo. |\n|*.+.. *o.*oooo . |\n| . + + ..oo E . .|\n|  o   o =..    . |\n|   . .  S+ .     |\n|    . .   .      |\n|   . .           |\n|    o            |\n|   .             |\n+----[SHA256]-----+\n\n[Eric@qfedu.com ~]$ cat .ssh/id_rsa.pub \nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDxQcn4UjRW/5PT5witeV9+S2w8WK5ouawHxEF7s9wuWsT4pqhcu5BN74NG3CPaq1jJZnkV+aQsTw+60BAd1gOK0FBbKWxmohmE61n9vfpUT5igJ72t2jpXjfKwLIHw+Iq5yM4yUhkwSsoBuZkxYSEltnj8OvXaOlCDYnXuGBa9+xO8f5yVIcOtiwRvv+Y1PRRzSIcazPVZax9FLK26t1R4NPiY4xWkIJyK2OrKMeiaBBzyMfWzHdmsCWa51oSrYSmz3PDBXpzIBs3OdKxcaJs9Lc5u87YCV5RMUjLrPcA7nPK6crOabLXhz3d5GSYggMTOByQkyKOo7WlYpARCHOt/ Eric@domain.cn\n[Eric@qfedu.com ~]$ \n</code></pre>\n<h3 id=\"13、同样需要使用Eric用户登录gitlab-web-界面，并添加相应的ssh-key。然后设置git-，并clone项目\"><a href=\"#13、同样需要使用Eric用户登录gitlab-web-界面，并添加相应的ssh-key。然后设置git-，并clone项目\" class=\"headerlink\" title=\"13、同样需要使用Eric用户登录gitlab web 界面，并添加相应的ssh-key。然后设置git ，并clone项目\"></a>13、同样需要使用Eric用户登录gitlab web 界面，并添加相应的ssh-key。然后设置git ，并clone项目</h3><pre><code class=\"shell\">[Eric@qfedu.com ~]$ git config --global user.email &quot;Eric@domain.cn&quot;\n[Eric@qfedu.com ~]$ git config --global user.name &quot;Eric&quot;\n[Eric@qfedu.com ~]$ git clone git@192.168.60.119:plat-sp/chathall.git\nCloning into &#39;chathall&#39;...\nThe authenticity of host &#39;192.168.60.119 (192.168.60.119)&#39; can&#39;t be established.\nECDSA key fingerprint is SHA256:CDxAQmj6gUkIxB6XUofbZ853GuPM5LS2QO4a5dD7jRo.\nECDSA key fingerprint is MD5:4e:20:72:a7:46:c6:d7:5d:bb:9d:ce:c3:f3:da:43:f9.\nAre you sure you want to continue connecting (yes/no)? yes\nremote: Counting objects: 6, done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 6 (delta 0), reused 0 (delta 0)\nReceiving objects: 100% (6/6), done.\n[Eric@qfedu.com ~]$ \n</code></pre>\n<h3 id=\"14、切换到dev分支，修改文件内容，并将新-code-提交到-dev分支-Developer角色默认并没有提交master的权限\"><a href=\"#14、切换到dev分支，修改文件内容，并将新-code-提交到-dev分支-Developer角色默认并没有提交master的权限\" class=\"headerlink\" title=\"14、切换到dev分支，修改文件内容，并将新 code 提交到 dev分支 (Developer角色默认并没有提交master的权限)\"></a>14、切换到dev分支，修改文件内容，并将新 code 提交到 dev分支 (Developer角色默认并没有提交master的权限)</h3><pre><code class=\"shell\">[Eric@qfedu.com chathall]$ git checkout dev \nBranch dev set up to track remote branch dev from origin.\nSwitched to a new branch &#39;dev&#39;\n[Eric@qfedu.com chathall]$ ls\nReadme.txt  test.sh\n[Eric@qfedu.com chathall]$ vim eric.sh \n[Eric@qfedu.com chathall]$ cat eric.sh\n#!/bin/bash\necho &quot;brahch test&quot;\n[Eric@qfedu.com chathall]$ git add . \n[Eric@qfedu.com chathall]$ git commit -m &#39;201805101658&#39;\n[dev 6687039] 201805101658\n 1 file changed, 1 insertion(+)\n[Eric@qfedu.com chathall]$ git push -u origin dev \nCounting objects: 5, done.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 306 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nremote: \nremote: To create a merge request for dev, visit:\nremote:   http://192.168.60.119/plat-sp/chathall/merge_requests/new?merge_request%5Bsource_branch%5D=dev\nremote: \nTo git@192.168.60.119:plat-sp/chathall.git\n   80edf6b..6687039  dev -&gt; dev\nBranch dev set up to track remote branch dev from origin.\n[Eric@qfedu.com chathall]$\n[Eric@qfedu.com chathall]$ git checkout master \nSwitched to branch &#39;master&#39;\n[Eric@qfedu.com chathall]$ git branch \n  dev\n* master\n[Eric@qfedu.com chathall]$\n</code></pre>\n<h3 id=\"15、使用Eric-用户登录gitlab-web，在界面中-创建一个合并请求\"><a href=\"#15、使用Eric-用户登录gitlab-web，在界面中-创建一个合并请求\" class=\"headerlink\" title=\"15、使用Eric 用户登录gitlab web，在界面中 创建一个合并请求\"></a>15、使用Eric 用户登录gitlab web，在界面中 创建一个合并请求</h3><p><img src=\"./assets/15.png\" alt=\"1\"></p>\n<p><strong>提交合并请求：</strong><br><img src=\"./assets/16.png\" alt=\"1\"></p>\n<h3 id=\"16、使用Tompson用户登录-gitlab-web-，找到“合并请求”-，然后将dev分支合并到master分支\"><a href=\"#16、使用Tompson用户登录-gitlab-web-，找到“合并请求”-，然后将dev分支合并到master分支\" class=\"headerlink\" title=\"16、使用Tompson用户登录 gitlab web ，找到“合并请求” ，然后将dev分支合并到master分支\"></a>16、使用Tompson用户登录 gitlab web ，找到“合并请求” ，然后将dev分支合并到master分支</h3><p><img src=\"./assets/17.png\" alt=\"1\"></p>\n<p><img src=\"./assets/18.png\" alt=\"1\"></p>\n<h2 id=\"十、Gitlab-备份与恢复\"><a href=\"#十、Gitlab-备份与恢复\" class=\"headerlink\" title=\"十、Gitlab 备份与恢复\"></a>十、Gitlab 备份与恢复</h2><h3 id=\"1、查看系统版本和软件版本\"><a href=\"#1、查看系统版本和软件版本\" class=\"headerlink\" title=\"1、查看系统版本和软件版本\"></a>1、查看系统版本和软件版本</h3><pre><code class=\"shell\">[root@qfedu.com gitlab]# cat /etc/redhat-release \nCentOS Linux release 7.3.1611 (Core) \n\n[root@qfedu.com gitlab]# cat /opt/gitlab/embedded/service/gitlab-rails/VERSION\n8.15.4\n</code></pre>\n<h3 id=\"2、数据备份\"><a href=\"#2、数据备份\" class=\"headerlink\" title=\"2、数据备份\"></a>2、数据备份</h3><h4 id=\"1、查看备份相关的配置项\"><a href=\"#1、查看备份相关的配置项\" class=\"headerlink\" title=\"1、查看备份相关的配置项\"></a>1、查看备份相关的配置项</h4><pre><code class=\"shell\">[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\ngitlab_rails[&#39;manage_backup_path&#39;] = true\ngitlab_rails[&#39;backup_path&#39;] = &quot;/data/gitlab/backups&quot;\n</code></pre>\n<p>该项定义了默认备份出文件的路径，可以通过修改该配置，并执行 <strong>gitlab-ctl reconfigure 或者 gitlab-ctl  restart</strong> 重启服务生效。</p>\n<h4 id=\"2、执行备份命令进行备份\"><a href=\"#2、执行备份命令进行备份\" class=\"headerlink\" title=\"2、执行备份命令进行备份\"></a>2、执行备份命令进行备份</h4><pre><code class=\"shell\">[root@qfedu.com ~]# /opt/gitlab/bin/gitlab-rake gitlab:backup:create \n</code></pre>\n<h4 id=\"3、添加到-crontab-中定时执行\"><a href=\"#3、添加到-crontab-中定时执行\" class=\"headerlink\" title=\"3、添加到 crontab 中定时执行\"></a>3、添加到 crontab 中定时执行</h4><pre><code class=\"shell\">[root@qfedu.com ~]# crontab -e\n0 2 * * * bash /opt/gitlab/bin/gitlab-rake gitlab:backup:create\n</code></pre>\n<p>可以到/data/gitlab/backups找到备份包，解压查看，会发现备份的还是比较全面的，数据库、repositories、build、upload等分类还是比较清晰的。</p>\n<h4 id=\"4、设置备份保留时长\"><a href=\"#4、设置备份保留时长\" class=\"headerlink\" title=\"4、设置备份保留时长\"></a>4、设置备份保留时长</h4><p>防止每天执行备份，有目录被爆满的风险，打开/etc/gitlab/gitlab.rb配置文件，找到如下配置：</p>\n<pre><code class=\"shell\">[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\ngitlab_rails[&#39;backup_keep_time&#39;] = 604800\n</code></pre>\n<p>设置备份保留7天（7<em>3600</em>24=604800），秒为单位，如果想增大或减小，可以直接在该处配置，并通过gitlab-ctl restart 重启服务生效。</p>\n<p>备份完成，会在备份目录中生成一个当天日期的tar包。</p>\n<h3 id=\"3、数据恢复\"><a href=\"#3、数据恢复\" class=\"headerlink\" title=\"3、数据恢复\"></a>3、数据恢复</h3><h4 id=\"1、安装部署-gitlab-server\"><a href=\"#1、安装部署-gitlab-server\" class=\"headerlink\" title=\"1、安装部署 gitlab server\"></a>1、安装部署 gitlab server</h4><p> 具体步骤参见上面：gitlab server 搭建过程</p>\n<h4 id=\"2、恢复-gitlab\"><a href=\"#2、恢复-gitlab\" class=\"headerlink\" title=\"2、恢复 gitlab\"></a>2、恢复 gitlab</h4><h5 id=\"1、查看备份相关的配置项-1\"><a href=\"#1、查看备份相关的配置项-1\" class=\"headerlink\" title=\"1、查看备份相关的配置项\"></a>1、查看备份相关的配置项</h5><pre><code class=\"shell\">[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb\ngitlab_rails[&#39;backup_path&#39;] = &quot;/data/gitlab/backups&quot;\n</code></pre>\n<p>修改该配置，定义了默认备份出文件的路径，并执行 <strong>gitlab-ctl reconfigure 或者 gitlab-ctl  restart</strong> 重启服务生效。</p>\n<h5 id=\"2、恢复前需要先停掉数据连接服务\"><a href=\"#2、恢复前需要先停掉数据连接服务\" class=\"headerlink\" title=\"2、恢复前需要先停掉数据连接服务\"></a>2、恢复前需要先停掉数据连接服务</h5><pre><code class=\"shell\">[root@qfedu.com ~]# gitlab-ctl stop unicorn\n[root@qfedu.com ~]# gitlab-ctl stop sidekiq\n</code></pre>\n<ul>\n<li>如果是台新搭建的主机，不需要操作，理论上不停这两个服务也可以。停这两个服务是为了保证数据一致性。</li>\n</ul>\n<h5 id=\"3、同步备份文件到新服务器\"><a href=\"#3、同步备份文件到新服务器\" class=\"headerlink\" title=\"3、同步备份文件到新服务器\"></a>3、同步备份文件到新服务器</h5><p>将老服务器/data/gitlab/backups目录下的备份文件拷贝到新服务器上的/data/gitlab/backups</p>\n<pre><code class=\"shell\">[root@qfedu.com gitlab]# rsync -avz 1530773117_2019_03_05_gitlab_backup.tar 192.168.95.135:/data/gitlab/backups/ \n</code></pre>\n<ul>\n<li>注意权限：600权限是无权恢复的。 实验环境可改成了777，生产环境建议修改属主属组</li>\n</ul>\n<pre><code class=\"shell\">[root@qfedu.com backups]# pwd\n/data/gitlab/backups\n[root@qfedu.com backups]# chown -R git.git 1530773117_2019_03_05_gitlab_backup.tar \n[root@qfedu.com backups]# ll\ntotal 17328900\n-rwxrwxrwx 1 git git 17744793600 Jul  5 14:47 1530773117_2018_07_05_gitlab_backup.tar\n</code></pre>\n<h5 id=\"4、执行命令进行恢复\"><a href=\"#4、执行命令进行恢复\" class=\"headerlink\" title=\"4、执行命令进行恢复\"></a>4、执行命令进行恢复</h5><p>后面再输入两次 yes 就完成恢复了。</p>\n<pre><code class=\"shell\">[root@qfedu.com ~]# gitlab-rake gitlab:backup:restore BACKUP=1530773117_2018_07_05_gitlab_backup.tar\n注意：backups 目录下保留一个备份文件可直接执行\n</code></pre>\n<h5 id=\"5、恢复完成启动服务\"><a href=\"#5、恢复完成启动服务\" class=\"headerlink\" title=\"5、恢复完成启动服务\"></a>5、恢复完成启动服务</h5><p>恢复完成后，启动刚刚的两个服务，或者重启所有服务，再打开浏览器进行访问，发现数据和之前的一致：</p>\n<pre><code class=\"shell\">[root@qfedu.com ~]# gitlab-ctl start unicorn\n[root@qfedu.com ~]# gitlab-ctl start sidekiq\n或\n[root@qfedu.com ~]# gitlab-ctl restart\n</code></pre>\n<p><strong>注意：通过备份文件恢复gitlab必须保证两台主机的gitlab版本一致，否则会提示版本不匹配</strong></p>\n<h2 id=\"十一、利用Gitlab管理k8s集群\"><a href=\"#十一、利用Gitlab管理k8s集群\" class=\"headerlink\" title=\"十一、利用Gitlab管理k8s集群\"></a>十一、利用Gitlab管理k8s集群</h2><h3 id=\"1、权限设置\"><a href=\"#1、权限设置\" class=\"headerlink\" title=\"1、权限设置\"></a>1、权限设置</h3><p><img src=\"assets/image-20200821174547237.png\" alt=\"image-20200821174547237\"></p>\n<h3 id=\"2、获取k8s集群API地址\"><a href=\"#2、获取k8s集群API地址\" class=\"headerlink\" title=\"2、获取k8s集群API地址\"></a>2、获取k8s集群API地址</h3><pre><code class=\"yaml\">[root@master ~]# kubectl cluster-info | grep &#39;Kubernetes master&#39; | awk &#39;/http/ &#123;print $NF&#125;&#39;\nhttps://192.168.19.200:6443\n</code></pre>\n<h3 id=\"3、获取k8s集群默认CA证书\"><a href=\"#3、获取k8s集群默认CA证书\" class=\"headerlink\" title=\"3、获取k8s集群默认CA证书\"></a>3、获取k8s集群默认CA证书</h3><pre><code>[root@master ~]# kubectl get secrets\nNAME                  TYPE                                  DATA   AGE\ndefault-token-cvfqx   kubernetes.io/service-account-token   3      3d21h\n</code></pre>\n<p>default-token-cvfqx 为上面获取到的secrets的名称，用以下命令查看证书</p>\n<pre><code>[root@master ~]# kubectl get secret default-token-cvfqx  -o jsonpath=&quot;&#123;[&#39;data&#39;][&#39;ca\\.crt&#39;]&#125;&quot; | base64 --decode\n-----BEGIN CERTIFICATE-----\nMIICyDCCAbCgAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl\ncm5ldGVzMB4XDTIwMDgxNzA5MjAwMFoXDTMwMDgxNTA5MjAwMFowFTETMBEGA1UE\nAxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANIM\niOGHeolaxkE+kqZtc8kDbGFhwqGxNxg4orbIjrz//Z6vrgqo2COn2NjKrVM11bmz\nVhHPCruc3snfTLIS+/Z6gZqgpw5ruX8OjfH4nhr9npKxdBon3soa10EovPwMz1KW\nlaqbuLKTbtTm+oCtAKYXUlzqrFGR//GW2D3bjl1QGOPbAR0pggdxSpPo6oUgtEQJ\nQAsNOJ40qMjevi3fnrNDrMqmcNKlSlkw8+Gf4TqM1EfAERRHiEcb/W3hOGWV0gdm\nvaq7CE/ENeD1O11NE76BMmk5WO0u6ot4OmP35TTlx8K0N/WPyq76RlH7somiIb8S\n1NpAzg+9K0vv1QmILScCAwEAAaMjMCEwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB\n/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAEVgIlTFDoFhb3KA0RMVjckgsP3O\nOB7vTEws6w9ZDGJsNlbbCa15f8q3VmERSkfjAhfG4I9gb4KI0CM5Xt3JhU76GWsO\nZXHDfK7AzDGpLPUxlygkK7c7XCES/GEJe5agBxQyCo2pAvcj/nb+JIBeSh8JcG05\npzPhL11it9hDqmS5k92+63xGs/SDEzXEbBVMnyZWiv+AOHlO1/IFofUD3VHcSRMY\nwH5j6Irc0p0XTnFg+GHBpqjxwMWxP6IxdVrsOWUALM5oOJYn4aJQy5kSpJFkwNW8\nxDvVgtOWq5P9fVfnE4Am0LI/DevzYtcr3O9hUmCfEOnF0hC0n4ghYOPqiB4=\n-----END CERTIFICATE-----\n</code></pre>\n<h3 id=\"4、设置rbac\"><a href=\"#4、设置rbac\" class=\"headerlink\" title=\"4、设置rbac\"></a>4、设置rbac</h3><pre><code>[root@master ~]# vim gitlab-admin-service-account.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: gitlab-admin\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: gitlab-admin\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: gitlab-admin\n  namespace: kube-system\n\n[root@master ~]# kubectl apply -f gitlab-admin-service-account.yaml\nserviceaccount/gitlab-admin created\nclusterrolebinding.rbac.authorization.k8s.io/gitlab-admin created\n</code></pre>\n<h3 id=\"5、获取gitlab-admin的token\"><a href=\"#5、获取gitlab-admin的token\" class=\"headerlink\" title=\"5、获取gitlab-admin的token\"></a>5、获取gitlab-admin的token</h3><pre><code class=\"yaml\">[root@master ~]# kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep gitlab-admin | awk &#39;&#123;print $1&#125;&#39;)\nName:         gitlab-admin-token-pmb2h\nNamespace:    kube-system\nLabels:       &lt;none&gt;\nAnnotations:  kubernetes.io/service-account.name: gitlab-admin\n              kubernetes.io/service-account.uid: bc9e1f94-088d-41f4-8e18-f31f1e9a9369\n\nType:  kubernetes.io/service-account-token\n\nData\n====\nca.crt:     1025 bytes\nnamespace:  11 bytes\ntoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6InluNWZyY3V5T1BjNmFFQlpmRVBmOGFOenRmVkx1U0dCRDFhT0s5dEtGeXMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJnaXRsYWItYWRtaW4tdG9rZW4tcG1iMmgiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZ2l0bGFiLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYmM5ZTFmOTQtMDg4ZC00MWY0LThlMTgtZjMxZjFlOWE5MzY5Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmdpdGxhYi1hZG1pbiJ9.HGNf2_q_NS7ASk2ID6Y658PMpDIruFLr70VGk9I_dAP-rYt81FarjQhIQPn554SrtmiTp-iQ_j7slX_YRsGHlpo74VrBM2SirDToXobuSpe77v6MFx6Ol2UsUrxY0ulm_DAjOhZ16jlohPWlhkP0083KBfywwdpyF2oVdALQnT4sI1aDxgUHs-Pmg6D0NbdN0Ipb--s-Z59QKGr1XH4Pp0Qb9kze6KCJSWOk8-4pwtpQcT7K2MA1ucyEJB283D5ChQSddo9q7pBkEwq94TLy-ZbAhHgO89OqVIjY-3H-rb5Kd3meGrtGJZJscx7xnn6_DEvbBwp8DmCoM4vfFLUUow\n</code></pre>\n<p>6、添加k8s集群</p>\n<p><img src=\"assets/image-20200821180353378.png\" alt=\"image-20200821180353378\"></p>\n"},{"title":"这是第一个博客网站 Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\ncurl 'https://mk-test3.dustess.com/qw-scrm-svc/action/company/getDetail?id=dff27d93-7b73-11ec-9bfb-829da4612e9a' \\\n  -X 'OPTIONS' \\\n  -H 'Connection: keep-alive' \\\n  -H 'Accept: */*' \\\n  -H 'Access-Control-Request-Method: GET' \\\n  -H 'Access-Control-Request-Headers: authorization' \\\n  -H 'Origin: https://ww1d2ec5f82d2a53a2-qw-scrm-test3.dustess.com' \\\n  -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36' \\\n  -H 'Sec-Fetch-Mode: cors' \\\n  -H 'Sec-Fetch-Site: same-site' \\\n  -H 'Sec-Fetch-Dest: empty' \\\n  -H 'Accept-Language: zh-CN,zh;q=0.9,en;q=0.8' \\\n  --compressed\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/这是第一个博客网站 copy 2.md","raw":"---\ntitle: 这是第一个博客网站 Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\ncurl 'https://mk-test3.dustess.com/qw-scrm-svc/action/company/getDetail?id=dff27d93-7b73-11ec-9bfb-829da4612e9a' \\\n  -X 'OPTIONS' \\\n  -H 'Connection: keep-alive' \\\n  -H 'Accept: */*' \\\n  -H 'Access-Control-Request-Method: GET' \\\n  -H 'Access-Control-Request-Headers: authorization' \\\n  -H 'Origin: https://ww1d2ec5f82d2a53a2-qw-scrm-test3.dustess.com' \\\n  -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36' \\\n  -H 'Sec-Fetch-Mode: cors' \\\n  -H 'Sec-Fetch-Site: same-site' \\\n  -H 'Sec-Fetch-Dest: empty' \\\n  -H 'Accept-Language: zh-CN,zh;q=0.9,en;q=0.8' \\\n  --compressed\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"这是第一个博客网站 copy 2","published":1,"date":"2022-01-22T13:34:16.781Z","updated":"2022-01-22T13:34:16.783Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckztjmdhc0007nb66gcwfh5jy","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">curl <span class=\"token string\">'https://mk-test3.dustess.com/qw-scrm-svc/action/company/getDetail?id=dff27d93-7b73-11ec-9bfb-829da4612e9a'</span> \\\n  -X <span class=\"token string\">'OPTIONS'</span> \\\n  -H <span class=\"token string\">'Connection: keep-alive'</span> \\\n  -H <span class=\"token string\">'Accept: */*'</span> \\\n  -H <span class=\"token string\">'Access-Control-Request-Method: GET'</span> \\\n  -H <span class=\"token string\">'Access-Control-Request-Headers: authorization'</span> \\\n  -H <span class=\"token string\">'Origin: https://ww1d2ec5f82d2a53a2-qw-scrm-test3.dustess.com'</span> \\\n  -H <span class=\"token string\">'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36'</span> \\\n  -H <span class=\"token string\">'Sec-Fetch-Mode: cors'</span> \\\n  -H <span class=\"token string\">'Sec-Fetch-Site: same-site'</span> \\\n  -H <span class=\"token string\">'Sec-Fetch-Dest: empty'</span> \\\n  -H <span class=\"token string\">'Accept-Language: zh-CN,zh;q=0.9,en;q=0.8'</span> \\\n  --compressed\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo generate\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo deploy\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://testcabana.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://testcabana.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://testcabana.github.io/","title":"前去学习"}],"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">curl &#39;https://mk-test3.dustess.com/qw-scrm-svc/action/company/getDetail?id=dff27d93-7b73-11ec-9bfb-829da4612e9a&#39; \\\n  -X &#39;OPTIONS&#39; \\\n  -H &#39;Connection: keep-alive&#39; \\\n  -H &#39;Accept: */*&#39; \\\n  -H &#39;Access-Control-Request-Method: GET&#39; \\\n  -H &#39;Access-Control-Request-Headers: authorization&#39; \\\n  -H &#39;Origin: https://ww1d2ec5f82d2a53a2-qw-scrm-test3.dustess.com&#39; \\\n  -H &#39;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36&#39; \\\n  -H &#39;Sec-Fetch-Mode: cors&#39; \\\n  -H &#39;Sec-Fetch-Site: same-site&#39; \\\n  -H &#39;Sec-Fetch-Dest: empty&#39; \\\n  -H &#39;Accept-Language: zh-CN,zh;q=0.9,en;q=0.8&#39; \\\n  --compressed\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"这是第一个博客网站 Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n<link rel=\"stylesheet\" href=\"<%- theme.jsDelivr.url %><%- url_for(theme.libs.css.gitalk) %>\">\n<link rel=\"stylesheet\" href=\"<%- theme.jsDelivr.url %><%- url_for('/css/my-gitalk.css') %>\">\n\n<div class=\"card gitalk-card\" data-aos=\"fade-up\">\n    <div class=\"comment_headling\" style=\"font-size: 20px; font-weight: 700; position: relative; padding-left: 20px; top: 15px; padding-bottom: 5px;\">\n        <i class=\"fas fa-comments fa-fw\" aria-hidden=\"true\"></i>\n        <span>评论</span>\n    </div>\n    <div id=\"gitalk-container\" class=\"card-content\"></div>\n</div>\n\n<script src=\"<%- theme.jsDelivr.url %><%- url_for(theme.libs.js.gitalk) %>\"></script>\n<script>\n    let gitalk = new Gitalk({\n        clientID: '<%- theme.gitalk.oauth.clientId %>',\n        clientSecret: '<%- theme.gitalk.oauth.clientSecret %>',\n        repo: '<%- theme.gitalk.repo %>',\n        owner: '<%- theme.gitalk.owner %>',\n        admin: <%- JSON.stringify(theme.gitalk.admin) %>,\n        id: '<%- date(page.date, 'YYYY-MM-DDTHH-mm-ss') %>',\n        distractionFreeMode: false  // Facebook-like distraction free mode\n    });\n\n    gitalk.render('gitalk-container');\n</script>\n\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\ncurl 'https://mk-test3.dustess.com/qw-scrm-svc/action/company/getDetail?id=dff27d93-7b73-11ec-9bfb-829da4612e9a' \\\n  -X 'OPTIONS' \\\n  -H 'Connection: keep-alive' \\\n  -H 'Accept: */*' \\\n  -H 'Access-Control-Request-Method: GET' \\\n  -H 'Access-Control-Request-Headers: authorization' \\\n  -H 'Origin: https://ww1d2ec5f82d2a53a2-qw-scrm-test3.dustess.com' \\\n  -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36' \\\n  -H 'Sec-Fetch-Mode: cors' \\\n  -H 'Sec-Fetch-Site: same-site' \\\n  -H 'Sec-Fetch-Dest: empty' \\\n  -H 'Accept-Language: zh-CN,zh;q=0.9,en;q=0.8' \\\n  --compressed\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n``` yaml\n# 是否在首页显示音乐.\nmusic:\n  enable: true\n  showTitle: false\n  title: 听听音乐\n  fixed: false # 是否开启吸底模式\n  autoplay: false # 是否自动播放\n  theme: '#42b983'\n  loop: 'all' # 音频循环播放, 可选值: 'all', 'one', 'none'\n  order: 'list' # 音频循环顺序, 可选值: 'list', 'random'\n  preload: 'auto' # 预加载，可选值: 'none', 'metadata', 'auto'\n  volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效\n  listFolded: false # 列表默认折叠\n  listMaxHeight: # 列表最大高度\n```\n","source":"_posts/这是第一个博客网站.md","raw":"---\ntitle: 这是第一个博客网站 Hello World\ncategories: Markdown\ntags:\n  - Typora\n  - Markdown\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n<link rel=\"stylesheet\" href=\"<%- theme.jsDelivr.url %><%- url_for(theme.libs.css.gitalk) %>\">\n<link rel=\"stylesheet\" href=\"<%- theme.jsDelivr.url %><%- url_for('/css/my-gitalk.css') %>\">\n\n<div class=\"card gitalk-card\" data-aos=\"fade-up\">\n    <div class=\"comment_headling\" style=\"font-size: 20px; font-weight: 700; position: relative; padding-left: 20px; top: 15px; padding-bottom: 5px;\">\n        <i class=\"fas fa-comments fa-fw\" aria-hidden=\"true\"></i>\n        <span>评论</span>\n    </div>\n    <div id=\"gitalk-container\" class=\"card-content\"></div>\n</div>\n\n<script src=\"<%- theme.jsDelivr.url %><%- url_for(theme.libs.js.gitalk) %>\"></script>\n<script>\n    let gitalk = new Gitalk({\n        clientID: '<%- theme.gitalk.oauth.clientId %>',\n        clientSecret: '<%- theme.gitalk.oauth.clientSecret %>',\n        repo: '<%- theme.gitalk.repo %>',\n        owner: '<%- theme.gitalk.owner %>',\n        admin: <%- JSON.stringify(theme.gitalk.admin) %>,\n        id: '<%- date(page.date, 'YYYY-MM-DDTHH-mm-ss') %>',\n        distractionFreeMode: false  // Facebook-like distraction free mode\n    });\n\n    gitalk.render('gitalk-container');\n</script>\n\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\ncurl 'https://mk-test3.dustess.com/qw-scrm-svc/action/company/getDetail?id=dff27d93-7b73-11ec-9bfb-829da4612e9a' \\\n  -X 'OPTIONS' \\\n  -H 'Connection: keep-alive' \\\n  -H 'Accept: */*' \\\n  -H 'Access-Control-Request-Method: GET' \\\n  -H 'Access-Control-Request-Headers: authorization' \\\n  -H 'Origin: https://ww1d2ec5f82d2a53a2-qw-scrm-test3.dustess.com' \\\n  -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36' \\\n  -H 'Sec-Fetch-Mode: cors' \\\n  -H 'Sec-Fetch-Site: same-site' \\\n  -H 'Sec-Fetch-Dest: empty' \\\n  -H 'Accept-Language: zh-CN,zh;q=0.9,en;q=0.8' \\\n  --compressed\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n``` yaml\n# 是否在首页显示音乐.\nmusic:\n  enable: true\n  showTitle: false\n  title: 听听音乐\n  fixed: false # 是否开启吸底模式\n  autoplay: false # 是否自动播放\n  theme: '#42b983'\n  loop: 'all' # 音频循环播放, 可选值: 'all', 'one', 'none'\n  order: 'list' # 音频循环顺序, 可选值: 'list', 'random'\n  preload: 'auto' # 预加载，可选值: 'none', 'metadata', 'auto'\n  volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效\n  listFolded: false # 列表默认折叠\n  listMaxHeight: # 列表最大高度\n```\n","slug":"这是第一个博客网站","published":1,"date":"2022-01-20T07:14:17.827Z","updated":"2022-01-23T03:32:48.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckztjmdhe0009nb66c4eu3v2r","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>link rel<span class=\"token operator\">=</span><span class=\"token string\">\"stylesheet\"</span> href<span class=\"token operator\">=</span><span class=\"token string\">\"&lt;%- theme.jsDelivr.url %>&lt;%- url_for(theme.libs.css.gitalk) %>\"</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>link rel<span class=\"token operator\">=</span><span class=\"token string\">\"stylesheet\"</span> href<span class=\"token operator\">=</span><span class=\"token string\">\"&lt;%- theme.jsDelivr.url %>&lt;%- url_for('/css/my-gitalk.css') %>\"</span><span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>div class<span class=\"token operator\">=</span><span class=\"token string\">\"card gitalk-card\"</span> data-aos<span class=\"token operator\">=</span><span class=\"token string\">\"fade-up\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div class<span class=\"token operator\">=</span><span class=\"token string\">\"comment_headling\"</span> style<span class=\"token operator\">=</span><span class=\"token string\">\"font-size: 20px; font-weight: 700; position: relative; padding-left: 20px; top: 15px; padding-bottom: 5px;\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>i class<span class=\"token operator\">=</span><span class=\"token string\">\"fas fa-comments fa-fw\"</span> aria-hidden<span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>/i<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>评论<span class=\"token operator\">&lt;</span>/span<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"gitalk-container\"</span> class<span class=\"token operator\">=</span><span class=\"token string\">\"card-content\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"&lt;%- theme.jsDelivr.url %>&lt;%- url_for(theme.libs.js.gitalk) %>\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>/script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n    <span class=\"token keyword\">let</span> gitalk <span class=\"token operator\">=</span> new Gitalk<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;</span>\n        clientID: <span class=\"token string\">'&lt;%- theme.gitalk.oauth.clientId %>'</span>,\n        clientSecret: <span class=\"token string\">'&lt;%- theme.gitalk.oauth.clientSecret %>'</span>,\n        repo: <span class=\"token string\">'&lt;%- theme.gitalk.repo %>'</span>,\n        owner: <span class=\"token string\">'&lt;%- theme.gitalk.owner %>'</span>,\n        admin: <span class=\"token operator\">&lt;</span>%- JSON.stringify<span class=\"token punctuation\">(</span>theme.gitalk.admin<span class=\"token punctuation\">)</span> %<span class=\"token operator\">></span>,\n        id: <span class=\"token string\">'&lt;%- date(page.date, '</span>YYYY-MM-DDTHH-mm-ss<span class=\"token string\">') %>'</span>,\n        distractionFreeMode: <span class=\"token boolean\">false</span>  // Facebook-like distraction <span class=\"token function\">free</span> mode\n    <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#125;);</span>\n\n    gitalk.render<span class=\"token punctuation\">(</span><span class=\"token string\">'gitalk-container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>/script<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">curl <span class=\"token string\">'https://mk-test3.dustess.com/qw-scrm-svc/action/company/getDetail?id=dff27d93-7b73-11ec-9bfb-829da4612e9a'</span> \\\n  -X <span class=\"token string\">'OPTIONS'</span> \\\n  -H <span class=\"token string\">'Connection: keep-alive'</span> \\\n  -H <span class=\"token string\">'Accept: */*'</span> \\\n  -H <span class=\"token string\">'Access-Control-Request-Method: GET'</span> \\\n  -H <span class=\"token string\">'Access-Control-Request-Headers: authorization'</span> \\\n  -H <span class=\"token string\">'Origin: https://ww1d2ec5f82d2a53a2-qw-scrm-test3.dustess.com'</span> \\\n  -H <span class=\"token string\">'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36'</span> \\\n  -H <span class=\"token string\">'Sec-Fetch-Mode: cors'</span> \\\n  -H <span class=\"token string\">'Sec-Fetch-Site: same-site'</span> \\\n  -H <span class=\"token string\">'Sec-Fetch-Dest: empty'</span> \\\n  -H <span class=\"token string\">'Accept-Language: zh-CN,zh;q=0.9,en;q=0.8'</span> \\\n  --compressed\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo generate\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo deploy\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\" spellcheck=\"true\"># 是否在首页显示音乐.</span>\n<span class=\"token key atrule\">music</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">showTitle</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 听听音乐\n  <span class=\"token key atrule\">fixed</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false </span><span class=\"token comment\" spellcheck=\"true\"># 是否开启吸底模式</span>\n  <span class=\"token key atrule\">autoplay</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false </span><span class=\"token comment\" spellcheck=\"true\"># 是否自动播放</span>\n  <span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> '<span class=\"token comment\" spellcheck=\"true\">#42b983'</span>\n  <span class=\"token key atrule\">loop</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'all'</span> <span class=\"token comment\" spellcheck=\"true\"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>\n  <span class=\"token key atrule\">order</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'list'</span> <span class=\"token comment\" spellcheck=\"true\"># 音频循环顺序, 可选值: 'list', 'random'</span>\n  <span class=\"token key atrule\">preload</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'auto'</span> <span class=\"token comment\" spellcheck=\"true\"># 预加载，可选值: 'none', 'metadata', 'auto'</span>\n  <span class=\"token key atrule\">volume</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.7 </span><span class=\"token comment\" spellcheck=\"true\"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>\n  <span class=\"token key atrule\">listFolded</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false </span><span class=\"token comment\" spellcheck=\"true\"># 列表默认折叠</span>\n  <span class=\"token key atrule\">listMaxHeight</span><span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\"># 列表最大高度</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://testcabana.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://testcabana.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://testcabana.github.io/","title":"前去学习"}],"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">&lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(theme.libs.css.gitalk) %&gt;&quot;&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(&#39;/css/my-gitalk.css&#39;) %&gt;&quot;&gt;\n\n&lt;div class=&quot;card gitalk-card&quot; data-aos=&quot;fade-up&quot;&gt;\n    &lt;div class=&quot;comment_headling&quot; style=&quot;font-size: 20px; font-weight: 700; position: relative; padding-left: 20px; top: 15px; padding-bottom: 5px;&quot;&gt;\n        &lt;i class=&quot;fas fa-comments fa-fw&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;\n        &lt;span&gt;评论&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;div id=&quot;gitalk-container&quot; class=&quot;card-content&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script src=&quot;&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(theme.libs.js.gitalk) %&gt;&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n    let gitalk = new Gitalk(&#123;\n        clientID: &#39;&lt;%- theme.gitalk.oauth.clientId %&gt;&#39;,\n        clientSecret: &#39;&lt;%- theme.gitalk.oauth.clientSecret %&gt;&#39;,\n        repo: &#39;&lt;%- theme.gitalk.repo %&gt;&#39;,\n        owner: &#39;&lt;%- theme.gitalk.owner %&gt;&#39;,\n        admin: &lt;%- JSON.stringify(theme.gitalk.admin) %&gt;,\n        id: &#39;&lt;%- date(page.date, &#39;YYYY-MM-DDTHH-mm-ss&#39;) %&gt;&#39;,\n        distractionFreeMode: false  // Facebook-like distraction free mode\n    &#125;);\n\n    gitalk.render(&#39;gitalk-container&#39;);\n&lt;/script&gt;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">curl &#39;https://mk-test3.dustess.com/qw-scrm-svc/action/company/getDetail?id=dff27d93-7b73-11ec-9bfb-829da4612e9a&#39; \\\n  -X &#39;OPTIONS&#39; \\\n  -H &#39;Connection: keep-alive&#39; \\\n  -H &#39;Accept: */*&#39; \\\n  -H &#39;Access-Control-Request-Method: GET&#39; \\\n  -H &#39;Access-Control-Request-Headers: authorization&#39; \\\n  -H &#39;Origin: https://ww1d2ec5f82d2a53a2-qw-scrm-test3.dustess.com&#39; \\\n  -H &#39;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36&#39; \\\n  -H &#39;Sec-Fetch-Mode: cors&#39; \\\n  -H &#39;Sec-Fetch-Site: same-site&#39; \\\n  -H &#39;Sec-Fetch-Dest: empty&#39; \\\n  -H &#39;Accept-Language: zh-CN,zh;q=0.9,en;q=0.8&#39; \\\n  --compressed\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<pre><code class=\"yaml\"># 是否在首页显示音乐.\nmusic:\n  enable: true\n  showTitle: false\n  title: 听听音乐\n  fixed: false # 是否开启吸底模式\n  autoplay: false # 是否自动播放\n  theme: &#39;#42b983&#39;\n  loop: &#39;all&#39; # 音频循环播放, 可选值: &#39;all&#39;, &#39;one&#39;, &#39;none&#39;\n  order: &#39;list&#39; # 音频循环顺序, 可选值: &#39;list&#39;, &#39;random&#39;\n  preload: &#39;auto&#39; # 预加载，可选值: &#39;none&#39;, &#39;metadata&#39;, &#39;auto&#39;\n  volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效\n  listFolded: false # 列表默认折叠\n  listMaxHeight: # 列表最大高度\n</code></pre>\n"},{"title":"这是第一个博客网站 Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\ncurl 'https://mk-test3.dustess.com/qw-scrm-svc/action/company/getDetail?id=dff27d93-7b73-11ec-9bfb-829da4612e9a' \\\n  -X 'OPTIONS' \\\n  -H 'Connection: keep-alive' \\\n  -H 'Accept: */*' \\\n  -H 'Access-Control-Request-Method: GET' \\\n  -H 'Access-Control-Request-Headers: authorization' \\\n  -H 'Origin: https://ww1d2ec5f82d2a53a2-qw-scrm-test3.dustess.com' \\\n  -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36' \\\n  -H 'Sec-Fetch-Mode: cors' \\\n  -H 'Sec-Fetch-Site: same-site' \\\n  -H 'Sec-Fetch-Dest: empty' \\\n  -H 'Accept-Language: zh-CN,zh;q=0.9,en;q=0.8' \\\n  --compressed\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/这是第一个博客网站 copy.md","raw":"---\ntitle: 这是第一个博客网站 Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\ncurl 'https://mk-test3.dustess.com/qw-scrm-svc/action/company/getDetail?id=dff27d93-7b73-11ec-9bfb-829da4612e9a' \\\n  -X 'OPTIONS' \\\n  -H 'Connection: keep-alive' \\\n  -H 'Accept: */*' \\\n  -H 'Access-Control-Request-Method: GET' \\\n  -H 'Access-Control-Request-Headers: authorization' \\\n  -H 'Origin: https://ww1d2ec5f82d2a53a2-qw-scrm-test3.dustess.com' \\\n  -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36' \\\n  -H 'Sec-Fetch-Mode: cors' \\\n  -H 'Sec-Fetch-Site: same-site' \\\n  -H 'Sec-Fetch-Dest: empty' \\\n  -H 'Accept-Language: zh-CN,zh;q=0.9,en;q=0.8' \\\n  --compressed\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"这是第一个博客网站 copy","published":1,"date":"2022-01-22T13:32:29.095Z","updated":"2022-01-22T13:33:53.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckztjmdhf000anb666kdvfo6j","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">curl <span class=\"token string\">'https://mk-test3.dustess.com/qw-scrm-svc/action/company/getDetail?id=dff27d93-7b73-11ec-9bfb-829da4612e9a'</span> \\\n  -X <span class=\"token string\">'OPTIONS'</span> \\\n  -H <span class=\"token string\">'Connection: keep-alive'</span> \\\n  -H <span class=\"token string\">'Accept: */*'</span> \\\n  -H <span class=\"token string\">'Access-Control-Request-Method: GET'</span> \\\n  -H <span class=\"token string\">'Access-Control-Request-Headers: authorization'</span> \\\n  -H <span class=\"token string\">'Origin: https://ww1d2ec5f82d2a53a2-qw-scrm-test3.dustess.com'</span> \\\n  -H <span class=\"token string\">'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36'</span> \\\n  -H <span class=\"token string\">'Sec-Fetch-Mode: cors'</span> \\\n  -H <span class=\"token string\">'Sec-Fetch-Site: same-site'</span> \\\n  -H <span class=\"token string\">'Sec-Fetch-Dest: empty'</span> \\\n  -H <span class=\"token string\">'Accept-Language: zh-CN,zh;q=0.9,en;q=0.8'</span> \\\n  --compressed\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo generate\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo deploy\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://testcabana.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://testcabana.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://testcabana.github.io/","title":"前去学习"}],"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">curl &#39;https://mk-test3.dustess.com/qw-scrm-svc/action/company/getDetail?id=dff27d93-7b73-11ec-9bfb-829da4612e9a&#39; \\\n  -X &#39;OPTIONS&#39; \\\n  -H &#39;Connection: keep-alive&#39; \\\n  -H &#39;Accept: */*&#39; \\\n  -H &#39;Access-Control-Request-Method: GET&#39; \\\n  -H &#39;Access-Control-Request-Headers: authorization&#39; \\\n  -H &#39;Origin: https://ww1d2ec5f82d2a53a2-qw-scrm-test3.dustess.com&#39; \\\n  -H &#39;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36&#39; \\\n  -H &#39;Sec-Fetch-Mode: cors&#39; \\\n  -H &#39;Sec-Fetch-Site: same-site&#39; \\\n  -H &#39;Sec-Fetch-Dest: empty&#39; \\\n  -H &#39;Accept-Language: zh-CN,zh;q=0.9,en;q=0.8&#39; \\\n  --compressed\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckztjmdgw0001nb665pdl154q","category_id":"ckztjmdh60004nb668201h7l2","_id":"ckztjmdhi000enb662z936ahs"},{"post_id":"ckztjmdh40003nb662uc56l48","category_id":"ckztjmdhg000bnb66apjgbfyl","_id":"ckztjmdhj000hnb6668i5462v"},{"post_id":"ckztjmdhe0009nb66c4eu3v2r","category_id":"ckztjmdhi000fnb661pw731il","_id":"ckztjmdhk000jnb66g2pk3a9n"}],"PostTag":[{"post_id":"ckztjmdgw0001nb665pdl154q","tag_id":"ckztjmdha0005nb666rwx2dq9","_id":"ckztjmdhh000dnb66bloyh300"},{"post_id":"ckztjmdh40003nb662uc56l48","tag_id":"ckztjmdhh000cnb669tquexe7","_id":"ckztjmdhl000mnb665p4kax85"},{"post_id":"ckztjmdh40003nb662uc56l48","tag_id":"ckztjmdhi000gnb665my6dhgo","_id":"ckztjmdhl000nnb664mhma7cm"},{"post_id":"ckztjmdh40003nb662uc56l48","tag_id":"ckztjmdhj000inb6680cffb0j","_id":"ckztjmdhl000pnb6669bk7807"},{"post_id":"ckztjmdh40003nb662uc56l48","tag_id":"ckztjmdhk000knb667als3a2u","_id":"ckztjmdhl000qnb666g4abiyb"},{"post_id":"ckztjmdhe0009nb66c4eu3v2r","tag_id":"ckztjmdhk000lnb66hqmr4ksc","_id":"ckztjmdhm000rnb66d4fl78kd"},{"post_id":"ckztjmdhe0009nb66c4eu3v2r","tag_id":"ckztjmdhl000onb66d71g9tax","_id":"ckztjmdhm000snb662ikf0h9u"}],"Tag":[{"name":"Python","_id":"ckztjmdha0005nb666rwx2dq9"},{"name":"Git","_id":"ckztjmdhh000cnb669tquexe7"},{"name":"Github","_id":"ckztjmdhi000gnb665my6dhgo"},{"name":"Gitlab","_id":"ckztjmdhj000inb6680cffb0j"},{"name":"SVN","_id":"ckztjmdhk000knb667als3a2u"},{"name":"Typora","_id":"ckztjmdhk000lnb66hqmr4ksc"},{"name":"Markdown","_id":"ckztjmdhl000onb66d71g9tax"}]}}